from bs4 import BeautifulSoup
import requests
import MySQLdb
import cgi

def init(filenumber):
    exporturl = "http://www.enggroom.com/Project.aspx"
    payload = {'__EVENTTARGET': 'ctl00$ContentPlaceHolder1$GridView1$ctl%s$btnDownloadTheFile'%filenumber,
     '__EVENTARGUMENT': '',
     '__VIEWSTATE': '/wEPDwUKLTg2MzEyNTMzNA9kFgJmD2QWAgIDD2QWAgIBD2QWBAIBDzwrABEDAA8WBB4LXyFEYXRhQm91bmRnHgtfIUl0ZW1Db3VudALeAWQBEBYAFgAWAAwUKwAAFgJmD2QWwANmDw8WAh4HVmlzaWJsZWhkZAIBD2QWAmYPZBYKAgEPDxYCHgRUZXh0BStPbmxpbmUgUmVzdGF1cmFudCBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwWlAURvd25sb2FkIE9ubGluZSBSZXN0YXVyYW50IE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3QgaW4gUEhQIHdpdGggbXkgc3FsIHdpdGggc291cmNlIGNvZGUsUmVwb3J0IEZvciBMYXN0IFNlbWVzdGVyIFN0dWRlbnQgQ29tcHV0ZXIgRW5naW5lZXJpbmcsRGlwbG9tYSxCQ0EsTVNDLUlULE1DQWRkAgUPDxYCHwMFE1BocCxNeSBTcWwsSHRtbCxDU1NkZAIHDw8WAh8DBQQyOTE3ZGQCCQ8PFgIeD0NvbW1hbmRBcmd1bWVudAUnfi9Qcm9qZWN0L09ubGluZVJlc3RyYXVudE1hbmFnZW1lbnQuemlwZGQCAg9kFgJmD2QWCgIBDw8WAh8DBRtQTkVVTUFUSUMgQlVNUEVSIEFVVE9NQVRJQyBkZAIDDw8WAh8DBboEVGhpcyBzeXN0ZW0gaXMgY29uc2lzdHMgb2YgSVIgdHJhbnNtaXR0ZXIgYW5kIFJlY2VpdmVyIGNpcmN1aXQsIENvbnRyb2wgVW5pdCwgUG5ldW1hdGljIGJ1bXBlciBzeXN0ZW0uIFRoZSBJUiBzZW5zb3IgaXMgdXNlZCB0byBkZXRlY3QgdGhlIG9ic3RhY2xlLiBUaGVyZSBpcyBhbnkgb2JzdGFjbGUgY2xvc2VyIHRvIHRoZSB2ZWhpY2xlICh3aXRoIGluIDQgZmVldCksIHRoZSBjb250cm9sIHNpZ25hbCBpcyBnaXZlbiB0byB0aGUgYnVtcGVyIGFjdGl2YXRpb24gc3lzdGVtLiBUaGUgcG5ldW1hdGljIGJ1bXBlciBzeXN0ZW0gaXMgdXNlZCB0byBwcm9kdWN0IHRoZSBtYW4gYW5kIHZlaGljbGUuIFRoaXMgYnVtcGVyIGFjdGl2YXRpb24gc3lzdGVtIGlzIG9ubHkgYWN0aXZhdGVkIHRoZSB2ZWhpY2xlIHNwZWVkIGFib3ZlIDQwLTUwIGttIHBlciBob3VyLiBUaGlzIHZlaGljbGUgc3BlZWQgaXMgc2Vuc2VkIGJ5IHRoZSBwcm94aW1pdHkgc2Vuc29yIGFuZCB0aGlzIHNpZ25hbCBpcyBnaXZlbiB0byB0aGUgY29udHJvbCB1bml0IGFuZCBwbmV1bWF0aWMgYnVtcGVyIGFjdGl2YXRpb24gc3lzdGVtLiAgZGQCBQ8PFgIfAwUTTWVjaGFuaWNhbCAgcHJvamVjdGRkAgcPDxYCHwMFAzE5NWRkAgkPDxYCHwQFTn4vUHJvamVjdC9BVVRPTUFUSUMgUE5FVU1BVElDIEJVTVBFUi1NRUNIQU5JQ0FMIEVOR0lORUVSSU5HIFBST0pFQ1QgUkVQT1JULmRvY2RkAgMPZBYCZg9kFgoCAQ8PFgIfAwUxRG93bmxvYWQgT25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbSBQcm9qZWN0IGluIFBIUGRkAgMPDxYCHwMF1gJPbmxpbmUgRXhhbWluYXRpb24gc3lzdGVtIGlzIHRoZSBwcm9jZXNzIG9mIGNvbmR1Y3RpbmcgZXhhbSBvbmxpbmUuVGhpcyBwcm9qZWN0IHByb3ZpZGUgYWNjdXJhdGUgYW5kIGZsZXhpYmxlIG1hbm5lciBvZiBjb25kdWN0aW5nIGV4YW0gb25saW5lLlRoaXMgUHJvamVjdCBwcm92aWRlcyBtb3JlIGFjY3VyYXRlIGFuZCBlZmZpY2llbnQgd2F5IHRvIHRha2UgZXhhbS5JdCBhbHNvIHByb3ZpZGVzIGZsZXhpYmlsaXR5ICB0byB0aGUgdXNlciBhcyBvbmUgY2FuIGdpdmUgdGhlIGV4YW0gYXQgaG9tZS5UaGlzIGlzIGEgb25lIG9mIHRoZSBnb29kIHByb2plY3QgZm9yIGZpbmFsIHllYXIgc3R1ZGVudC5kZAIFDw8WAh8DBQlQSFAsTXlTcWxkZAIHDw8WAh8DBQQ3Nzc1ZGQCCQ8PFgIfBAUkfi9Qcm9qZWN0L09ubGluZV9FeGFtaW5hdGlvbl9QSFAuemlwZGQCBA9kFgJmD2QWCgIBDw8WAh8DBSpPbmxpbmUgQ2luZW1hIFRpY2tldCBCb29raW5nIFN5c3RlbSBpbiBQSFBkZAIDDw8WAh8DBYIEVGhpcyBzb2x1dGlvbiB1c2luZyBQSFAgUGxhdGZvcm0gd2hpY2ggd291bGQgZW5hYmxlIG1vdmllIGdvZXJzIHRvIGJvb2sgdGhlaXINCnRpY2tldHMgZWxlY3Ryb25pY2FsbHkgb3ZlciB0aGUgSW50ZXJuZXQgZnJvbSB0aGUgY29tZm9ydCBvZiB0aGVpciBvZmZpY2Ugb3IgaG9tZS4NCldpdGggdGhlIGFkdmVudCBvZiB0aGUgbW9kZXJuIGFnZSwgdGhlIHR5cGljYWwgdXNlciBkaWQgbm90IGhhdmUgZW5vdWdoIHRpbWUgdG8NCnN0YW5kIGluIGxpbmUgb3V0c2lkZSB0aGUgdGhlYXRlcnMuIFRoZSBvbmxpbmUgc29sdXRpb24gYWxsb3dzIHVzZXJzIHRvIHNlbGVjdCB0aGVpcg0Kc2hvd3MsIGJvb2sgYW5kIHBheSBmb3IgdGhlaXIgdGlja2V0cy4gVGhpcyBndWFyYW50ZWVzIHRoZW0gYSB0aWNrZXQgZXZlbiBiZWZvcmUNCnRoZXkgYXJyaXZlIGF0IHRoZSBjaW5lbWEgaGFsbC5Eb3dubG9hZCBjb21wbGV0ZSBDaW5lbWEgdGlja2V0IGJvb2tpZyBwcm9qZWN0IHdpdGggc291cmNlIGNvZGUgaW4gUEhQLmRkAgUPDxYCHwMFClBIUCxNWSBTcWxkZAIHDw8WAh8DBQQ2ODc4ZGQCCQ8PFgIfBAUufi9Qcm9qZWN0L0NpbmVtYS1UaWNrZXQtQm9va2luZy1TeXN0ZW0tUEhQLnJhcmRkAgUPZBYCZg9kFgoCAQ8PFgIfAwUhQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwXfAmhlIEFpcmxpbmUgUmVzZXJ2YXRpb24gU3lzdGVtIChBUlMpIGlzIGEgc29mdHdhcmUgYXBwbGljYXRpb24gdG8gYXNzaXN0IGFuIGFpcmxpbmUgd2l0aCB0cmFuc2FjdGlvbnMgcmVsYXRlZCB0byBtYWtpbmcgdGlja2V0IHJlc2VydmF0aW9ucywgd2hpY2ggaW5jbHVkZXMgYmxvY2tpbmcsIHJlc2VydmluZywgY2FuY2VsaW5nIGFuZCByZXNjaGVkdWxpbmcgdGlja2V0cy5UaGUgc3lzdGVtIHNoYWxsIHJlcXVpcmUgYSB1c2VyIHRvIHJlZ2lzdGVyLCBpbiBvcmRlciB0byBjYXJyeSBvdXQgYW55IHRyYW5zYWN0aW9ucyB3aXRoIGl0IGV4Y2VwdCBmb3IgY2hlY2tpbmcgdGhlIGF2YWlsYWJpbGl0eSBvZiB0aWNrZXRzLmRkAgUPDxYCHwMFCVBIUCxNeVNxbGRkAgcPDxYCHwMFBDQyMThkZAIJDw8WAh8EBR1+L1Byb2plY3QvYm9vdGxpbnQtbWFzdGVyLnppcGRkAgYPZBYCZg9kFgoCAQ8PFgIfAwUiQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFxgNBaXJsaW5lIFJlc2VydmF0aW9uIHN5c3RlbSBpcyBhIHdlYiBiYXNlZCByZXNlcnZhdGlvbiBzeXN0ZW0gIG1hZGUgaW4gamF2YSBwcm9ncmFtbWluZyBsYW5ndWFnZS5BcyBhbGwgd2Uga25vdyxKYXZhIGlzIG9uZSBvZiB0aGUgbW9zdCBwcm9taW5lbnQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UgZm9yIHNvZnR3YXJlIGRldmVsb3BtZW50LlRoaXMgcHJvamVjdCBwcm92aWRlcyBhIGZhY2lsaXR5IHRvIHNlYXJjaCBmb3IgdGhlIGZsaWdodCBhdmFpbGFibGUgYmV0d2VlbiB0d28gc3RhdGlvbixjb21wYXJlIGZhcmUgb2YgdGhlIGRpZmZlcmVudCBmbGlnaHRzLGNvbXBhcmUgdHJhdmVsbGluZyB0aW1lIG9mIHRoZSBmbGlnaHQuSXQgYWxsb3dzIHVzZXIgdG8gbWFrZSBhIHJlc2VydmF0aW9uIG9mICBmbGlnaHQsY2FuY2VsbGF0aW9uIG9mIGZsaWdodCx1cC1ncmFkYXRpb24gb2YgdGlja2V0IGFsc28uZGQCBQ8PFgIfAwUESmF2YWRkAgcPDxYCHwMFBTExNTA3ZGQCCQ8PFgIfBAUzfi9Qcm9qZWN0L0FuZHJvaWQgTXVsdGkgVG9vbHMgdjEuMDJiIEZBSVNBTCBKRUUucmFyZGQCBw9kFgJmD2QWCgIBDw8WAh8DBSdEb3dubG9hZCBXZWJzaXRlIENvcGllciBQcm9qZWN0IGluIEpBVkFkZAIDDw8WAh8DBZ4CV2Vic2l0ZSBDb3BpZXIgaXMgYSBhcHBsaWNhdGlvbiB0byBkb3dubG9hZCBjb21wbGV0ZSB3ZWJzaXRlIGZvciBPZmZsaW5lIGJyb3dzaW5nLkl0IGlzIHNpbWlsYXIgdG8gSFRUUkFDSy5Db21wbGV0ZSBzb3VyY2UgY29kZSBpcyB3cml0dGVuIGluIGphdmEgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBhbmQgcmVwb3J0LmF1dGhvciBoYXZlIHdyaXR0ZW4gZXhjZWxsZW50IGphdmEgY29kZSB3aXRoIEphdmEuTmV0IHBhY2thZ2UuR29vZCBhY2FkZW1pYyBwcm9qZWN0IGRldmVsb3BlZCBpbiBqYXZhLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQQ2NTgxZGQCCQ8PFgIfBAUffi9Qcm9qZWN0L21pbmljb3BpZXItbWFzdGVyLnppcGRkAggPZBYCZg9kFgoCAQ8PFgIfAwUbQ2hhdCBBcHBsaWNhdGlvbiBpbiBBbmRyb2lkZGQCAw8PFgIfAwWdAURvd25sb2FkIENvbXBsZXRlIGNoYXQgYXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIGFuZHJvaWQgZm9yIGZpbmFsIHllYXIgc3R1ZGVudC5UaGlzIGFwcGxpY2F0aW9uIGNhbiB3b3JrIG9uIG1vc3Qgb2YgdGhlIHZlcnNpb24gb2YgYW5kcm9pZCB3aXRob3V0IGFueSBlcnJvci5kZAIFDw8WAh8DBRFBbmRyb2lkLFBIUC5NeVNxbGRkAgcPDxYCHwMFBDU0MjZkZAIJDw8WAh8EBSZ+L1Byb2plY3QvQ2hhdC1BcHBsaWNhdGlvbi1BbmRyb2lkLnJhcmRkAgkPZBYCZg9kFgoCAQ8PFgIfAwUhT25saW5lIFBoYXJtYWN5IE1hbmFnZW1lbnQgaW4gSlNQZGQCAw8PFgIfAwXgAkZyZWUgRG93bmxvYWQgUHJvamVjdCB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlIGluIEpTUCxKYXZhIHdpdGggT3JhY2xlIDEwZyBhcyBhIERhdGFiYXNlLlRoaXMgcHJvamVjdCBpcyBkZXZlbG9wZWQgZm9yIGEgUGhhcm1hY3kgd2hpY2ggd2FudCB0byBtYW5hZ2Ugcm91dGluZSBvcGVyYXRpb24uUGhhcm1hY3kgbWFuYWdlbWVudCBzeXN0ZW0gaXMgZGV2ZWxvcGVkIGluIEphdmEgU2VydmVyIFBhZ2VzIHdpdGggbmV0YmVhbnMgYXMgYSBJREUuIEl0IGhhcyBhIGdvb2QgR1VJIHdpdGggSFRNTCBhbmQgQ1NTLmRvd25sb2FkIGNvbXBsZXRlIHByb2plY3Qgd2l0aCBzb3VyY2UgY29kZSBhbmQgcmVwb3J0IGluIEpTUC5kZAIFDw8WAh8DBR9KYXZhLEpTUCxBSkFYLEhUTUwsQ1NTLE5ldGJlYW5zZGQCBw8PFgIfAwUFMTAyNzhkZAIJDw8WAh8EBSx+L1Byb2plY3QvUGhhcm1hY3ktTWFuYWdlbWVudC1TeXN0ZW0tSlNQLnppcGRkAgoPZBYCZg9kFgoCAQ8PFgIfAwUiUGF5bWVudCBCaWxsaW5nIFN5c3RlbSBpbiBKU1B8SmF2YWRkAgMPDxYCHwMF2gNGcmVlIERvd25sb2FkIFByb2plY3Qgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBpbiBKU1AsSmF2YSB3aXRoIE9yYWNsZSAxMGcgYXMgYSBEYXRhYmFzZS5UaGUgcHJvamVjdCB0aXRsZWQgYXMg4oCcUEFZTUVOVCBCSUxMSU5HIFNZU1RFTSBJTiBKU1Ag4oCcaXMgYSB3ZWIgYmFzZWQgYXBwbGljYXRpb24uIEFuIGluc3RpdHV0ZSAgaGF2ZSAgZGlmZmVyZW50IGJyYW5jaGVzIGF0IGRpZmZlcmVudCBsb2NhdGlvbnMgICB3YW50IHRvIGNvbnRyb2wgYW5kIG1haW50YWluIHRoZSBhY2NvdW50YW50IHNhbGFyeSBhbmQgc3R1ZGVudCBwZXJzb25hbCBhbmQgcGF5bWVudCBkZXRhaWxzLiBzb2Z0d2FyZSBwcm92aWRlcyBmYWNpbGl0eSBmb3IgcmVwb3J0aW5nICAsIG5ldyBzdHVkZW50IGRldGFpbHMsIHBheW1lbnQgZGV0YWlscyAsYW5kIG1vZGlmeSBkZXRhaWxzIG9mIHN0dWRlbnQgYW5kIHNhbGFyeSBvZiB0aGUgYWNjb3VudGFudC5kZAIFDw8WAh8DBR9KYXZhLEpTUCxBSkFYLEhUTUwsQ1NTLE5ldGJlYW5zZGQCBw8PFgIfAwUFMTA0NzRkZAIJDw8WAh8EBSh+L1Byb2plY3QvUGF5bWVudC1CaWxsaW5nIHN5c3RlbS1KU1AuemlwZGQCCw9kFgJmD2QWCgIBDw8WAh8DBSJGYWNlIElkZW50aWZpY2F0aW9uIFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwXsBlRvIGlkZW50aWZ5IGFueSBwZXJzb24gd2UgbmVlZCBzb21lIGlkZW50aWZpY2F0aW9uIHJlZ2FyZGluZyBwZXJzb24sIHdoaWNoIGFyZSBnaXZlbiBieSBleWV3aXRuZXNzLiBJbiBtb3N0IGNhc2VzIHRoZSBxdWFsaXR5IGFuZCByZXNvbHV0aW9uIG9mIHRoZSByZWNvcmRlZCBpbWFnZSBzZWdtZW50cyBpcyBwb29yIGFuZCBoYXJkIHRvIGlkZW50aWZ5IGEgZmFjZS4gVG8gb3ZlcmNvbWUgdGhpcyBzb3J0IG9mIHByb2JsZW0gd2UgYXJlIGRldmVsb3Bpbmcgc29mdHdhcmUuIElkZW50aWZpY2F0aW9uIGNhbiBiZSBkb25lIGluIG1hbnkgd2F5cyBsaWtlIGZpbmdlciBwcmludCwgZXllcywgRE5BIGV0Yy4gT25lIG9mIHRoZSBhcHBsaWNhdGlvbnMgaXMgZmFjZSBpZGVudGlmaWNhdGlvbi4gVGhlIGZhY2UgaXMgb3VyIHByaW1hcnkgZm9jdXMgb2YgYXR0ZW50aW9uIGluIHNvY2lhbCBpbnRlcnMgY291cnNlIHBsYXlpbmcgYSBtYWpvciByb2xlIGluIGNvbnZleWluZyBpZGVudGlmeSBhbmQgZW1vdGlvbi4gQWx0aG91Z2ggdGhlIGFiaWxpdHkgdG8gaW5mZXIgaW50ZWxsaWdlbmNlIG9yIGNoYXJhY3RlciBmcm9tIGZhY2lhbCBhcHBlYXJhbmNlIGlzIHN1c3BlY3QsIHRoZSBodW1hbiBhYmlsaXR5IHRvIHJlY29nbml6ZSBmYWNlIGlzIHJlbWFya2FibGUuVGhpcyBwcm9qZWN0IGlzIGludGVuZGVkIHRvIGlkZW50aWZ5IGEgcGVyc29uIHVzaW5nIHRoZSBpbWFnZXMgcHJldmlvdXNseSB0YWtlbi4gVGhlIGlkZW50aWZpY2F0aW9uIHdpbGwgYmUgZG9uZSBhY2NvcmRpbmcgdGhlIHByZXZpb3VzIGltYWdlcyBvZiBkaWZmZXJlbnQgcGVyc29ucy5Eb3dubG9hZCBGYWNlIERldGVjdGlvbiBzeXN0ZW0gaW4gSmF2YSB3aXRoIHNvdXJjZSBjb2RlLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUFMTEwNDdkZAIJDw8WAh8EBSN+L1Byb2plY3QvRmFjZS1EZXRlY3Rpb24tU3lzdGVtLnppcGRkAgwPZBYCZg9kFgoCAQ8PFgIfAwUvT25saW5lIEUgQmxvZ2dpbmcgUGxhdGZvcm0gRGV2ZWxvcGVkIGluIEFzcC5OZXRkZAIDDw8WAh8DBcQDQmxvZ2dpbmcgaXMgb25lIG9mIHRoZSBDb250ZW50IG1hbmFnZW1lbnQgc3lzdGVtIHdoZXJlIGV2ZXJ5IG9uZSBjYW4gY3JlYXRlIGEgaGlzL2hlciBvd24gQmxvZy5UaGlzIEJsb2cgY2FuIGJlIGNyZWF0ZWQgYWZ0ZXIgc3VjY2Vzc2Z1bCByZWdpc3RyYXRpb24ucmVnaXN0ZXJlZCBVc2VyIGNhbiBFZGl0IG9yIFVwZGF0ZSBhIGJsb2cgb3Igd3JpdGUgbW9yZSBCbG9nLkJsb2cgY2FuIGJlIHJlYWQgYnkgYW55IGFub255bW91cyB1c2VyIHdpdGhvdXQgcmVnaXN0cmF0aW9uLlRoaXMgcHJvamVjdCBpcyBvbmUgb2YgdGhlIGdvb2QgcHJvamVjdCBmb3IgRmluYWwgeWVhciBtYWpvciBwcm9qZWN0LkRvd25sb2FkIGNvbXBsZXRlIHByb2plY3Qgc291cmNlIGNvZGUgaW4gYXNwLm5ldCB3aXRoIE1TIFNxbCBhcyBhIERhdGFiYXNlIGFuZCBDIy5OZXQgYXMgYSBwcm9ncmFtbWluZyBsYW5ndWFnZS5kZAIFDw8WAh8DBSlBc3AuTmV0LE1TIFNxbCxDU1MsSFRNTCxKYXZhU2NyaXB0LEMjLk5ldGRkAgcPDxYCHwMFBDY3OTVkZAIJDw8WAh8EBSh+L1Byb2plY3QvRS1CbG9nZ2luZy1hc3AtbmV0LXByb2plY3QuemlwZGQCDQ9kFgJmD2QWCgIBDw8WAh8DBSVEb2N1bWVudCBtYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0ZGQCAw8PFgIfAwWgA0RpZ2l0YWwgRG9jdW1lbnRzIGFyZSBpbmNyZWFzaW5nIHZlcnkgcmFwaWRseS5UbyBtYW5hZ2UgYW5kIHN0b3JlIHRoZXNlIGRvY3VtZW50cyBlZmZpY2llbnRseSxzb21lIG1hbmFnZW1lbnQgc3lzdGVtIGlzIHJlcXVpcmVkLkRpZ2l0YWwgRG9jdW1lbnQgTWFuYWdlbWVudCBTeXN0ZW0gcHJvdmlkZSBhcmNoaXRlY3R1cmFsIHdheSBvZiBvcmdhbml6aW5nIGFuZCBtYW5hZ2luZyBhIERpZ2l0YWwgRG9jdW1lbnRzLkRvd25sb2FkIHRoaXMgcHJvamVjdCB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlIGluIGFzcC5uZXQgd2l0aCByZXBvcnQgYW5kIGRhdGFiYXNlLlRoaXMgcHJvamVjdCBmb2xsb3dzIE9iamVjdCBPcmllbnRlZCBEZXNpZ24gYW5kIEdvb2QgVXNlciBJbnRlcmZhY2UgZGVzaWduZWQgd2l0aCBIVE1MIGFuZCBDU1MuZGQCBQ8PFgIfAwUiQXNwLk5ldCxNUyBTcWwsQ1NTLEhUTUwsSmF2YVNjcmlwdGRkAgcPDxYCHwMFBDcwMzVkZAIJDw8WAh8EBSR+L1Byb2plY3QvRGlnaXRhbC1Eb2MtTWdtbnQtU3lzbS56aXBkZAIOD2QWAmYPZBYKAgEPDxYCHwMFG0NoYXQgQXBwbGljYXRpb24gaW4gTm9kZSBKc2RkAgMPDxYCHwMF+QFEb3dubG9hZCBjb21wbGV0ZSBwcm9qZWN0IHNvdXJjZSBjb2RlIHdyaXR0ZW4gaW4gc2VydmVyIHNpZGUgSmF2YXNjcmlwdCBOb2RlSnMgYW5kIEV4cHJlc3MuVGhpcyBhcHBsaWNhdGlvbiBkZW1vbnN0cmF0ZSBnb29kIGV4YW1wbGUgb2Ygc29ja2V0IHByb2dyYW1taW5nIGluIG5vZGVKcyBhbmQgRXhwcmVzcy5Eb3dubG9hZCBjb21wbGV0ZSBwcm9qZWN0IHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgYW5kIHJlcG9ydCBmb3IgZnJlZS5kZAIFDw8WAh8DBRpKYXZhc2NyaXB0LE5vZGUgSnMsRXhwcmVzc2RkAgcPDxYCHwMFBDMwMDFkZAIJDw8WAh8EBRl+L1Byb2plY3QvY2hhdC1tYXN0ZXIuemlwZGQCDw9kFgJmD2QWCgIBDw8WAh8DBRlGYWNlYm9vayBpbiBQSFAgYW5kIE15U3FsZGQCAw8PFgIfAwVyRnJlZSBkb3dubG9hZCBTb2NpYWwgTmV0d29ya2luZyBXZWJzaXRlIGluIFBIUCB3aXRoIG15IHNxbCwgVGhpcyBwcm9qZWN0IGZ1bmN0aW9uYWxpdHkgc2FtZSBhcyBmYWNlYm9vayB3ZWJzaXRlLiAgZGQCBQ8PFgIfAwUnUEhQIFNjcmlwdGluZyxIVE1MLENTUyxKYXZhc2NyaXB0LE15U3FsZGQCBw8PFgIfAwUEOTA4N2RkAgkPDxYCHwQFGn4vUHJvamVjdC9Tb2NpYWxOZXRQSFAuemlwZGQCEA9kFgJmD2QWCgIBDw8WAh8DBR9Ib3N0ZWwgTWFuYWdlbWVudCBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwX4AUZyZWUgRG93bmxvYWQgSG9zdGVsIE1hbmFnZW1lbnQgU3lzdGVtIGluIFBIUCwgbXlzcWwgamF2YXNjcmlwdCxjc3MsaHRtbCB3aXRoIHZhcmlvdXMgZnVuY3Rpb25hbGl0eS5XaGljaCBpcyBtb3JlIHVzZXIgZnJpZW5kbHkgYW5kIG1vcmUgR1VJIG9yaWVudGVkLiBXZSBjYW4gaW1wcm92ZSB0aGUgZWZmaWNpZW5jeSBvZiB0aGUgc3lzdGVtLCB0aHVzIG92ZXJjb21lIHRoZSBkcmF3YmFja3Mgb2YgdGhlIGV4aXN0aW5nIHN5c3RlbS4gZGQCBQ8PFgIfAwUfIFBIUCwgbXlzcWwgamF2YXNjcmlwdCxjc3MsaHRtbGRkAgcPDxYCHwMFBDY0MTdkZAIJDw8WAh8EBSZ+L1Byb2plY3QvaG9zdGVsLW1hbmFnZW1lbnQtc3lzdGVtLnppcGRkAhEPZBYCZg9kFgoCAQ8PFgIfAwUeT25saW5lIExpdmUgTWVldGluZyBpbiBBc3AuTmV0ZGQCAw8PFgIfAwXSClRoaXMgcHJvamVjdCBpcyBtYWlubHkgZGV2ZWxvcGVkIGZvciB0aGUgY29tbXVuaWNhdGlvbiBvZiBFbXBsb3llZXMgb2Ygb3JnYW5pemF0aW9uIGxvY2F0ZWQgYXQgZGlmZmVyZW50IGxvY2F0aW9ucy4gVGhlIHByb2plY3QgZW50aXRsZWQg4oCcTGl2ZSBNZWV0aW5nIGluIEFzcC5OZXTigJ0gc2V0IG9mIHBsYXRmb3JtIGZvciB0aGUgcHJvamVjdCBsZWFkZXJzIGFuZCBhZG1pbmlzdHJhdG9yIHRvIHNlbmQgbWVzc2FnZXMgdG8ga2VlcCBjb25zdGFudCBpbnRlcmFjdGlvbiB3aXRoIHRoZSBwcm9ncmFtbWVycy4gSW4gdGhlIHByb3Bvc2VkIHN5c3RlbSBpcyB0aGUgYWRtaW5pc3RyYXRvciBjYW4gc2l0IGF0IGhpcyBzeXN0ZW0gYW5kIGNvbW11bmljYXRlIHdpdGggdGhlIHByb2plY3QgbGVhZGVycywgcHJvZ3JhbW1lcnMgYW5kIGNhbiBhbHNvIG1haW50YWluIHRoZSBsb2dpbiB0aW1lLCBsb2dvdXQgdGltZS4gSGUgY2FuIGNoYXQgYWJvdXQgdGhlIHByb2plY3QgZ29pbmcgb24gd2l0aCBib3RoIHRoZSBwcm9ncmFtbWVycyBhbmQgcHJvamVjdCBsZWFkZXJzLiBUaGlzIHByb2plY3QgYWxzbyBtYWludGFpbnMgb2ZmbGluZSBtZXNzYWdlcy4gVGhlIGFkbWluaXN0cmF0b3Igc2VlcyB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgc3lzdGVtIG9mIHByb2plY3QgbGVhZGVyL3Byb2dyYW1tZXIgaGUgaXMgaW50ZXJlc3RlZCBhbmQgY2hhdCB3aXRoIHRoZSBwZW9wbGUgLlRoZSBwcm9qZWN0IGxlYWRlciBnaXZlcyB0aGUgaW5zdGFudCByZXBvcnQgYWJvdXQgdGhlIHByb2plY3QgdG8gdGhlIGFkbWluaXN0cmF0b3IuIFRocm91Z2ggdGhpcyBDb21tdW5pY2F0aW9uIFN5c3RlbSwgV2hlbmV2ZXIgdXNlciBsb2dzLWluIGludG8gdGhlIHN5c3RlbSB0aGVuIGxvZ2luIHRpbWUgaXMgcmVjb3JkZWQgaW4gdGhlIGFkbWluaXN0cmF0b3LigJlzIHN5c3RlbSBhdXRvbWF0aWNhbGx5LiBUaGlzIHByb2plY3QgbWFrZXMgdGhlIG1vc3Qgb2YgdGhlIHRlZGlvdXMgYW5kIG11bmRhbmUgZGVza3dvcmsgdG8gbWluaW1pemUuIFRoaXMgZmFjaWxpdGF0ZXMgdGhlIHVzZXIgdG8gY29uY2VudHJhdGUgbW9yZSBvbiB0aGUgcHJvamVjdCBhbmQgbGVzcyBvbiB0aGUgbWFuYWdpbmcgb2YgdGhlc2UgdGFza3MuIFRoZSBzb2Z0d2FyZSBpcyBmdWxseSBpbnRlZ3JhdGVkIHdpdGggQ1JNIChDdXN0b21lciBSZWxhdGlvbnNoaXAgTWFuYWdlbWVudCkgYXMgd2VsbCBhcyBDTVMgKENvbnRlbnQgTWFuYWdlbWVudCBTeXN0ZW0pIHNvbHV0aW9uIGFuZCBkZXZlbG9wZWQgaW4gYSBtYW5uZXIgdGhhdCBpcyBlYXNpbHkgbWFuYWdlYWJsZSwgdGltZSBzYXZpbmcgYW5kIHJlbGlldmluZyBvbmUgZnJvbSBtYW51YWwgd29ya3MuIGRkAgUPDxYCHwMFFUFzcC5OZXQsTXMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBTEwOTUwZGQCCQ8PFgIfBAUhfi9Qcm9qZWN0L0xpdmUtTWVldGluZy1Jbi1Bc3AucmFyZGQCEg9kFgJmD2QWCgIBDw8WAh8DBS9PbmxpbmUgUHJvZHVjdGlvbiBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKU1B8SmF2YWRkAgMPDxYCHwMF6ANPbmxpbmUgcHJvZHVjdGlvbiBtYW5hZ2VtZW50IHN5c3RlbSBpcyBhIG9ubGluZSB3ZWIgYXBwbGljYXRpb24gdG8gbWFuYWdlIHRhc2sgb2YgcHJvZHVjdGlvbi5UaGlzIGFwcGxpY2F0aW9uIGlzIHZlcnkgdXNlZnVsIGZvciBjb21wYW5pZXMgd2hpY2ggYXJlIGdldHRpbmcgdGhlaXIgb3JkZXJzIG9mIHByb2R1Y3RzIGFuZCB0aGVuIG1ha2luZyB0aGF0IHBhcnRpY3VsYXIgb3JkZXIuVXNpbmcgdGhpcyBhcHBsaWNhdGlvbix0aGV5IGNhbiBtYW5hZ2UgbWF0ZXJpYWwgcmVxdWlyZWQgb3IgdXNlZCBmb3IgcHJvZHVjdGlvbixjb3N0IG9mIG1hdGVyaWFsLGNvc3Qgb2YgbGFib3VyIHdvcmsuVGhpcyBhcHBsaWNhdGlvbiBpcyB2ZXJ5IHVzZWZ1bCB0byBtYWtlIHRoZWlyIHJvdXRpbmUgdGFzayBhdXRvbWF0ZWQgaW4gSlNQfEphdmEuRG93bmxvYWQgSlNwfEphdmEgc291cmNlIGNvZGUgZm9yIE9ubGluZSBQcm9kdWN0aW9uIE1hbmFnZW1lbnQgU3lzdGVtLmRkAgUPDxYCHwMFCEpTUCxKYXZhZGQCBw8PFgIfAwUFMTEwMjdkZAIJDw8WAh8EBSp+L1Byb2plY3QvUHJvZHVjdGlvbi1NYW5hZ2VtZW50LVN5c2V0bS56aXBkZAITD2QWAmYPZBYKAgEPDxYCHwMFMkludGVsbGlnZW50IE9ubGluZSBDb21tb2RpdHkgdHJhZGluZyBTeXN0ZW0gaW4gQXNwZGQCAw8PFgIfAwXXAlRoaXMgb25saW5lIHdlYiBhcHBsaWNhdGlvbiBpcyBnZW5lcmF0ZWQgdG8gcHJvdmlkZSBpbnRlbGxpZ2VudCB0cmFkaW5nIGZvciBjb21tb2RpdHkgbWFya2V0LlRoaXMgb25saW5lIHdlYiBhcHBsaWNhdGlvbiB3aWxsIHByb3ZpZGUgbGl2ZSByYXRlIG9mIGNvbW1vZGl0eS51c2VyIGNhbiBhbHNvIHB1cmNoYXNlIGFuZCBzZWxsIGNvbW1vZGl0eSBvbmxpbmUuYWNjb3VudCBpcyBtYWludGFpbmVkIGF1dG9tYXRpY2FsbHkuRG93bmxvYWQgT25saW5lIEludGVsbGlnZW50IGNvbW1vZGl0eSB0cmFkaW5nIHN5c3RlbSBpbiBBc3AuTmV0IHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgYW5kIHJlcG9ydC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1zIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ1MzUwZGQCCQ8PFgIfBAUsfi9Qcm9qZWN0L2ludGVsbGlnZW50LWNvbW1vZGl0eSAtdHJhZGluZy5yYXJkZAIUD2QWAmYPZBYKAgEPDxYCHwMFH09ubGluZSBDb3Vyc2UgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBcMDRGV2ZWxvcGluZyBhbiBJbnRlZ3JhdGVkIENvbGxhZ2UgTWFuYWdlbWVudCBTeXN0ZW0gaW5pdGlhdGl2ZSBpcyBhIHR5cGljYWxseSBtdWNoIGxhcmdlciBlbmRlYXZvciB0aGFuIHRoYXQgb2YgYW4gaW5zdHJ1Y3Rvci1sZWQgdHJhaW5pbmcgKElMVCkgcHJvZ3JhbS4gQ29uc2lkZXIgdGhlIGluY3JlYXNlZCBleHBlbnNlcywgbnVtYmVyIG9mIHBlb3BsZSBpbnZvbHZlZCwgZGV2ZWxvcG1lbnQgdGltZSwgdGVjaG5vbG9naWNhbCByZXF1aXJlbWVudHMsIGFuZCBkZWxpdmVyeSBvcHRpb25zLkRvd25sb2FkIE9ubGluZSBDb3Vyc2UgbWFuYWdlbWVudCBzeXN0ZW0gd2l0aCBhc3AubmV0LlRoaXMgcHJvamVjdCBpbmNsdWRlcyBEYXRhYmFzZSBGaWxlcyBpbiBNUyBTcWwsUHJvamVjdCBTb3VyY2UgY29kZSBpbiBBc3AuTmV0IGFuZCBSZXBvcnQgYW5kIFByZXNlbnRhdGlvbiBvZiBQcm9qZWN0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTXMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDk5MDZkZAIJDw8WAh8EBSZ+L1Byb2plY3QvQ291cnNlLU1hbmFnZW1lbnQtU3lzdGVtLnJhcmRkAhUPZBYCZg9kFgoCAQ8PFgIfAwUjT2ZmaWNlIE1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBe8CVGhpcyBpcyBhbiBpbnRyYW5ldCB3ZWIgYXBwbGljYXRpb24gdXNlZCB0byBhdXRvbWF0ZSB0YXNrcyByZWxhdGVkIHRvIGEgdHlwaWNhbCBmcm9udC1vZmZpY2UgZGVzayBvZiB0cmFpbmluZyBjZW50cmUuRG93bmxvYWQgQXNwLk5ldCBQcm9qZWN0IG9uIE9mZmljZSBNYW5hZ2VtZW50IFN5c3RlbSB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlLlRoaXMgYWxsb3dzIHVzZXIgdG8gbG9nIGluIGFuZCBhZGQgZGV0YWlscyBvZiBiYXRjaGVzLCBzdHVkZW50cyBhbmQgcGF5bWVudHMuIEl0IGFsc28gcHJvdmlkZXMgc2VhcmNoIG9mIHN0dWRlbnRzLCBwYXltZW50cyByZXBvcnQsIGluZm9ybWF0aW9uIGFib3V0IGJhdGNoZXMgYW5kIHN0dWRlbnRzLmRkAgUPDxYCHwMFDkFzcC5OZXQsTXMgU3FsZGQCBw8PFgIfAwUEODY4OGRkAgkPDxYCHwQFJn4vUHJvamVjdC9PZmZpY2UtTWFuYWdlbWVudC1TeXN0ZW0uemlwZGQCFg9kFgJmD2QWCgIBDw8WAh8DBRhHRU8gU1BBVElBTCBXRUIgU09MVVRJT05kZAIDDw8WAh8DBZ0GTG9jYWwgYm9kaWVzIGxpa2UgbXVuaWNpcGFsaXRpZXMgbmVlZCBjb2xsZWN0IGRpZmZlcmVudCBraW5kIG9mIHRheGVzIGZyb20gdGhlIGNpdGl6ZW5zLiAgRXZlcnkgY2l0aXplbiBuZWVkIHRvIHBheSBXYXRlciBCaWxscyBhbmQgRWxlY3RyaWNpdHkgQmlsbHMgdG8gdGhlIHBhcnRpY3VsYXIgYXV0aG9yaXRpZXMuICBBY3R1YWxseSBhIGNpdGl6ZW4gd2FudCB0byBwYXkgaGlzIG11bmljaXBhbCB0YXggbWVhbnMgaGUgc2hvdWxkIGdvIHRvIG11bmljaXBhbCBvZmZpY2UgYW5kIGNvbGxlY3QgdGhlIG5lY2Vzc2FyeSBiaWxsLCBwYXkgdGhlcmUgb25seS4gIFNhbWUgYXMgd2F0ZXIgYW5kIGVsZWN0cmljaXR5IGJpbGxzLiAgICBUaGlzIGlzIG5vdCBhbiBlYXN5IGpvYiB0byBnZXQgYWxsIHRoZXNlIHRheCBpbmZvcm1hdGlvbiBpbiBkaWZmZXJlbnQgYXV0aG9yaXRpZXMgbm93IGRheXMuCUZvciB0aGF0IHB1cnBvc2Ugd2UgYXJlIGRldmVsb3BpbmcgdGhpcyBhcHBsaWNhdGlvbiwgd2hpY2ggY2FuIGNvbGxlY3QgdGhlIHRheCBpbmZvcm1hdGlvbiBmcm9tIGRpZmZlcmVudCBhdXRob3JpdGllcyBiYXNlZCBvbiB0aGUgaG91c2Ugbm/igJlzIGFuZCBvd25lciBuYW1lIGJ5IHVzaW5nIFdlYiBTZXJ2aWNlcyBhbmQgc3RvcmVzIHRoZSBkYXRhIGluIG91ciBvd24gZGF0YWJhc2UuICBGb3IgZ2V0dGluZyB0aGUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRheGVzIGNpdGl6ZW5zIG5lZWQgdG8gcmVnaXN0ZXIgZmlyc3QuRG93bmxvYWQgTGF0ZXN0IEFzcC5OZXQgUHJvamVjdCBmb3IgRmluYWwgeWVhci5kZAIFDw8WAh8DBQ5Bc3AuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBDM5ODhkZAIJDw8WAh8EBR1+L1Byb2plY3QvZ0VPLXNQQVRJQUwtd0VCLnppcGRkAhcPZBYCZg9kFgoCAQ8PFgIfAwUZVG91cmlzbSBNYW5hZ2VtZW50IFN5c3RlbWRkAgMPDxYCHwMFigNBIFRvdXJpc20gTWFuYWdlbWVudCBTeXN0ZW0gaXMgYSB3ZWIgcHJvamVjdCB3aGljaCBleHBsYWlucyBhYm91dCBkZXZlbG9waW5nIGFuIEFzcC5OZXQgQXBwbGljYXRpb24gaW4gbGF5ZXJlZCBhcmNoaXRlY3R1cmUuIFRoaXMgYXBwbGljYXRpb24gaGFzIGFsbCBjb2Rpbmcgc3RhbmRhcmRzIGluIHBsYWNlLiBUaGlzIHByb2plY3QgaXMgZGV2ZWxvcGVkIG9ubHkgZm9yIGZyZXNoZXJzIGFuZCBqdW5pb3IgZGV2ZWxvcGVycy4gSXQgaGFzIE9iamVjdCBPcmllbnRlZCBQcm9ncmFtbWluZyB3aGljaCBoZWxwcyBGcmVzaGVycyBhbmQgSnVuaW9yIGRldmVsb3BlcnMgdG8gZWFzaWx5IHVuZGVyc3RhbmQgaG93IHByb2plY3Qgd2lsbCBiZSBkZXZlbG9wZWQgYW55IHNvZnR3YXJlIGNvbXBhbnkuZGQCBQ8PFgIfAwUOQXNwLk5ldCxNcyBTcWxkZAIHDw8WAh8DBQUxMDg1M2RkAgkPDxYCHwQFK34vUHJvamVjdC9Ub3VyaXNtLU1hbmFnZW1lbnQtU3lzdGVtLUFzcC5yYXJkZAIYD2QWAmYPZBYKAgEPDxYCHwMFJk5ldHdvcmsgTG9hZCBCYWxhbmNpbmcgcHJvamVjdCBpbiBKYXZhZGQCAw8PFgIfAwX3AU5ldHdvcmsgTG9hZCBCYWxhbmNpbmcgc3lzdGVtIHByb2plY3QgaXMgYSBqYXZhIHByb2plY3QgZm9yIGNvbXB1dGVyIHNjaWVuY2UgZmluYWwgeWVhciBzdHVkZW50cyB3aG8gYXJlIGludGVyZXN0ZWQgaW4gZGV2ZWxvcGluZyBqYXZhIGJhc2VkIG5ldHdvcmsgcmVsYXRlZCBwcm9qZWN0LnlvdSBjYW4gZG93bmxvYWQgTmV0d29yayBMb2FkIEJhbGFuY2luZyBwcm9qZWN0IHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgaW4gSmF2YS5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBDg5ODBkZAIJDw8WAh8EBSN+L1Byb2plY3QvTmV0d29yay1Mb2FkLUJhbC1KYXZhLnppcGRkAhkPZBYCZg9kFgoCAQ8PFgIfAwUiRmFjZSBEZXRlY3Rpb24gU3lzdGVtIEZvciBQcmlzb25lcmRkAgMPDxYCHwMFvwVGYWNlIGRldGVjdGlvbiBzeXN0ZW0gZm9yIHByaXNvbmVyIGlzIGEgamF2YSBwcm9qZWN0LlRoaXMgc29mdHdhcmUgYXBwbGljYXRpb24gd2hpY2ggaXMgdXNlZCB0byBpZGVudGlmeSBjcmltaW5hbCBmYWNlcyBiYXNlZCBvbiBpbWFnZSBzbGljZXMgb2YgZXllcywgbGlwcywgbm9zZSBhbmQgaGFpcnPigKZldGMuIFRoaXMgcHJvamVjdCByZXBvcnQgY292ZXJzIHN5c3RlbSBhbmFseXNpcywgZmVhc2liaWxpdHkgcmVwb3J0LCBoYXJkd2FyZSBhbmQgc29mdHdhcmUgcmVxdWlyZW1lbnQsIHN5c3RlbSBkZXNpZ24sIHNhbXBsZSBjb2RpbmcgYW5kIHRlc3RpbmcgdGVjaG5pcXVlcy5JbiBleGlzdGluZyBzeXN0ZW0gY3JpbWluYWwgaW5mb3JtYXRpb24gaXMgc3RvcmVkIGluIGZpbGUgZm9ybWF0IHdpdGggb3V0ZGF0ZWQgaW1hZ2VzIGFuZCBsb3cgcXVhbGl0eSBpbWFnZXMuIFVzaW5nIHRoaXMgaW5mb3JtYXRpb24gaXQgaXMgbm90IHBvc3NpYmxlIGZvciBleWUgd2l0bmVzcyB0byBndWVzcyB0aGUgY3JpbWluYWwsIHNvIHRoZXJlIGlzIG5lZWQgdG8gZGV2ZWxvcCBhIGJldHRlciBtZXRob2QgZm9yIGlkZW50aWZ5aW5nIGNyaW1pbmFscyBsaWtlIGZpbmdlciBwcmludCwgRE5B4oCmRXRjLiBBbW9uZyBhbGwgdGhlc2UgbWV0aG9kcyBmYWNlIGRldGVjdGlvbiBtZXRob2QgaXMgY29zdCBlZmZlY3RpdmUgYW5kIG1vcmUgYWNjdXJhdGUuZGQCBQ8PFgIfAwUISmF2YSxKU1BkZAIHDw8WAh8DBQUxMDk0NmRkAgkPDxYCHwQFIX4vUHJvamVjdC9GYWNlLURldGVjdGlvbi1qYXZhLnppcGRkAhoPZBYCZg9kFgoCAQ8PFgIfAwUXSG90ZWwgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBYkBRnJlZSBEb3dubG9hZCBIb3RlbCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBDIy5OZXQgd2l0aCBTcWwgRGF0YWJhc2UgYW5kIGFsc28gZnJlZSBkb3dubG9hZCBIb3RlbCBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0IHdpdGggU291cmNlIGNvZGVkZAIFDw8WAh8DBQZWQi5OZXRkZAIHDw8WAh8DBQUyNDU1MGRkAgkPDxYCHwQFJX4vUHJvamVjdC9Ib3RlbF9NYW5hZ2VtZW50X1N5c3RlbS5yYXJkZAIbD2QWAmYPZBYKAgEPDxYCHwMFIlByb2plY3QgVHJhY2tpbmcgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBbwEVGhlIFByb2plY3QgZW50aXRsZWQg4oCcUHJvamVjdCBUcmFja2luZyBTeXN0ZW3igJ0gZGVhbHMgd2l0aCB0aGUgdmFyaW91cyBsZXZlbHMgb2YgcHJvamVjdCBkZXZlbG9wbWVudCBhbmQgd2lsbCBhY2NvdW50IGZvciB0aW1lIHVzZWQgaW4gYW5hbHlzaXMsIGRlc2lnbiwgcHJvZ3JhbW1pbmcsIHRlc3RpbmcgYW5kIHZlcmlmaWNhdGlvbiBldGMuVGhpcyBwcm9qZWN0IGRlYWxzIHdpdGggZml2ZSBtb2R1bGVzIOKAkyBDbGllbnQsIEJ1c2luZXNzIGRldmVsb3BtZW50IG9mZmljZXIgKEJETyksIERldmVsb3BlciwgSHVtYW4gUmVzb3VyY2UgTWFuYWdlciAoSFIpLCBQcm9qZWN0IG1hbmFnZXIgKFBNKS4gICAgICAgVGhlIHByb2R1Y3Qgd2lsbCBhc3Npc3QgdGhlIG9yZ2FuaXphdGlvbiBpbiBtYWludGFpbmluZyByZWNvcmQgb2YgZXZlcnkgcHJvamVjdCBpdCB1bmRlcnRha2VzLiBBbGwgdGhlIGluZm9ybWF0aW9uIHJlbGV2YW50IHRvIHRoZSBwcm9qZWN0cyBsaWtlIHNpemUsIHRpbWUsIGVmZm9ydCBhbmQgZGVwYXJ0bWVudHMgaW52b2x2ZWQsIGV0YyBpcyBtYWludGFpbmVkIGJ5IHRoaXMgdG9vbC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ1Mjk0ZGQCCQ8PFgIfBAUpfi9Qcm9qZWN0L3Byb2plY3QtdHJhY2tpbmctc3lzdGVtLWFzcC56aXBkZAIcD2QWAmYPZBYKAgEPDxYCHwMFJENvbnRlbnQgTWFuYWdlbWVudCBTeXN0ZW0gaW4gQXNwLk5ldGRkAgMPDxYCHwMF1QJDTVMtQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSBpcyBhIHdlYiBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gQXNwLk5ldCB3aGljaCBtYWlubHkgcHJvdmlkZSBhIEZhY2lsaXR5IG9mIHB1Ymxpc2hpbmcsZWRpdGluZyBhbmQgbW9kaWZ5aW5nIGNvbnRlbnQuY29udGVudCBtYW5hZ2VtZW50IHN5c3RlbXMgaXMgdG8gc3RvcmUgYW5kIG9yZ2FuaXplIGZpbGVzLCBhbmQgcHJvdmlkZSB2ZXJzaW9uLWNvbnRyb2xsZWQgYWNjZXNzIHRvIHRoZWlyIGRhdGEuRG93bmxvYWQgQ29tcGxldGUgc291cmNlIGNvZGUgaW4gQXNwLk5ldCBGb3IgQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDQ2MjZkZAIJDw8WAh8EBSt+L1Byb2plY3QvQ29udGVudC1NYW5hZ2VtZW50LVN5c3RlbS1Bc3AuemlwZGQCHQ9kFgJmD2QWCgIBDw8WAh8DBR5PbmxpbmUgU2hvcHBpbmcgUHJvamVjdCBpbiBQSFBkZAIDDw8WAh8DBTdGcmVlIERvd25sb2FkIE9ubGluZSBTaG9wcGluZyBQcm9qZWN0IGluIFBocCB3aXRoIE15c3FsZGQCBQ8PFgIfAwUJUEhQLE15c3FsZGQCBw8PFgIfAwUFMjc5NTVkZAIJDw8WAh8EBRZ+L1Byb2plY3QvU2hvcHBpbmcucmFyZGQCHg9kFgJmD2QWCgIBDw8WAh8DBSRBSVJMSU5FIFJFU0VSVkFUSU9OIFNZU1RFTSBJTiBWQi5ORVRkZAIDDw8WAh8DBZEBVGhpcyBhcHBsaWNhdGlvbiBpcyBhIFdpbmRvd3MgQXBwbGljYXRpb24gRGV2ZWxvcGVkIGluIFZiLm5ldC5Eb3dubG9hZCBBaXJsaW5lIFJlc2VydmF0aW9uIHN5c3RlbSBpbiBWYi5uZXQgd2l0aCBzb3VyY2UgY29kZSxEYXRhYmFzZSBhbmQgUmVwb3J0LmRkAgUPDxYCHwMFEFZiLk5ldCxNUyBBY2Nlc3NkZAIHDw8WAh8DBQUyMjc4MmRkAgkPDxYCHwQFKH4vUHJvamVjdC9BaXJsaW5lX1Jlc2VydmF0aW9uX1N5c3RlbS5yYXJkZAIfD2QWAmYPZBYKAgEPDxYCHwMFJkZhY2UgRGV0ZWN0aW9uIGFuZCBDb21wYXJpc2lvbiBpbiAuTmV0ZGQCAw8PFgIfAwXlAURvd25sb2FkIGEgRmFjZSBkZXRlY3Rpb24taW1hZ2UgcHJvY2Vzc2luZyBwcm9qZWN0IGluIC5OZXQgd2l0aCBzb3VyY2UgY29kZS5JbiB0aGlzIHByb2plY3QsRmFjZSBhcmUgRGV0ZWN0ZWQgZnJvbSBpbWFnZS55b3UgY2FuIGFsc28gY29tcGFyZSB0d28gZmFjZXMgdG8gZmluZCBhIHNpbWlsYXJpdGllcy5UaGlzIHByb2plY3QgY2FuIGJlIHVzZWQgZm9yIGZhY2UgYmFzZWQgTG9nLUluIFN5c3RlbS5kZAIFDw8WAh8DBQ5DIy5OZXQsQXNwLk5ldGRkAgcPDxYCHwMFBDg4MDZkZAIJDw8WAh8EBR5+L1Byb2plY3QvRmFjZS1EZXRlY3Rpb24tYy5yYXJkZAIgD2QWAmYPZBYKAgEPDxYCHwMFME9ubGluZSBTcGVlZCBUZXN0IFNjcmlwdCBpbiBQSFAgYW5kIEFjdGlvblNjcmlwdGRkAgMPDxYCHwMFuwFEb3dubG9hZCBPbmxpbmUgaW50ZXJuZXQgc3BlZWQgdGVzdCBwcm9ncmFtIGRldmVsb3BlZCBpbiBBY3Rpb24gc2NyaXB0KEZsYXNoKSBhbmQgUEhQLlJlYWwtdGltZSBQaW5nIEFuYWx5c2lzLFVwbG9hZCBTcGVlZCBBbmFseXNpcyBhbmQgRG93bmxvYWQgU3BlZWQgQW5hbHlzaXMgZm9yIHlvdXIgSW50ZXJuZXQgUHJvdmlkZXIuZGQCBQ8PFgIfAwUQUEhQLEFjdGlvblNjcmlwdGRkAgcPDxYCHwMFBDU3NDlkZAIJDw8WAh8EBSB+L1Byb2plY3QvU3BlZWQtVGVzdC1FZ2dyb29tLnppcGRkAiEPZBYCZg9kFgoCAQ8PFgIfAwUeT25saW5lIE1vYmlsZSBSZWNoYXJnZSBQcm9qZWN0ZGQCAw8PFgIfAwW/A1RoaXMgcHJvamVjdCBpcyBteSBlZmZvcnQgZm9yIE9ubGluZSBNb2JpbGUgUmVjaGFyZ2Ugb2YgbW9iaWxlLiBUaGlzIHByb2plY3QgdXNlZnVsIGZvciBvbmxpbmUgcmVjaGFyZ2luZyBvZiBtb2JpbGUuIFRoaXMgU3lzdGVtIHByb3ZpZGVzIHJlY2hhcmdlIG9mIG1hbnkgbW9iaWxlIGNvbXBhbmllcyBhcyB3ZWxsIGFzIGFsbCBraW5kIG9mIHJlY2hhcmdlIGFyZSBwb3NzaWJsZS4gVGhpcyBTeXN0ZW0gd2lsbCBwcm92aWRlIGZhY2lsaXR5IGZvciBjdXN0b21lciB0byByZWNoYXJnZSBtb2JpbGUgYXQgYW55dGltZSBmcm9tIGFueXdoZXJlLiBUaGlzIFN5c3RlbSBrZWVwcyB0aGUgaGlzdG9yeSBvZiB0aGUgcGFzdCByZWNoYXJnZXMuIFRoZSB1c2VyIGhhdmUgdG8gcmVnaXN0ZXIgaGltc2VsZi5Eb3dubG9hZCBPbmxpbmUgTW9iaWxlIFJlY2hhcmdlIFN5c3RlbSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsQyMuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBDgyMDZkZAIJDw8WAh8EBSx+L1Byb2plY3QvT25saW5lLU1vYmlsZS1SZWNoYXJnZS1TeXN0ZW0uZG9jeGRkAiIPZBYCZg9kFgoCAQ8PFgIfAwUjUmVhbCBUaW1lIE9ubGluZSBFeGFtaW5hdGlvbiBTeXN0ZW1kZAIDDw8WAh8DBaEBRG93bmxvYWQgUmVhbC10aW1lIE9ubGluZSBFeGFtaW5hdGlvbiBzeXN0ZW0gcHJvamVjdCBpbiBBc3AuTmV0IHdpdGggc291cmNlIGNvZGUuSW4gdGhpcyBTeXN0ZW0sV2UgaW1wbGVtZW50ZWQgVGltZXIgdG8gZ2l2ZSByZWFsIHRpbWUgYmFzZWQgZXhhbWluYXRpb24gc3lzdGVtLiBkZAIFDw8WAh8DBRVBc3AuTmV0LEMjLk5ldCxNcyBTcWxkZAIHDw8WAh8DBQQ3NzgwZGQCCQ8PFgIfBAUwfi9Qcm9qZWN0L1JlYWx0aW1lLU9ubGluZS1FeGFtaW5hdGlvbi1TeXN0ZW0ucmFyZGQCIw9kFgJmD2QWCgIBDw8WAh8DBSBPbmxpbmUgQ2xhc3NpZmllZCBQcm9qZWN0IGluIEFzcGRkAgMPDxYCHwMF4gNPbmxpbmUgQ2xhc3NpZmllZCBQb3J0YWwgaXMgYXZhaWxhYmxlIHRvIHNlcnZlIGFzIHlvdXIgb25saW5lIG1hcmtldHBsYWNlLCB3aGljaCBnaXZlcyBmb2xsb3dpbmcgYmVuZWZpdHM6T25saW5lIENsYXNzaWZpZWRzIG9mZmVyIHNpbXBsZSBzb2x1dGlvbnMgdG8geW91ciBjbGFzc2lmaWVkIGFkdmVydGlzaW5nIG5lZWRzLlByb21vdGUgeW91ciBwcm9kdWN0LCBjb21wYW55IG9yIHNlcnZpY2UgdG8gYSB2YXN0IGF1ZGllbmNlLkJ1aWxkIGNvbnNpZGVyYXRpb24sIGF3YXJlbmVzcywgYW5kIGJ1eWVyIHJlc3BvbnNlLkN1c3RvbWl6ZSBhZHMgdG8gZml0IGluZGl2aWR1YWwgb3IgY29tcGFueSBuZWVkcy5Db252ZW5pZW50IGFuZCBlYXN5IHRvIHVzZS5Eb3dubG9hZCBPbmxpbmUgQ2xhc3NpZmllZCBwcm9qZWN0IGluIEFzcC5OZXQgd2l0aCBTb3VyY2UgY29kZSxSZXBvcnQuQ2xhc3NpZmllZCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsQyMuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBDMxMzdkZAIJDw8WAh8EBTN+L1Byb2plY3QvT25saW5lLUNsYXNzaWZpZWQtUHJvamVjdC1Tb3VyY2UtQ29kZS5yYXJkZAIkD2QWAmYPZBYKAgEPDxYCHwMFJE9ubGluZSBHbG9iYWwgTWFpbGluZyBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMF7wRQcm9qZWN0IERlc2NyaXB0aW9uOiAgRSBXZWIgTWFpbCBTeXN0ZW0gcHJvamVjdCB3YXMgZGV2ZWxvcGVkIGZvciBmaW5hbCB5ZWFyIEJ0ZWNoIFN0dWRlbnRzIGFuZCBjb2RlZCB3aXRoIEphdmEgUHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuIEphdmEgcHJvdmlkZWQgd29uZGVyZnVsIG9wdGlvbnMgdG8gZGVzaWduIHdlYiBiYXNlZCBhcHBsaWNhdGlvbnMgYW5kIHRoaXMgbWFpbCBzeXN0ZW0gcHJvdmlkZXMgc2ltcGxlIGFuZCBkeW5hbWljIHdlYiBtYWlsaW5nIG9wdGlvbnMgbGlrZSBzZW5kIHRleHQgbWFpbHMsIG1lZGlhIGZpbGVzIHVzaW5nIFNNVFAsIElNQVAgcHJvdG9jb2wgc2VydmVycy4gSmF2YSBtYWlsIHdlYiBzZXJ2ZXJzIGFuZCBNb3ppbGxhIHdlYiBicm93c2Vycy4gVXNlciBoYXMgdG8gbG9naW4gd2l0aCBoaXMvaGVyIGNyZWRlbnRpYWxzIGFuZCBzZW5kIG1haWxzIHRvIG90aGVycyBieSB1c2luZyBjb21wb3NlIGJ1dHRvbiwgc2VlIHRoZSBtYWlscyByZWNlaXZlZCBmcm9tIG90aGVycyBpbiBJbmJveCBmb2xkZXIsIGFuZCBvdGhlciBvcHRpb25zIGxpa2UgZHJhZnQsIHNlbmQgbWFpbHMsIGV0Yy5Eb3dubG9hZCBFbWFpbCBTeXN0ZW0gaW4gSmF2YSB3aXRoIFNvdXJjZSBjb2RlLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUEODMyMWRkAgkPDxYCHwQFIX4vUHJvamVjdC9HbG9iYWwtRW1haWwtU3lzdGVtLnppcGRkAiUPZBYCZg9kFgoCAQ8PFgIfAwUmT25saW5lIEdvb2RzIFRyYWRpbmcgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBb4CVGhlIHByb3Bvc2VkIHN5c3RlbSBpcyBhIHdlYiBiYXNlZCBhcHBsaWNhdGlvbiB3aGljaCBhbGxvd3Mgb25lIHRvIHBsYWNlIG9yZGVycyBvbmxpbmUuIFRoZSBzeXN0ZW0gYWxsb3dzIGZhc3QgcHJvY2Vzc2luZyBvZiBvcmRlcnMuIFN5c3RlbSBhbGxvd3MgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIGJ1eWVycyBhbmQgc3VwcGxpZXJzLkRvd25sb2FkIEFTUC5OZXQgUHJvamVjdCB3aXRoIFNvdXJjZSBjb2RlLEZyZWUgRG93bmxvYWQgQ29tcGxldGUgcHJvamVjdCB3aXRoIERhdGFiYXNlIERlc2lnbixTb3VyY2UgY29kZSBhbmQgUmVwb3J0IGluIEFzcC5OZXQuZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTXMgU3FsZGQCBw8PFgIfAwUENTQ1MGRkAgkPDxYCHwQFKX4vUHJvamVjdC9Hb29kcy1NYW5hZ2VtZW50LVN5c3RlbS1Bc3AucmFyZGQCJg9kFgJmD2QWCgIBDw8WAh8DBSpPbmxpbmUgQXR0ZW5kYW5jZSBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKU1BkZAIDDw8WAh8DBZ0BRG93bmxvYWQgT25saW5lIGF0dGVuZGFuY2Ugc3lzdGVtIGluIGpzcC5UaGlzIGFwcGxpY2F0aW9uIGhlbHBzIGZhY3VsdHkgdG8gZmlsbCBhbmQgYW5hbHl6ZSBhdHRlbmRhbmNlIG9ubGluZS5Eb3dubG9hZCBDb21wbGV0ZSBzb3VyY2UgY29kZSBhdmFpbGFibGUgaW4gSlNQLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUFMTc5OTVkZAIJDw8WAh8EBSt+L1Byb2plY3QvT25saW5lLUF0dGVuZGFuY2UtU3lzdGVtLUphdmEuemlwZGQCJw9kFgJmD2QWCgIBDw8WAh8DBSdBc3NpZ25tZW50IE1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBcAEVGhlIG1haW4gcHVycG9zZSBvZiBBc3NpZ25tZW50IG1hbmFnZW1lbnQgc29mdHdhcmUgaXMgdG8gYXV0b21hdGUgdGhlIGFzc2lnbm1lbnQgcHJvY2VzcyBvZiB3b3JrLiBVc2luZyB0aGlzIG9ubGluZSB3ZWIgYXBwbGljYXRpb24gbWFkZSBpbiBBc3AuTmV0ICBhbiBlbXBsb3llZSBjYW4gcGVyZm9ybSBhc3NpZ25tZW50IHJlbGF0ZWQgd29yayB0aG91Z2ggb25saW5lLiAgVGhpcyBPbmxpbmUgV2ViIEFwcGxpY2F0aW9uICB3aWxsIGJlIHVzZWQgYnkgdGhlIGVtcGxveWVlcyBvZiB0aGUgQ29tcGFueSAgYXQgdGhlIHRpbWUgb2YgdGhlaXIgYXNzaWduaW5nIG9mIHdvcmsgYW5kIHRoZXJlYWZ0ZXIuIEFNUyAgaXMgZGVzaWduZWQgdG8gbWFuYWdlLCBhc3NpZ25pbmcgb2Ygd29yayBwcm9jZXNzIGVudGlyZWx5IG9ubGluZSAuSXQgaXMgZmxleGlibGUgZW5vdWdoIHRvIGNvLW9wZXJhdGUgYW55IGNoYW5nZXMgb3IgZW5oYW5jZW1lbnRzIG1hZGUgbGF0ZXIgd2l0aGluIHRoZSBhcHBsaWNhdGlvbi5Eb3dubG9hZCBTb3VyY2UgY29kZSBpbiBBc3AuTmV0IG9uIEFzc2lnbm1lbnQgTWFuYWdlbWVudCBTeXN0ZW0uZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTXMgU3FsZGQCBw8PFgIfAwUENDE2N2RkAgkPDxYCHwQFKn4vUHJvamVjdC9Bc3NpZ25tZW50LU1hbmFnZW1lbnQtU3lzdGVtLnJhcmRkAigPZBYCZg9kFgoCAQ8PFgIfAwUKQ2hhdCByb29tIGRkAgMPDxYCHwMFNEZyZWUgRG93bmxvYWQgQ2hhdCBSb29tIFByb2plY3QgSW4gUGhwIFdpdGggTXkgc3FsICBkZAIFDw8WAh8DBQlQSFAsTXlTcWxkZAIHDw8WAh8DBQUxMzQ3NmRkAgkPDxYCHwQFFn4vUHJvamVjdC9jaC1yby1wci56aXBkZAIpD2QWAmYPZBYKAgEPDxYCHwMFJU9ubGluZSBKb2IgUG9ydGFsIFByb2plY3QgaW4gSmF2YSxKU1BkZAIDDw8WAh8DBbwESW4gdGhlIHByb3Bvc2VkIHN5c3RlbSB3ZSBwcm9wb3NlIHRvIGNvbXB1dGVyaXplIHRoZSBwbGFjZW1lbnQgYWN0aXZpdGllcy4gSW4gdGhlIGV4aXN0aW5nIHN5c3RlbSwgYWxsIGRhdGEgcHJvY2Vzc2luZyBpcyBkb25lIG1hbnVhbGx5LiBXaGVuIHRoZXJlIGFyZSBhIGxvdCBvZiBpc3N1ZXMgc3VjaCBhcyByZXRyaWV2YWwgYW5kIHN0b3JhZ2Ugb2YgdGhlIGluZm9ybWF0aW9uIGFuZCBrZWVwaW5nIHRyYWNrIG9mIHRoZW0gYmVjb21lcyBhIHRlZGlvdXMgdGFzay4gQnkgaW1wbGVtZW50aW5nIGEgY29tcHV0ZXJpemVkIHN5c3RlbSwgdGhlIGxpbWl0YXRpb24gaW4gdGhlIHByZXNlbnQgc3lzdGVtIHdpbGwgYmUgcmVkdWNlZC4gTWFucG93ZXIgY2FuIGJlIHJlZHVjZWQgdG8gYSBncmVhdCBleHRlbnQgYW5kIGVmZmljaWVuY3kgYW5kIGFjY3VyYWN5IGNhbiBiZSBpbmNyZWFzZWQgdG8gbWFuaWZvbGQuIE1vcmUgb3ZlciBjb25zdW1wdGlvbiBvZiB0aW1lIGNhbiBiZSByZWR1Y2VkIHRvIGZhciBncmVhdGVyIGV4dGVuZCBieSB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIHByb3Bvc2VkIHN5c3RlbS5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBTEwMDgzZGQCCQ8PFgIfBAUxfi9Qcm9qZWN0L09ubGluZS1Kb2ItUG9ydGFsLUphdmEtUHJvamVjdC1jb2RlLnJhcmRkAioPZBYCZg9kFgoCAQ8PFgIfAwUiSG9zcGl0YWwgTWFuYWdlbWVudCBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFnQVIb3NwaXRhbCBNYW5hZ2VtZW50IFN5c3RlbSAgaXMgYSBjb21wdXRlcml6ZWQgbWFuYWdlbWVudCBzeXN0ZW0gcHJvamVjdCBkZXZlbG9wZWQgaW4gamF2YSBmb3IgbWFraW5nIGFsbCB0YXNrIG9mIGhvc3BpdGFsIGF1dG9tYXRlZC4gVGhpcyBtYW5hZ2VtZW50IHN5c3RlbSBoYXMgYmVlbiBkZXZlbG9wZWQgdG8gYnVpbGQgYSBtYW5hZ2VtZW50IHN5c3RlbSB0byBtYW5hZ2UgRW1wbG95ZWVzLCBEb2N0b3JzIChjb25zdWx0YW50cyksIE51cnNlcywgUGF0aWVudHMsIEJpbGxzLCBhbmQgQ29tcGxhaW5zIGV0Yy4gVGhpcyBzeXN0ZW0gYWxzbyBrZWVwcyB0aGUgcmVjb3JkcyBvZiBoYXJkd2FyZSBhc3NldHMgYmVzaWRlcyBzb2Z0d2FyZSBvZiB0aGlzIG9yZ2FuaXphdGlvbi4gVGhlIHByb3Bvc2VkIHN5c3RlbSB3aWxsIGtlZXAgYSB0cmFjayBvZiBFbXBsb3llZXMsIERvY3RvcnMsIFBhdGllbnRzLCBBY2NvdW50cyBhbmQgZ2VuZXJhdGlvbiBvZiByZXBvcnQgcmVnYXJkaW5nIHRoZSBwcmVzZW50IHN0YXR1cy4gVGhpcyBwcm9qZWN0IGhhcyBHVUkgYmFzZWQgaW50ZXJmYWNlICB0aGF0IHdpbGwgaGVscCBpbiBzdG9yaW5nLCB1cGRhdGluZyBhbmQgcmV0cmlldmluZyB0aGUgRGF0YSAgdGhyb3VnaCB2YXJpb3VzIHVzZXItZnJpZW5kbHkgbWVudS1kcml2ZW4gZGVzaWducy5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUFMjIzNzZkZAIJDw8WAh8EBSh+L1Byb2plY3QvSG9zcGl0YWwtbWFuYWdlbWVudC1zeXN0ZW0ucmFyZGQCKw9kFgJmD2QWCgIBDw8WAh8DBR5QYWNrZXQgU25pZmZlciBQcm9qZWN0IGluIEphdmFkZAIDDw8WAh8DBYoCUGFja2V0IFNuaWZmZXIgcHJvamVjdCBpcyBhIG5ldHdvcmsgdXRpbGl0eSBzb2Z0d2FyZSB3aGljaCBjYW4gYmUgdXNlZCB0byB0cmFjZSBwYWNrZXQuTGF0ZXN0IE5ldHdvcmtpbmcgcHJvamVjdCBkZXZlbG9wZWQgaW4gamF2YSBmb3Igc3R1ZGVudC5UaGlzIHNvZnR3YXJlIGNhbiB0cmFjZSBuZXR3b3JrIHBhY2tldCBtdWNoIG1vcmUgbGlrZSBzbmlmZmVyLHNuaWZmaW5nIGRvZy5Eb3dubG9hZCBjb21wbGV0ZSBzb3VyY2UgY29kZSBhdmFpbGFibGUgaW4gamF2YS5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUENTI4MWRkAgkPDxYCHwQFKX4vUHJvamVjdC9QYWNrZXQtU25pZmZlci1Qcm9qZWN0LUphdmEuemlwZGQCLA9kFgJmD2QWCgIBDw8WAh8DBStPbmxpbmUgQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0ZGQCAw8PFgIfAwXlAiBNb2JpbGUgQ01TIG9yIENvbnRlbnQgbWFuYWdlbWVudCBzeXN0ZW0gcHJvamVjdCBpcyBhIG1hc3RlcuKAmXMgcHJvamVjdCBkZXZlbG9wZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIEFzcC5OZXQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuIFRoaXMgc29mdHdhcmUgaXMgdXNlZCB0byBhZGQgcHJvZHVjdHMsIGJ1eSBwcm9kdWN0cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBtb2JpbGUgc3RvcmVzIHVzaW5nIG1vYmlsZSBwaG9uZS5Eb3dubG9hZCBDb250ZW50IG1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXQsT25saW5lIENvbnRlbnQgbWFuYWdlbWVudCBTeXN0ZW0gaW4gQyMuTmV0LmRkAgUPDxYCHwMFDkFzcC5OZXQsQyMuTmV0ZGQCBw8PFgIfAwUENDE5MWRkAgkPDxYCHwQFL34vUHJvamVjdC9Db250ZW50LU1hbmFnZW1lbnQtU3lzdGVtLUFzcC1OZXQuemlwZGQCLQ9kFgJmD2QWCgIBDw8WAh8DBSBJbWFnZSBFbmNyeXB0aW9uIFByb2plY3QgaW4gSmF2YWRkAgMPDxYCHwMFuANBbHRob3VnaCB0aGVyZSBhcmUgbWFueSBpbWFnZSBlbmNyeXB0aW9uIHRlY2huaXF1ZXMgbm9uZSBvZiB0aGVtIGFyZSBzdWl0YWJsZSBmb3IgdGhlIG5ldHdvcmtpbmcgc3lzdGVtcy4gU28gdGhlIG1haW4gc2NvcGUgb2Ygb3VyIHByb2plY3Qgd2FzIHRvIHByb3ZpZGUgc2VjdXJpdHkgZm9yIHRoZSBpbWFnZXMgaW4gdGhlIG5ldHdvcmtpbmcgc3lzdGVtcy4gT3VyIHByb2plY3QgcHJvdmlkZXMgc2FmZSB3YXlzIG9mIG1lYW5zIHRvIHRyYW5zZmVyIGltYWdlcyBiZXR3ZWVuIHRoZSBuZXR3b3JraW5nIHN5c3RlbXMgY29uZmlkZW50aWFsbHkuRG93bmxvYWQgRW5jcnlwdGlvbiBvZiBJbWFnZSBBcHBsaWNhdGlvbiB3aXRoIHNvdXJjZSBjb2RlIGluIEphdmEuRnVsbCBTb3VyY2UgY29kZSB3aXRoIERvY3VtZW50YXRpb24gb2YgSW1hZ2UgRW5jcnlwdGlvbiBpbiBKYXZhLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQUxMjMyM2RkAgkPDxYCHwQFJn4vUHJvamVjdC9JbWFnZS1FbmNyeXB0aW9uLWluIEphdmEucmFyZGQCLg9kFgJmD2QWCgIBDw8WAh8DBR5PbmxpbmUgTGVhcm5pbmcgU3lzdGVtIGluIEphdmFkZAIDDw8WAh8DBaMDT25saW5lIENvdXJzZSBQb3J0YWwgd29ya3MgdG8gaW1wbGVtZW50ICYgcnVuIHRoZSBlLWVkdWNhdGlvbi9lLWxlYXJuaW5nIGluaXRpYXRpdmVzIG9mIGFuIG9yZ2FuaXphdGlvbi5CYXNlZCBvbiBkaWZmZXJlbnQgbmVlZHMgb2YgZWR1Y2F0aW9uYWwgaW5zdGl0dXRpb25zIE9ubGluZSBjb3Vyc2UgUG9ydGFsIHByb3ZpZGVzIGEgc2VnbWVudCBzcGVjaWZpYyBlLWxlYXJuaW5nICYgZGlzdGFuY2UgZWR1Y2F0aW9uIHBsYXRmb3JtIGZvciBhIENhbXB1cy5UaGUgZm9jdXMgb2YgT25saW5lIGNvdXJzZSBQb3J0YWwgaXMgdG8gaGF2ZSBhbiBlLWxlYXJuaW5nIHBsYXRmb3JtIHRoYXQgaXMgc2VnbWVudCBzcGVjaWZpYywgY29udmVuaWVudGx5IHNjYWxhYmxlIHRvIGNoYW5naW5nIG5lZWRzIGFuZCBpcyBxdWljayB0byBpbXBsZW1lbnRkZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBDk4MThkZAIJDw8WAh8EBR1+L1Byb2plY3QvT25saW5lIExlYXJuaW5nLnJhcmRkAi8PZBYCZg9kFgoCAQ8PFgIfAwUsT25saW5lIExpYnJhcnkgTWFuYWdlbWVuICBTeXN0ZW0gaW4gSlNQLEphdmFkZAIDDw8WAh8DBYYCT25saW5lIExpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW0gaW4gSmF2YSBpcyBhIHdlYiBhcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gSlNQLkRvd25sb2FkIHNvdXJjZSBjb2RlIGZvciBPbmxpbmUgTGlicmFyeSAgTWFuYWdlbWVudCBzeXN0ZW0uRnJlZSBzb3VyY2UgY29kZSBhdmFpbGFibGUgaW4gSmF2YSBmb29yIE9ubGluZSBMaWJyYXJ5IE1hbmFnZW1lbnQgU3lzdGVtLkZ1bGwgcHJvamVjdCBpbiBKU1AgZm9yIExpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW0uIGRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUEOTk1N2RkAgkPDxYCHwQFHH4vUHJvamVjdC9vbmxpbmUtbGlicmFyeS56aXBkZAIwD2QWAmYPZBYKAgEPDxYCHwMFI09ubGluZSBTaG9wcGluZyBXZWJzaXRlIGluIEpTUCxKYXZhZGQCAw8PFgIfAwXUAURvd25sb2FkIG9ubGluZSBTaG9wcGluZyB3ZWJzaXRlIGluIEphdmEgU2VydmVyIFBhZ2VzLk9ubGluZSBzaG9wcGluZyBjYXJ0IGluIGphdmEgaXMgYSBmcmVlIHNvdXJjZSBjb2RlIGZvciBmaW5hbCB5ZWFyIHByb2plY3QgZGV2ZWxvcGVkIHdpdGggRGF0YWJhc2UuRG93bmxvYWQgT25saW5lIFNob3BwaW5nIHdlYnNpdGUoRS1Db21tZXJjZSBXZWJzaXRlKWluIGphdmEuZGQCBQ8PFgIfAwUISmF2YSxKU1BkZAIHDw8WAh8DBQUxMzg4N2RkAgkPDxYCHwQFHH4vUHJvamVjdC9vbmxpbmUtc2hvcGluZy56aXBkZAIxD2QWAmYPZBYKAgEPDxYCHwMFHk9ubGluZSBTaG9wcGluZyBXZWJzaXRlIGluIEpTUGRkAgMPDxYCHwMF2wFFLWNvbW1lcmNlIGlzIGEgcG9wdWxhciBwcm9qZWN0IGFtb25nIHN0dWRlbnQuRG93bmxvYWQgb25saW5lIFNob3BwaW5nIHdlYnNpdGUgaW4gSmF2YS5PbmxpbmUgc2hvcHBpbmcgY2FydCBpbiBqYXZhIGlzIGEgZnJlZSBzb3VyY2UgY29kZSBmb3IgZmluYWwgeWVhciBwcm9qZWN0IGRldmVsb3BlZCBpbiBqYXZhLkRvd25sb2FkIE9ubGluZSBTaG9wcGluZ3dlYnNpdGUgaW4gamF2YS5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBDc1ODdkZAIJDw8WAh8EBSJ+L1Byb2plY3QvT25saW5lU2hvcHBpbmdTeXN0ZW0uemlwZGQCMg9kFgJmD2QWCgIBDw8WAh8DBSJPbmxpbmUgQ2hhdCBBcHBsaWNhdGlvbiBpbiBBc3AuTmV0ZGQCAw8PFgIfAwX4AU9ubGluZSBjaGF0dGluZyBpcyBvbmUgb2YgdGhlIHBvcHVsYXIgbWV0aG9kIGFtb25nIHBlb3BsZSBmb3IgY29tbXVuaWNhdGlvbi5Eb3dubG9hZCBDb21wbGV0ZSBzb3VyY2UgY29kZSBGb3Igb25saW5lIGNoYXQgYXBwbGljYXRpb24sQ2hhdCBhcHBsaWNhdGlvbiB3aXRoIHNvdXJjZSBjb2RlLE9ubGluZSBDaGF0IGFwcGxpY2F0aW9uIGluIEFzcC5OZXQuRnJlZSBTb3VyY2UgY29kZSBmb3Igb25saW5lIENoYXQgQXBwbGljYXRpb24uZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTXMgU3FsZGQCBw8PFgIfAwUEODU3OGRkAgkPDxYCHwQFGH4vUHJvamVjdC9TaW1wbGVDaGF0LnJhcmRkAjMPZBYCZg9kFgoCAQ8PFgIfAwUwU3R1ZGVudCBBdHRlbmRhbmNlIFRyYWNrZXIgU3lzdGVtIFByb2plY3QgaW4gUEhQZGQCAw8PFgIfAwWQAk9ubGluZSBBdHRlbmRhbmNlIFN5c3RlbSBpbiBQSFAgaXMgYSBXZWIgYXBwbGljYXRpb24gdG8gcGVyZm9ybSBtb3N0IGNvbXBsZXggdGFzayBvZiBhdHRlbmRhbmNlIGFuYWx5c2lzLlRoaXMgd2ViIGFwcGxpY2F0aW9uIGlzIHZlcnkgaGVscGZ1bCBpbiBtYWludGFpbmluZyBzdHVkZW50IGF0dGFuZGFuY2UgYW5kIGdlbmVyYXRpbmcgdmFyaW91cyBhbmFseXNpcyByZXBvcnQgcXVpY2tseS5WZXJ5IGhlbHBmdWwgYXBwbGljYXRpb24gZm9yIHNjaG9vbCBhbmQgY29sbGVnZXMuZGQCBQ8PFgIfAwUJUEhQLE15U3FsZGQCBw8PFgIfAwUFMjI1MzRkZAIJDw8WAh8EBRZ+L1Byb2plY3QvYXQtdHItc3kuemlwZGQCNA9kFgJmD2QWCgIBDw8WAh8DBSJPbmxpbmUgUXVpeiBTeXN0ZW0gUHJvamVjdCBpbiBKYXZhZGQCAw8PFgIfAwWKAUZyZWUgRG93bmxvYWQgT25saW5lIFF1aXogU3lzdGVtIFByb2plY3QgaW4gSmF2YSBvciBPbmxpbmUgRXhhbSBTeXN0ZW0gUHJvamVjdCBpbiBKYXZhICBGb3IgQmNhLE1jYSxEaXBsb21hIENvbXB1dGVyIEVuZ2luZWVyaW5nIFN0dWRlbnRzIGRkAgUPDxYCHwMFEUphdmEsRWNsaXBzZSxKMmVlZGQCBw8PFgIfAwUFMTIxNjVkZAIJDw8WAh8EBRZ+L1Byb2plY3QvamEtcXUtYXAuemlwZGQCNQ9kFgJmD2QWCgIBDw8WAh8DBRZEYXRhIExlYWthZ2UgRGV0ZWN0aW9uZGQCAw8PFgIfAwVDRmluZCBhIERhdGEgTGVha2FnZSBpbiB5b3VyIGRhdGFiYXNlIGJ5IHVzaW5nIHRoaXMgc21hcnQgdGVjaG5pcXVlLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQQ4NTA2ZGQCCQ8PFgIfBAUjfi9VcGxvYWQvRGF0YV9MZWFrYWdlX0RldGVjdGlvbi5wZGZkZAI2D2QWAmYPZBYKAgEPDxYCHwMFJ0EgY29kZSBGb3IgR2VuZXJhdGluZyAyIERpbWVuc2lvbiBHcmFwaGRkAgMPDxYCHwMFa0dlbmVyYXRpbmcgYSBHcmFwaCBpbiBEb3RuZXQgaXMgc29tZSB3aGF0IHRyaWNreS5UaGlzIENvZGUgRXhwbGFpbiBjb21wbGV0ZSBleGFtcGxlIG9mIEdlbmVyYXRpbmcgMkQgR3JhcGguZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDk3NDlkZAIJDw8WAh8EBRZ+L1Byb2plY3QvMkQgR3JhcGgucmFyZGQCNw9kFgJmD2QWCgIBDw8WAh8DBR9PbmxpbmUgQ2xpbmljIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwViRnJlZSBkb3dubG9hZCBQcm9qZWN0IE9ubGluZSBDbGluaWMgTWFuYWdlbWVudCBTeXN0ZW0gaW4gUGhwIHdpdGggbXkgc3FsIHdpdGggY29tcGxldGUgc291cmNlIGNvZGVkZAIFDw8WAh8DBQNQSFBkZAIHDw8WAh8DBQUzMDkwOWRkAgkPDxYCHwQFGn4vUHJvamVjdC9jbGluaWNvc2lnaHQucmFyZGQCOA9kFgJmD2QWCgIBDw8WAh8DBRZTdWRva3UgR2FtZSBvbiBBbmRyb2lkZGQCAw8PFgIfAwX0AU9uZSBvZiB0aGUgTW9zdCBwb3B1bGFyIGdhbWUgb2YgdGhlIHdvcmxkIFN1ZG9rdSBpcyBhdmFpbGFibGUgb24gbW9zdCBvZiB0aGUgbW9iaWxlIHBsYXRmb3JtLkFuZHJvaWQgbWFya2V0IGlzIGdhaW5pbmcgbW9zdCBwb3B1bGFyaXR5LG1ham9yIGFwcGxpY2F0aW9ucyBhcmUgYXZhaWxhYmxlIG9uIHBsYXlzdG9yZS5TVURPS1Ugb24gYW5kcm9pZCBpcyBhdmFpbGFibGUgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBoZXJlLiBkZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUENTYxNmRkAgkPDxYCHwQFH34vUHJvamVjdC9TdWRva3Ugb24gQW5kcm9pZC56aXBkZAI5D2QWAmYPZBYKAgEPDxYCHwMFIUFuZHJvaWQgUHJvamVjdCBmb3IgQm91bmNpbmcgQmFsbGRkAgMPDxYCHwMFowJBbmRyb2lkIGdhbWUgb24gYm91bmNpbmcgYmFsbCB3aXRoIHNvdXJjZSBjb2RlIGlzIGF2YWlsYWJsZSBmb3IgZnJlZSBkb3dubG9hZCBvbiBlbmdncm9vbS5jb20uIFRoaXMgcHJvamVjdCBpcyB1c2VmdWwgYXMgcmVmZXJlbmNlIGZvciBjb21wdXRlciBzY2llbmNlIHN0dWRlbnRzIHdobyBhcmUgbG9va2luZyBmb3IgYW5kcm9pZCBnYW1pbmcgcHJvamVjdHMgZm9yIGZyZWUgZG93bmxvYWQuIFN0dWRlbnRzIGNhbiB1c2UgdGhpcyBwcm9qZWN0IGFzIG1pbmkgcHJvamVjdCBvciBmaW5hbCB5ZWFyIHByb2plY3RkZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUENDc5M2RkAgkPDxYCHwQFL34vUHJvamVjdC9Cb3VuY2luZ0JhbGwtQW5kcm9pZC1FbmdnUm9vbS5Db20ucmFyZGQCOg9kFgJmD2QWCgIBDw8WAh8DBSFFeGFtLVNjaGVkdWxlciBQcm9qZWN0IEluIEFzcC5uZXRkZAIDDw8WAh8DBV9GcmVlIERvd25sb2FkIFByb2plY3QgRXhhbSBTY2hlZHVsZXIgIGluIGFzcC5uZXQgd2l0aCBzcWwgc2VydmVyIDIwMDUgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZWRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxNzgyM2RkAgkPDxYCHwQFHH4vUHJvamVjdC9FeGFtLVNjaGVkdWxlci5yYXJkZAI7D2QWAmYPZBYKAgEPDxYCHwMFHlN0b2NrIE1hbmFnZW1lbnQgU3lzdGVtIEluIFBocGRkAgMPDxYCHwMFWUZyZWUgRG93bmxvYWQgUHJvamVjdCBTdG9jayBNYW5hZ2VtZW50IFN5c3RlbSBpbiBwaHAgYW5kIG15c3FsIHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgZGQCBQ8PFgIfAwUDUEhQZGQCBw8PFgIfAwUFMjA2NDJkZAIJDw8WAh8EBR1+L1Byb2plY3QvSW52ZXN0aW5nIFN0b2NrLnppcGRkAjwPZBYCZg9kFgoCAQ8PFgIfAwUoT25saW5lIFJlc2VydmF0aW9uIGZvciBSZW50LWEtQ2FyIGluIFBIcGRkAgMPDxYCHwMFZEZyZWUgRG93bmxvYWQgUHJvamVjdCBPbmxpbmUgUmVzZXJ2YXRpb24gZm9yIFJlbnQgYSBDYXIgaW4gUGhwIGFuZCBNeSBzcWwgd2l0aCBjb21wbGV0ZSBTb3VyY2UgQ29kZS5kZAIFDw8WAh8DBQNQSFBkZAIHDw8WAh8DBQUxNTM1MGRkAgkPDxYCHwQFGH4vUHJvamVjdC9SZW50LWEtQ2FyLnppcGRkAj0PZBYCZg9kFgoCAQ8PFgIfAwUnQmFuayBBY2NvdW50IFRyYWNrZXIgUHJvamVjdCBpbiBBbmRyb2lkZGQCAw8PFgIfAwWaAUl0IGhlbHBzIFVzZXIgb2YgYW5kcm9pZCBtb2JpbGVzIHRvIGtub3cgYWJvdXQgYmFuayBiYWxhbmNlcyAgaW4gZGlmZmVyZW50IGJhbmtzIGFuZCB0aGVyZSB0cmFuc2FjdGlvbnMgaW5mb3JtYXRpb24uUHJldHR5IEdvb2QgVUkgZGV2ZWxvcGVkIHdpdGggQW5kcm9pZC5kZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUENTkzOWRkAgkPDxYCHwQFMH4vUHJvamVjdC9BY2NvdW50VHJhY2tlckFuZHJvaWQtRW5nZ1Jvb20uQ29tLnJhcmRkAj4PZBYCZg9kFgoCAQ8PFgIfAwUvTmV0d29yayBNb25pdG9yaW5nIGFuZCBSZW1vdGUgRGVza3RvcCBpbiBDIy5OZXRkZAIDDw8WAh8DBekBVHdvIE1vZHVsZXM6b25lIGlzIGNsaWVudCBtb2RlbCBhbmQgb3RoZXIgb25lIGlzIHNlcnZlciBtb2RlbC4gTmV0d29yayBtb25pdG9yaW5nIHN5c3RlbSBwcm9qZWN0IGlzIGludGVncmF0ZWQgd2l0aCBSZW1vdGUgZGVza3RvcCBtb25pdG9yaW5nIHN5c3RlbS5XZSBwcm92aWRlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gb2YgUHJvamVjdCB3aXRoIFNvdXJjZSBjb2RlIG9mIENsaWVudCBhbmQgU2VydmVyLi5kZAIFDw8WAh8DBQZDIy5OZXRkZAIHDw8WAh8DBQUxMzkxMGRkAgkPDxYCHwQFEX4vUHJvamVjdC9OTVMucmFyZGQCPw9kFgJmD2QWCgIBDw8WAh8DBRhSYXRpbmcgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBVtGcmVlIERvd25sb2FkIFByb2plY3QgUmF0aW5nIFN5c3RlbSBpbiBBc3AubmV0LEphdmEgU2NyaXB0LEFqYXggd2l0aCBjb21wbGV0ZSBTb3VyY2UgQ29kZS4gZGQCBQ8PFgIfAwUHQXNwLm5ldGRkAgcPDxYCHwMFBTEwNDAxZGQCCQ8PFgIfBAUUfi9Qcm9qZWN0L1JhdGluZy5yYXJkZAJAD2QWAmYPZBYKAgEPDxYCHwMFGkJ1cyBUaWNrZXQgQm9va2luZyBTeXN0ZW0gZGQCAw8PFgIfAwVrRnJlZSBEb3dubG9hZCBQcm9qZWN0ICBCdXMgVGlja2V0IEJvb2tpbmcgc3lzdGVtIGluIGFzcC5uZXQuIEluIHRoaXMgUHJvamVjdCBpbmNsdWRlIHdpdGggcmVwb3J0LERhdGFiYXNlLiBkZAIFDw8WAh8DBQpBc3AuTmV0LEMjZGQCBw8PFgIfAwUFMzQwNzJkZAIJDw8WAh8EBRx+L1Byb2plY3QvVGlja2V0X0Jvb2tpbmcucmFyZGQCQQ9kFgJmD2QWCgIBDw8WAh8DBRlDb25zdW1lciBDb21wbGFpbiBTeXN0ZW0gZGQCAw8PFgIfAwV/RnJlZSBEb3dubG9hZCBQcm9qZWN0IENvbnN1bWVyIENvbXBsYWluIFN5c3RlbSAgUHJvamVjdCBtYWRlIGluIEFzcC5OZXQgd2l0aCBDIy4gRnJlZSBEb3dubG9hZCBQcm9qZWN0IHdpdGggZG93bmxvYWQgZGF0YWJhc2UgIGRkAgUPDxYCHwMFCkFzcC5OZXQsQyNkZAIHDw8WAh8DBQUxMDg3NGRkAgkPDxYCHwQFIX4vUHJvamVjdC9jb25zdW1lci1jb21wbGFpbnRzLnJhcmRkAkIPZBYCZg9kFgoCAQ8PFgIfAwUkQ29zbWV0aWMgSW52ZW50b3J5IE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVQVGhpcyBXaW5kb3cgYmFzZWQgYXBwbGljYXRpb24gZGV2ZWxvcGVkIGZvciBDb3NtZXRpYyBzaG9wIHRvIGF1dG9tYXRlIGEgcHJvY2Vzcy5kZAIFDw8WAh8DBQ1DIy5OZXQsTXMgU1FMZGQCBw8PFgIfAwUFMTA0OTlkZAIJDw8WAh8EBRZ+L1Byb2plY3QvQ29zbWV0aWMucmFyZGQCQw9kFgJmD2QWCgIBDw8WAh8DBSNXZWJzaXRlIGZvciAgR2VuZXJhdGluZyBQaG90byBBbGJ1bWRkAgMPDxYCHwMFgwFUaGlzIFdlYiBBcHBsaWNhdGlvbiB3aWxsIGdlbmVyYXRlIGF1dG9tYXRpYyBzbGlkZXNob3cgb2YgdGhlIHVzZXIgIHBob3RvLlVzZXIgY2FuIHVwbG9hZCBwaG90b3MgYW5kIGNyZWF0ZSBjdXN0b21pemVkIHBob3RvIGFsYnVtLmRkAgUPDxYCHwMFDkFzcC5OZXQsTVMgU3FsZGQCBw8PFgIfAwUFMTc5MDNkZAIJDw8WAh8EBRh+L1Byb2plY3QvUGhvdG9BbGJ1bS5yYXJkZAJED2QWAmYPZBYKAgEPDxYCHwMFIFdlYnNpdGUgYWJvdXQgRGFuY2VzIGFuZCBEYW5jZXJzZGQCAw8PFgIfAwVVU2ltcGxlIE1pbmkgcHJvamVjdCBkZXZlbG9wZWQgaW4gSHRtbCB0byBwdXQgSGFuZHMgb24gSFRNTC9QSFAsQ1NTIGFuZCBXZWIgRGVzaWduaW5nLmRkAgUPDxYCHwMFCVBIUCxNeVNxbGRkAgcPDxYCHwMFBTEwMDAzZGQCCQ8PFgIfBAUkfi9Qcm9qZWN0L0RhbmNlU2l0ZS1FbmdnUm9vbS5Db20ucmFyZGQCRQ9kFgJmD2QWCgIBDw8WAh8DBSZvbmxpbmUgRWJvb2sgUmV2aWV3IFdlYnNpdGUgaW4gQXNwLm5ldGRkAgMPDxYCHwMFgwFXZWJzaXRlIGZvciBSZXZpZXdpbmcgYSBCb29rLlVzZXIgY2FuIFJldmlldyBvbiBhbnkgYm9vayB3aGljaCBjYW4gYmUgdmlld2VkIGJ5IG90aGVyIHVzZXJzLkZyb250IEVuZCBpcyBBc3AuTmV0LEMjLk5ldCBhbmQgTVMgU1FMLmRkAgUPDxYCHwMFFUFzcC5OZXQsQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBTEyNjEyZGQCCQ8PFgIfBAUjfi9Qcm9qZWN0L09ubGluZSBFYm9vayBTaG9wcGluZy5yYXJkZAJGD2QWAmYPZBYKAgEPDxYCHwMFGk9ubGluZSBTaGFyZSBQb3J0YWwgaW4gSlNQZGQCAw8PFgIfAwV1V2ViIEFwcGxpY2F0aW9uIHByb2plY3QgaW4gSmF2YSxKU1AgZm9yIHZpZXdpbmcgbGl2ZSBTaGFyZSByYXRlcy5Db21wbGV0ZSBwcm9qZWN0IHdpdGggU291cmNlIGNvZGUgYW5kIFJlcG9ydCBpbiBKU1AuZGQCBQ8PFgIfAwUPSlNQLkphdmEsT3JhY2xlZGQCBw8PFgIfAwUFMTIxNjdkZAIJDw8WAh8EBSF+L1Byb2plY3QvT25saW5lIFNoYXJlIFBvcnRhbC5yYXJkZAJHD2QWAmYPZBYKAgEPDxYCHwMFH1NlcmlhbCBQb3J0IEludGVyZmFjZSBpbiBWYi5OZXRkZAIDDw8WAh8DBWlVc2luZyBWYi5OZXQgdG8gY29ubmVjdCB3aXRoIGEgU2VyaWFsIHBvcnQgb2YgQ29tcHV0ZXIgYW5kIE9wZXJhdGUgYW55IENvbXBhdGlibGUgRGV2aWNlcyB0byBTZXJpYWwgUG9ydC5kZAIFDw8WAh8DBQZWYi5OZXRkZAIHDw8WAh8DBQUxNzk3NGRkAgkPDxYCHwQFIX4vUHJvamVjdC9TZXJpYWxQb3J0SW50ZXJmYWNlLnppcGRkAkgPZBYCZg9kFgoCAQ8PFgIfAwUlT25saW5lIFNvY2lhbCBOZXR3b3JraW5nLUZyaWVuZHMgQ2x1YmRkAgMPDxYCHwMFNG9ubGluZSBTb2NpYWwgbmV0d29ya2luZyBTaXRlIGRldmVsb3BlZCBpbiBKU1AsSmF2YS5kZAIFDw8WAh8DBQ9KYXZhLEpTUCxTdHJ1dHNkZAIHDw8WAh8DBQUxOTA2NWRkAgkPDxYCHwQFGn4vUHJvamVjdC9GUklFTkRTX0NMVUIucmFyZGQCSQ9kFgJmD2QWCgIBDw8WAh8DBSNPbmxpbmUgVGlja2V0IEJvb2tpbmcgU3lzdGVtIGluIEpTUGRkAgMPDxYCHwMFaU9ubGluZSBUaWNrZXQgb3IgUmVzZXJ2YXRpb24gc3lzdGVtIGlzIHZlcnkgcG9wdWxhciB0b2RheS5XZWIgQXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIEphdmEsQWR2YW5jZSBKYXZhLmRkAgUPDxYCHwMFDkphdmEsSlNQLE15U3FsZGQCBw8PFgIfAwUFMTg0MDBkZAIJDw8WAh8EBTR+L1Byb2plY3QvT25saW5lIFJlc2VydmF0aW9uIGluIEpTUC1FbmdnUm9vbS5Db20ucmFyZGQCSg9kFgJmD2QWCgIBDw8WAh8DBSBPbmxpbmUgRXhhbWluYXRpb24gU3lzdGVtIGluIFNBUGRkAgMPDxYCHwMFWEFuIE9ubGluZSBTeXN0ZW0gRGV2ZWxvcGVkIGluIFNBUCB3aXRoIEFCQVAgZm9yIGltcGxlbWVudGF0aW9uIG9mIFByb21vdGlvbiBFeGFtaW5hdGlvbi5kZAIFDw8WAh8DBQ1KQVZBLFNBUCxBQkFQZGQCBw8PFgIfAwUENzg0N2RkAgkPDxYCHwQFE34vUHJvamVjdC8yICgxKS5kb2NkZAJLD2QWAmYPZBYKAgEPDxYCHwMFK0NvbXByZWhlbnNpdmUgVHJhaW5pbmcgYW5kIFBsYWNlbWVudCBpbiBKU1BkZAIDDw8WAh8DBWVUaGUgd2ViIGVuYWJsZWQgaW5mb3JtYXRpb24gbWFuYWdlbWVudCBzeXN0ZW0gZGVzaWduZWQgdG8gYXV0b21hdGUgdGhlIGVudGlyZSBvcGVyYXRpb25zIG9mIGEgbW9kZXJuLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUENjc5NGRkAgkPDxYCHwQFF34vUHJvamVjdC9QbGFjZW1lbnQuZG9jZGQCTA9kFgJmD2QWCgIBDw8WAh8DBRxMb2FuIEFwcHJvdmFsIFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwVOVGhpcyBpcyBhIFN5c3RlbSBEZXZlbG9wZWQgZm9yIExvYW4gQXBwcm92YWwgUHJvY2VzcyBpbiBCYW5rLk1hZGUgaW4gSmF2YSxKU1AuZGQCBQ8PFgIfAwUISmF2YSxKU1BkZAIHDw8WAh8DBQUxNjUwMGRkAgkPDxYCHwQFNn4vUHJvamVjdC9Mb2FuIEFwcHJvdmFsIFN5c3RlbSBpbiBKU1AtRW5nZ1Jvb20uY29tLnJhcmRkAk0PZBYCZg9kFgoCAQ8PFgIfAwUdSGVhbHRoIENlbnRlciBQcm9qZWN0IGluIEphdmFkZAIDDw8WAh8DBWVUaGUgbWFpbiBpbnRlbnRpb24gb2YgaW50cm9kdWNpbmcgdGhpcyBzeXN0ZW0gaXMgdG8gcmVkdWNlIHRoZSBtYW51YWwgd29yayBhdCBIZWFsdGggY2VudGVyIGNvdW50ZXJzLmRkAgUPDxYCHwMFCkphdmEsTXlTcWxkZAIHDw8WAh8DBQUyNDYwNmRkAgkPDxYCHwQFN34vUHJvamVjdC9IZWFsdGhDYXJlIE1hbmFnZW1lbnQgU3lzdGVtLUVuZ2dyb29tLkNvbS56aXBkZAJOD2QWAmYPZBYKAgEPDxYCHwMFGkhvc3BpdGFsIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwU8RnJlZSBEb3dubG9hZCBwcm9qZWN0IEhvc3BpdGFsIE1hbmFnZW1lbnQgU3lzdGVtIGluIHZiLm5ldA0KZGQCBQ8PFgIfAwUGVmIuTmV0ZGQCBw8PFgIfAwUFNDgzMTJkZAIJDw8WAh8EBSR+L1Byb2plY3QvSG9zcGl0YWxfTTIyMTA3OTk1MjAxMS56aXBkZAJPD2QWAmYPZBYKAgEPDxYCHwMFF09ubGluZSBCdWRnZXQgQW5hbHlzaXMgZGQCAw8PFgIfAwVNRnJlZSBEb3dubG9hZCBQcm9qZWN0IE9ubGluZSBCdWRnZXQgQW5hbHlzaXMgIGluIEFzcC5uZXQgd2l0aCBzcWwgU2VydmVyIDIwMDVkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEOTE5OGRkAgkPDxYCHwQFHH4vUHJvamVjdC9CdWRnZXRBbmFseXNpcy56aXBkZAJQD2QWAmYPZBYKAgEPDxYCHwMFH09ubGluZSBIb3RlbCBSZXNlcnZhdGlvbiBTeXN0ZW1kZAIDDw8WAh8DBUNGcmVlIERvd25sb2FkIFByb2plY3QgT25saW5lIFJlc2VydmF0aW9uIFN5c3RlbSBpbiBQaHAgd2l0aCBNeSBTcWwuZGQCBQ8PFgIfAwUDUGhwZGQCBw8PFgIfAwUFMTg5ODdkZAIJDw8WAh8EBSx+L1Byb2plY3QvSG90ZWxfUmVzZXJ2YXRpb25fU3lzdGVtX3YyLjM1LnJhcmRkAlEPZBYCZg9kFgoCAQ8PFgIfAwUrT25saW5lIEFpciBUaWNrZXQgQm9va2luZyBTeXN0ZW0gaW4gQXNwLm5ldGRkAgMPDxYCHwMFQkZyZWUgRG93bmxvYWQgUHJvamVjdCBPbmxpbmUgQWlyIFRpY2tldCBCb29raW5nIFN5c3RlbSBpbiBBc3AubmV0LmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxODc2MGRkAgkPDxYCHwQFGH4vUHJvamVjdC9haXIgdGlja2V0LnJhcmRkAlIPZBYCZg9kFgoCAQ8PFgIfAwUsT25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbSBQcm9qZWN0IGluIEFzcC5uZXRkZAIDDw8WAh8DBUJGcmVlIERvd25sb2FkIFByb2plY3QgT25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbSBQcm9qZWN0IGluIEFzcC5uZXRkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUFMjI2MzNkZAIJDw8WAh8EBRd+L1Byb2plY3QvV2ViU2l0ZTEyLnJhcmRkAlMPZBYCZg9kFgoCAQ8PFgIfAwUcRGlnaXRhbCBQaG90byBHYWxsZXJ5IFN5c3RlbWRkAgMPDxYCHwMFWEZyZWUgRG93bmxvYWQgUHJvamVjdCBEaWdpdGFsIFBob3RvIEdhbGxlcnkgU3lzdGVtIGluIEFzcC5OZXQgV2l0aCBDb21wbGV0ZSBTb3VyY2UgQ29kZS5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUFMTQ5OTNkZAIJDw8WAh8EBSV+L1Byb2plY3QvRGlnaXRhbF9Qb3J0aWNvX1Byb2plY3QucmFyZGQCVA9kFgJmD2QWCgIBDw8WAh8DBRtDb2xsZWdlIEluZm9ybWF0aW9uIFN5c3RlbSBkZAIDDw8WAh8DBVhGcmVlIERvd25sb2FkIFByb2plY3QgQ29sbGVnZSBJbmZvcm1hdGlvbiAgU3lzdGVtIGluIGFzcC5uZXQgV2l0aCBTb3VyY2UgQ29kZSBhbmQgUmVwb3J0ZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBTI0ODYwZGQCCQ8PFgIfBAUhfi9Qcm9qZWN0L0NvbGxlZ2VfSW5mb3JtYXRpb24ucmFyZGQCVQ9kFgJmD2QWCgIBDw8WAh8DBSZKZXdlbGxlcnkgTWFuYWdlbWVudCBTeXN0ZW0gaW4gYXNwLm5ldGRkAgMPDxYCHwMFPEZyZWUgRG93bmxvYWQgUHJvamVjdCBKZXdlbGxlcnkgTWFuYWdlbWVudCBTeXN0ZW0gaW4gYXNwLm5ldGRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxNDkzM2RkAgkPDxYCHwQFJn4vUHJvamVjdC9qZXZsbGFyeXNob3AgSW4gRW5nZ1Jvb20uemlwZGQCVg9kFgJmD2QWCgIBDw8WAh8DBSZUaW1lIFNpbXVsYXRpb24gU3lzdGVtIFByb2plY3QgaW4gSmF2YWRkAgMPDxYCHwMFgAFGcmVlIERvd25sb2FkIFByb2plY3QgaW4gSmF2YS1KU1BUaW1lIFNpbXVsYXRpb24gU3lzdGVtLkEgVGltZSBTaW11bGF0aW9uIFN5c3RlbSBpcyBhIHVuaXF1ZSBwcm9qZWN0IGZvciBUaW1lIE1hbmFnZW1lbnQgU3lzdGVtLmRkAgUPDxYCHwMFD0phdmEtSlNQLE9yYWNsZWRkAgcPDxYCHwMFBTEwNjcwZGQCCQ8PFgIfBAUYfi9Qcm9qZWN0L3Rzc0Ryb3Bib3gucmFyZGQCVw9kFgJmD2QWCgIBDw8WAh8DBSJFdmVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0ZGQCAw8PFgIfAwVnQSBQcm9mZXNzaW9uYWwgQ29kZSB3cml0dGVuIGZvciBFdmVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0LkRvd25sb2FkIENvbXBsZXRlIFNvdXJjZSBjb2RlIEZyZWUuIGRkAgUPDxYCHwMFEUFzcC5OZXQsQyMsTXMgU3FsZGQCBw8PFgIfAwUFMTUwNjhkZAIJDw8WAh8EBRV+L1Byb2plY3QvcHJvamVjdC56aXBkZAJYD2QWAmYPZBYKAgEPDxYCHwMFJUludmVudG9yeSBtYW5hZ2VtZW50IFN5c3RlbSBpbiBWQiA2LjBkZAIDDw8WAh8DBW9BIFByb2plY3QgZGV2ZWxvcGVkIGluIFZiIDYuMCBGb3IgSW52ZW50b3J5IE1hbmFnZW1lbnQgU3lzdGVtLkZyZWUgVG8gRG93bmxvYWQgU291cmNlIGNvZGUgaW4gVmIoVmlzdWFsIEJhc2ljKS5kZAIFDw8WAh8DBRZ2aXN1YWwgQmFzaWMsVkIsQWNjZXNzZGQCBw8PFgIfAwUFMjc5NzNkZAIJDw8WAh8EBR5+L1Byb2plY3QvSW52ZW50b3J5LVN5c3RlbS56aXBkZAJZD2QWAmYPZBYKAgEPDxYCHwMFKUZyZWUgU291cmNlIENvZGUgSG9zdGVsIG1hbmFnZW1lbnQgaW4gUEhQZGQCAw8PFgIfAwV5VGhpcyBwcm9qZWN0IGlzIGRldmVsb3BlZCBpbiBQSFAgZm9yIEhvc3RlbCBNYW5hZ2VtZW50IFN5c3RlbShITVMpLkZyZWUgdG8gRG93bmxvYWQgUHJvamVjdCB3aXRoIEZ1bGwgU291cmNlIGNvZGUgaW4gUEhQLmRkAgUPDxYCHwMFCVBIUCxNeVNxbGRkAgcPDxYCHwMFBTE2Mzc0ZGQCCQ8PFgIfBAUxfi9Qcm9qZWN0L0hvc3BpdGFsIE1hbmFnZW1lbnRQSFAtRW5nZ1Jvb20uY29tLnppcGRkAloPZBYCZg9kFgoCAQ8PFgIfAwUeTW9iaWxlIFRyYWNraW5nIFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwW2AVRoaXMgaXMgYSB3ZWIgYXBwbGljYXRpb24uIFRoaXMgYXBwbGljYXRpb24gdHJhY2tzIHRoZSBtb2JpbGUgbG9jYXRpb24gaW4gZXZlcnkgNSBzZWNvbmRzIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgQ2VudHJhbCBDb25uZWN0ZWQgU2VydmVycy5GcmVlIFRvIERvd25sb2FkIHdpdGggQ29tcGxldGUgU291cmNlIGNvZGUuZGQCBQ8PFgIfAwUISmF2YSxKc3BkZAIHDw8WAh8DBQUzMjYxOWRkAgkPDxYCHwQFHX4vUHJvamVjdC9tb2JpbGUgdHJhY2tpbmcucmFyZGQCWw9kFgJmD2QWCgIBDw8WAh8DBSxSZWFsIFRpbWUgSmF2YSBCYXNlZCBBdWN0aW9uIFN5c3RlbSBwcm9qZWN0IGRkAgMPDxYCHwMFalRoaXMgaXMgYSBvbmxpbmUgYXVjdGlvbiBzaXRlIGZvciBzZWxsaW5nLkl0IGlzIGltcGxlbWVudGVkIGluIGphdmEuZnJlZSBUbyBkb3dubG9hZCBDb21wbGV0ZSBTb3VyY2UgY29kZS5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUFMTQ3MjJkZAIJDw8WAh8EBRl+L1Byb2plY3QvKGVjb21tZXJjZSkucmFyZGQCXA9kFgJmD2QWCgIBDw8WAh8DBRxTaW1wbGUgR3ltIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVXQSBQcm9qZWN0IGRldmVsb3BlZCBpbiBWQiBmb3IgRml0bmVzcyBDZW50ZXIuRnJlZSBUbyBEb3dubG9hZCBwcm9qZWN0IHdpdGggU291cmNlIGNvZGUuZGQCBQ8PFgIfAwUWdmlzdWFsIEJhc2ljLFZCLEFjY2Vzc2RkAgcPDxYCHwMFBTIyMjg5ZGQCCQ8PFgIfBAUffi9Qcm9qZWN0L0ZpbmFuY2lhbCBQcm9qZWN0LnppcGRkAl0PZBYCZg9kFgoCAQ8PFgIfAwUhcmV0YWlsIFBoYXJtYWN5IE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwWpAWEgUmV0YWlsIFBoYXJtYWN5IE1hbmFnZW1lbnQgU3lzdGVtIGlzIGRldmVsb3BlZCBmb3IgUGhhcm1hIGNvbXBhbnkgdG8gbWFpbnRhaW4gdGhlaXIgUmV0YWlsIGNoYWluLkNvbXBsZXRlIEludmVudG9yeSBtYW5hZ2VtZW50IGluIFZiIGZyZWUgdG8gZG93bmxvYWQgYWNhZGVtaWMgUHJvamVjdC5kZAIFDw8WAh8DBRZ2aXN1YWwgQmFzaWMsVkIsQWNjZXNzZGQCBw8PFgIfAwUFMjA0NzRkZAIJDw8WAh8EBR1+L1Byb2plY3QvcmV0YWlsX3BoYXJtYWN5LnppcGRkAl4PZBYCZg9kFgoCAQ8PFgIfAwUXVGFzayBNYW5hZ2VyIGZvciBNb2JpbGVkZAIDDw8WAh8DBTpUaGlzIGlzIGEgbW9iaWxlIGFwcGxpY2F0aW9uIGRldmVsb3BlZCB1c2luZyBIVE1sNSxKcXVlcnkuZGQCBQ8PFgIfAwUOTW9iaWxlLEFuZHJvaWRkZAIHDw8WAh8DBQQzMjUzZGQCCQ8PFgIfBAUZfi9Qcm9qZWN0L1Rhc2tUcmFja2VyLnppcGRkAl8PZBYCZg9kFgoCAQ8PFgIfAwUlQ29sbGVnZSBXZWIgUG9ydGFsIHByb2plY3QgaW4gQXNwLm5ldGRkAgMPDxYCHwMFQEZyZWUgZG93bmxvYWQgcHJvamVjdCBDb2xsZWdlIFdlYiBQb3J0YWwgcHJvamVjdCBtYWRlIGluIEFzcC5uZXRkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUFMTU0MTlkZAIJDw8WAh8EBR5+L1Byb2plY3QvQ1dQKDI3LTQtMTEpIE5ldy5yYXJkZAJgD2QWAmYPZBYKAgEPDxYCHwMFGG9ubGluZSBzaG9wcGluZyBwcm9qZWN0IGRkAgMPDxYCHwMFMEZyZWUgRG93bmxvYWQgUHJvamVjdCBPbmxpbmUgU2hvcHBpbmcgaW4gYXNwLm5ldGRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUyNzg3MmRkAgkPDxYCHwQFE34vUHJvamVjdC9maW5hbC5yYXJkZAJhD2QWAmYPZBYKAgEPDxYCHwMFFk9ubGluZSBCYW5raW5nIFByb2plY3RkZAIDDw8WAh8DBTBGcmVlIERvd25sb2FkIHByb2plY3Qgb25saW5lIEJhbmtpbmcgaW4gYXNwLm5ldCBkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUFMTY0NDlkZAIJDw8WAh8EBR1+L1Byb2plY3QvaW50ZXJuZXRiYW5raW5nLnppcGRkAmIPZBYCZg9kFgoCAQ8PFgIfAwUXM0QgQm91bmNlIGdhbWUgSW4gQy9DKytkZAIDDw8WAh8DBSlGcmVlIGRvd25sb2FkIFByb2plY3QgIGdhbWUgbWFkZSBpbiBjL2MrK2RkAgUPDxYCHwMFBWMvYysrZGQCBw8PFgIfAwUFMjI3OTZkZAIJDw8WAh8EBSJ+L1Byb2plY3QvM0QgYm91bmNlIEZpbmFsIENvZGUucmFyZGQCYw9kFgJmD2QWCgIBDw8WAh8DBRlMaWJyYXJ5IG1hbmFnZW1lbnQgc3lzdGVtZGQCAw8PFgIfAwUvTGlicmFyeSBtYW5hZ2VtZW50IHN5c3RlbSBwcm9qZWN0IG1hZGUgaW4gYy9DKytkZAIFDw8WAh8DBQVjL2MrK2RkAgcPDxYCHwMFBTE2NDEwZGQCCQ8PFgIfBAUgfi9Qcm9qZWN0L0xpYnJhcnkgbWFuYWdlbWVudC5yYXJkZAJkD2QWAmYPZBYKAgEPDxYCHwMFI0NhbGVuZGFyIEFwcGxpY2F0aW9u4oCdIFVzaW5nIEMvQysrZGQCAw8PFgIfAwUjQ2FsZW5kYXIgQXBwbGljYXRpb27igJ0gVXNpbmcgQy9DKytkZAIFDw8WAh8DBQVjL2MrK2RkAgcPDxYCHwMFBTExMjExZGQCCQ8PFgIfBAUafi9Qcm9qZWN0L05ldyBDYWxlbmRlci5yYXJkZAJlD2QWAmYPZBYKAgEPDxYCHwMFLE9ubGluZSBNb2JpbGUgQ29tcGFueSBQb3J0YWwgUHJvamVjdCBpbiBKYXZhZGQCAw8PFgIfAwWXAU9ubGluZSBNb2JpbGUgQ29tcGFueSBQb3J0YWwgUHJvamVjdCBpbiBKYXZhIGlzIHdlYiBhcHBsaWNhdGlvbiBwcm92aWRlcyBDb3N0dW1lcnMgYW5kIGNvbXBhbnkgdG8gY29tbXVuaWNhdGUgd2l0aCBhIHVzZXIgaW50ZXJmYWNlIGZvciBhY2Nlc3NpbmcgZGF0YS5kZAIFDw8WAh8DBQtKYXZhLE1zIFNxbGRkAgcPDxYCHwMFBTEyODc2ZGQCCQ8PFgIfBAU5fi9Qcm9qZWN0L01vYmlsZSBPcGVyYXRvciBQb3J0YWwgaW4gSmF2YS1FbmdnUm9vbS5Db20uemlwZGQCZg9kFgJmD2QWCgIBDw8WAh8DBSpCaW9tZXRyaWMgRWxlY3Ryb25pYyBCb290aCBQcm9qZWN0IGluIEphdmFkZAIDDw8WAh8DBbYBIG9ubGluZSBlbGVjdGlvbiBwcm9jZXNzIGRldmVsb3BlZCBhcyB3ZWIgYXBwbGljYXRpb24gdG8gYWxsb3cgdGhlIHVzZXIgdG8gYWNjZXNzIHRoZWlyIHZvdGVyIHJlZ2lzdHJhdGlvbiBhdCBob21lLkZpbmdlciBQcmludCBTY2FubmluZyBpcyBtb3N0IHBvd2VyZnVsIEZlYXR1cmVzIG9mIHRoZSBBcHBsaWNhdGlvbi5kZAIFDw8WAh8DBRJKYXZhLEpEQkMsU2VydmxldHNkZAIHDw8WAh8DBQUxMjQzNmRkAgkPDxYCHwQFS34vUHJvamVjdC9PbmxpbmUgQmlvTWV0cmljIEVsZWN0aW9uIFN5c3RlbSBQcm9qZWN0IGluIEphdmEtRW5nZ1Jvb20uQ29tLnppcGRkAmcPZBYCZg9kFgoCAQ8PFgIfAwUeT25saW5lIFRvdXIgTWFuYWdlbWVudCBQcm9qZWN0ZGQCAw8PFgIfAwVqQSBXZWIgQXBwbGljYXRpb24gRGV2ZWxvcGVkIGZvciBUb3VyIG1hbmFnZW1lbnQgQ29tcGFueSBmb3IgSGFuZGxpbmcgdGhlaXIgT3BlcmF0aW9ucyBhbmQgQWRtaW5pc3RyYXRpb25zLmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBTEzNzcxZGQCCQ8PFgIfBAUwfi9Qcm9qZWN0L1RvdXJNYW5hZ2VtZW50UHJvamVjdC1FbmdnUm9vbS5jb20ucmFyZGQCaA9kFgJmD2QWCgIBDw8WAh8DBSNFLVJlZ2lzdHJhdGlvbiBmb3IgUHJvcGVydHkgUHJvamVjdGRkAgMPDxYCHwMFkAFFLVByb3BlcnR5IERlYWxpbmcgU2l0ZSBkZXZlbG9wZWQgaW4gYXNwLm5ldC4NCk5pY2VseSBEZXZlbG9wZWQgYW5kIERlc2lnbmVkIENsaWVudCBhbmQgQWRtaW4gU2VjdGlvbi5SZWFkeSB0byBTdWJtaXQgYXMgRmluYWwgU2VtZXN0ZXIgUHJvamVjdC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1zIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQUxMDU0NGRkAgkPDxYCHwQFP34vUHJvamVjdC9FLVJlZ2lzdHJhdGlvblN5c3RlbUZvclByb3BlcnR5UHJvamVjdCBpbiBBU1AuTmV0LnJhcmRkAmkPZBYCZg9kFgoCAQ8PFgIfAwUaT25saW5lIFNvY2lhbCBsaWtlIFNoYXJpbmdkZAIDDw8WAh8DBcMBU29jaWFsIG5ldHdvcmtpbmctY29tbXVuaXR5IHNpdGUgcHJvdmlkZXMgY29tbXVuaWNhdGlvbiB0byB2YXJpb3VzIGVtcGxveWVlcyBvZiB0aGUgY29tcGFueSBhbmQgYWxzbyBlbXBsb3llZXMgY2FuIGdldCBhbHNvIHRoZSBmZWF0dXJlcyBhcyBjdXJyZW50IGNvbW11bml0eSBzaXRlLlRoaXMgUHJvamVjdCBpcyBtYWRlIGluIEFzcC5OZXQuZGQCBQ8PFgIfAwUVQXNwLk5ldCxNUyBTcWwsQyMuTmV0ZGQCBw8PFgIfAwUFMTE5NjlkZAIJDw8WAh8EBTR+L1Byb2plY3QvU29jaWFsTGlrZVNoYXJpbmcgUHJvamVjdC1FbmdnUm9vbS5Db20ucmFyZGQCag9kFgJmD2QWCgIBDw8WAh8DBSdPbmxpbmUgTXVsdGlwbGV4IFRpY2tldCBCb29raW5nIFByb2plY3RkZAIDDw8WAh8DBdcBRS10aWNrZXQgYm9va2luZyBzeXN0ZW0gaXMgYSB3ZWItYmFzZWQgYXBwbGljYXRpb24gZm9yIHJlc2VydmluZyBzZWF0IGZvciB3YXRjaGluZ21vdmllIGluIG11bHRpcGxleCBjaW5lbWEuIFRoZSBjaW5lbWEgaW5kdXN0cnkgYW5kIG1vdmllIHdhdGNoZXJzIGNhbiBnYWluIGJlbmVmaXRzZnJvbSB0aGlzIHNlcnZpY2UuVGhpcyBQcm9qZWN0IGlzIG1hZGUgaW4gQXNwLk5ldC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQUxMDg5M2RkAgkPDxYCHwQFPH4vUHJvamVjdC9NdWx0aXBsZXggRS1UaWNrZXRCb29raW5nIFByb2plY3QtRW5nZ1Jvb20uQ29tLnJhcmRkAmsPZBYCZg9kFgoCAQ8PFgIfAwUZT25saW5lIEUtUGFwZXIgTWFuYWdlbWVudGRkAgMPDxYCHwMF5wFFLVBBUEVSIHN0YW5kcyBmb3IgZWxlY3Ryb25pYyBwYXBlci4gSWYgd2Ugd2FudCB0byBnZXQgYW55IHR5cGUgb2YgZG9jdW1lbnQgb3IgY29udGVudCBmcm9tIGFueSBwbGFjZSBvbiB3ZWJzaXRlIHRoYW4gZS1wYXBlciBjb21lcyBpbnRvIHBpY3R1cmUuIEl0IGlzIHRoZSBjb25jZXB0IHRocm91Z2ggd2hpY2ggYW55IHVzZXIgY2FuIGRvd25sb2FkIG9yIHVwbG9hZCBhIG11bHRpcGxlIGRvY3VtZW50cy5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ3MTQyZGQCCQ8PFgIfBAU0fi9Qcm9qZWN0L0UtcGFwZXIgTWFuYWdlbWVudCBTeXN0ZW0tRW5nZ1Jvb20uQ29tLnJhcmRkAmwPZBYCZg9kFgoCAQ8PFgIfAwUkQXR0ZW5kYW5jZSBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwWfAkF0dGVuZGFuY2UgU3lzdGVtIGZvcm1zIHRoZSBsaWZlbGluZSBvZiB0aGUgYnVzaW5lc3MgaW5zdGl0dXRlIHRvIG1hbmFnZSB0aGUgRW1wbG95ZWUgYW5kIGl0cyBzYWxhcnkuIEl0IGlzIHZlcnkgZXNzZW50aWFsIGZvciBhbiBJbnN0aXR1dGUgdG8gaGFuZGxlIHRoZSBTYWxhcnkgYW5kIHRoZWlyIHNjYWxlLiBJdCBpcyB2ZXJ5IHVzZWZ1bCBmb3IgYW4gSW5zdGl0dXRlIHRvIHRlc3QgaXRzIGVtcGxveWVlIGF0dGVuZGFuY2UgY29udGludW91c2x5IGZvciB0aGVpciBtdXR1YWwgZGV2ZWxvcG1lbnQuZGQCBQ8PFgIfAwUUQyMuTmV0LFZiLk5ldCxNUyBTUUxkZAIHDw8WAh8DBQU0MDY0NWRkAgkPDxYCHwQFPH4vUHJvamVjdC9BdHRlbmRhbmNlTWFuYWdlbWVudFN5c3RlbVByb2plY3QtRW5nZ1Jvb20uQ29tLnJhcmRkAm0PZBYCZg9kFgoCAQ8PFgIfAwUiT25saW5lIENvbW11bml0eSBQb3J0YWwgaW4gQXNwLk5ldGRkAgMPDxYCHwMFO09ubGluZSBDb21tdW5pdHkgUG9ydGFsIHNpdGUgRm9yIE1ldHJvbW9ueSBtYWRlIGluIGFzcC5OZXQuZGQCBQ8PFgIfAwUVQXNwLk5ldCxNUyBTcWwsQyMuTmV0ZGQCBw8PFgIfAwUENTM3MmRkAgkPDxYCHwQFKn4vUHJvamVjdC9Db21tdW5pdHlQb3J0YWwtRW5nZ1Jvb20uY29tLnJhcmRkAm4PZBYCZg9kFgoCAQ8PFgIfAwUoRWR1Y2F0aW9uYWwgU29sYXIgU3lzdGVtIFByb2plY3QgIGluIEMrK2RkAgMPDxYCHwMFP0EgUHJvamVjdCBkZXZlbG9wZWQgaW4gYysrIGZvciBWaXN1YWxpemluZyBTb2xhciBTeXN0ZW0gaW4gQysrLmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDY5NzRkZAIJDw8WAh8EBSp+L1Byb2plY3QvRWR1Y2F0aW9uYWwgU29sYXIgU3lzdGVtLkNwcC5kb2NkZAJvD2QWAmYPZBYKAgEPDxYCHwMFIERpYWJldGVzIEFuYWx5c2lzIFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwVFQSBpbm5vdmF0aXZlIGFwcGxpY2F0aW9uIG1hZGUgaW4gQysrIHRvIGFuYWx5c2lzIGNvbnNvbGUgYXBwbGljYXRpb24uZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENDM0MWRkAgkPDxYCHwQFIn4vUHJvamVjdC9EaWFiZXRlc0FuYWx5c2lzLkNwcC5kb2NkZAJwD2QWAmYPZBYKAgEPDxYCHwMFIENydWlzZSBNYW5hZ2VtZW50IFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwU5QSBQcm9qZWN0IG1hZGUgaW4gQysrLklkZWFsIGZvciBNYWpvciBTdWJqZWN0IFN1Ym1pc3Npb24uZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUEMzMyNWRkAgkPDxYCHwQFHn4vUHJvamVjdC9DcnVpc2VNYW5hZ2VtZW50LmRvY2RkAnEPZBYCZg9kFgoCAQ8PFgIfAwUqU3VwZXJtYXJrZXQgQmlsbGluZyBTeXN0ZW0gIFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwU0Q29uc29sZSBBcHBsaWNhdGlvbiBvbiBTdXBlcm1hcmtldCBCaWxsaW5nIHdpdGggR1VJLmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDk2NTdkZAIJDw8WAh8EBR1+L1Byb2plY3QvU3VwZXJtYXJrZXQuQ3BwLmRvY2RkAnIPZBYCZg9kFgoCAQ8PFgIfAwUjU3R1ZGVudCBSZXBvcnQgQ2FyZCBQcm9qZWN0ICBpbiBDKytkZAIDDw8WAh8DBU5BIFByb2plY3Qgb24gU3R1ZGVudCBSZXN1bHQgYW5kIFJlcG9ydCBjYXJkIG1hZGUgaW4gQysrLlNpbXBsZSBHVUkgYW5kIENvZGluZy5kZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ4ODk2ZGQCCQ8PFgIfBAUlfi9Qcm9qZWN0L1N0dWRlbnQgUmVwb3J0IENhcmQuQ3BwLmRvY2RkAnMPZBYCZg9kFgoCAQ8PFgIfAwUgVHJhaW4gUmVzZXJ2YXRpb25uIFN5c3RlbSBpbiBDKytkZAIDDw8WAh8DBTdDb25zb2xlIFByb2plY3QgbWFkZSBpbiBDKysgdG8gZXhwbG9yZSBGZWF0dXJlcyBvZiBPT1AuZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENzE3NWRkAgkPDxYCHwQFI34vUHJvamVjdC9UcmFpbi1SZXNlcnZhdGlvbi5DcHAuZG9jZGQCdA9kFgJmD2QWCgIBDw8WAh8DBShCYW5raW5nIE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwU7Q29uc29sZSBBcHBsaWNhdGlvbiB3aXRoIFBvd2VyIG9mIEdVSSBpbXBsZW1lbnRlZCB3aXRoIEMrKy5kZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ2OTI3ZGQCCQ8PFgIfBAUZfi9Qcm9qZWN0L0JhbmtpbmcuQ3BwLmRvY2RkAnUPZBYCZg9kFgoCAQ8PFgIfAwUxT25saW5lIEFncmkgUHJvZHVjdCBBdWN0aW9uaW5nIFByb2plY3QgaW4gYXNwLk5ldGRkAgMPDxYCHwMFTEEgd2ViIEFwcGxpY2F0aW9uIGZvciBBUE1DIG1hcmtldCB0byBjb25kdWN0IGFncm8gcHJvZHVjdCBhdWN0aW9uaW5nIE9ubGluZS5kZAIFDw8WAh8DBRFBc3AuTmV0LEMjLE1zIFNxbGRkAgcPDxYCHwMFBDY0NDNkZAIJDw8WAh8EBT1+L1Byb2plY3QvQVBNQy1hdWN0aW9uaW5nIFByb2plY3QgaW4gQXNwLk5ldC1FbmdnUm9vbS5Db20ucmFyZGQCdg9kFgJmD2QWCgIBDw8WAh8DBSdPbmxpbmUgRm9vZCBPcmRlcmluZyBQcm9qZWN0IGluIEFzcC5OZXRkZAIDDw8WAh8DBekBVGhpcyBvbmxpbmUgYXBwbGljYXRpb24gaXMgZGV2ZWxvcGVkIGFzIGEgZUNvbW1lcmNlIGFwcGxpY2F0aW9uIHRhcmdldGluZyBmb29kIGluZHVzdHJpZXMuVXNlciBvZiB0aGUgc3lzdGVtIGNhbiBvcmRlciBmb29kIGF0IHZhcmlvdXMgcmVzdGF1cmFudHMgb25saW5lLkRvd25sb2FkIEZvb2QgT3JkZXJpbmcgc3lzdGVtIGluIEFzcC5OZXQgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBhbmQgUmVwb3J0LiBkZAIFDw8WAh8DBRVBc3AuTmV0LFZiLk5ldCxNcyBTcWxkZAIHDw8WAh8DBQUyODY2MmRkAgkPDxYCHwQFNX4vUHJvamVjdC9PbmxpbmUgRm9vZCBPcmRlcmluZyBQcm9qZWN0IGluIGFzcC5OZXQucmFyZGQCdw9kFgJmD2QWCgIBDw8WAh8DBSVIZWxpQ29wIEZpZ2h0IEdhbWUgUHJvamVjdCAgaW4gQyMuTmV0ZGQCAw8PFgIfAwU/TGVhcm4gR2FtZSBQcm9ncmFtbWluZyBpbiBDIyB3aXRoIGdvb2QgYW5kIFNpbXBsZSBHYW1lIFByb2plY3QuZGQCBQ8PFgIfAwUCQyNkZAIHDw8WAh8DBQQ0NDA2ZGQCCQ8PFgIfBAU1fi9Qcm9qZWN0L0ZpZ2h0ZXItR2FtZSBQcm9qZWN0IGluIFZiLUVuZ2dSb29tLmNvbS5yYXJkZAJ4D2QWAmYPZBYKAgEPDxYCHwMFHVJlbWluZGVyIFN5c3RlbSBQcm9qZWN0IGluIEMjZGQCAw8PFgIfAwUyVGlueSB3aW5kb3dzIFByb2plY3QgdG8gaW1wbGVtZW50IFJlbWluZGVyIFN5c3RlbS5kZAIFDw8WAh8DBQJDI2RkAgcPDxYCHwMFBDQwNThkZAIJDw8WAh8EBSt+L1Byb2plY3QvUmVtaW5kZXIgU3lzdGVtIFByb2plY3QgaW4gQyMuemlwZGQCeQ9kFgJmD2QWCgIBDw8WAh8DBR9Tb2Z0d2FyZSBUcmlja2VyIFByb2plY3QgIGluIEMjZGQCAw8PFgIfAwV3U2ltcGxlIFdpbmRvd3MgQXBwbGljYXRpb24gd2hpY2ggdXNlIFdpbmRvd3MgTWFuYWdlbWVudCBJbnN0cnVtZW50YXRpb24gdG8gZmluZCBhIHNvZnR3YXJlL0FwcGxpY2F0aW9uIGluc3RhbGxlZCBpbiBPUy5kZAIFDw8WAh8DBQxXTUkgUXVlcnksQyNkZAIHDw8WAh8DBQQxMjA5ZGQCCQ8PFgIfBAU5fi9Qcm9qZWN0L1NvZnR3ZWFyIHRyaWNrZXIgUHJvamVjdCBpbiBDIy1FbmdnUm9vbS5Db20uemlwZGQCeg9kFgJmD2QWCgIBDw8WAh8DBRxBZHZlcnRpc2luZyBBZ2VuY3kgUG9ydGZvbGlvZGQCAw8PFgIfAwVDT25saW5lIEFkdmVydGlzaW5nIE1hbmFnZW1lbnQgYW5kIFBvcnRmb2xpbyBmb3IgQWR2ZXJ0aXNpbmcgQWdlbmN5LmRkAgUPDxYCHwMFEUFzcC5OZXQsQyMsTVMgU3FsZGQCBw8PFgIfAwUENjA0MmRkAgkPDxYCHwQFOn4vUHJvamVjdC9BZHZlcnRpc2VtZW50IE1hbmFnZW1lbnQgU3lzdGVtLUVuZ2dSb29tLkNvbS5yYXJkZAJ7D2QWAmYPZBYKAgEPDxYCHwMFGU9ubGluZSBDdXN0b21lciBDYXJlKENSTSlkZAIDDw8WAh8DBS5DdXN0b21lciBSZWxhdGlvbnNoaXAgUHJvamVjdCBtYWRlIGluIGFzcC5OZXQuZGQCBQ8PFgIfAwURQXNwLk5ldCxDIyxNUyBTcWxkZAIHDw8WAh8DBQQ5OTE4ZGQCCQ8PFgIfBAU9fi9Qcm9qZWN0L09ubGluZUN1c3RvbWVyQ2FyZShDUk0pIGluIEFzcC5OZXQtRW5nZ1Jvb20uQ29tLnJhcmRkAnwPZBYCZg9kFgoCAQ8PFgIfAwUlU3R1ZGVudCBJbmZvcm1hdGlvbiBhbmQgVHJha2luZyBpbiBDI2RkAgMPDxYCHwMFU05pY2UgU3R1ZGVudCBUcmFja2luZyBhbmQgSW5mb3JtYXRpb24gU3lzdGVtIHdpdGggQnVzaW5lc3MgbGF5ZXIsRGF0YSBBY2Nlc3MgbGF5ZXIuZGQCBQ8PFgIfAwUNQyMuTmV0LEFjY2Vzc2RkAgcPDxYCHwMFBDU1NThkZAIJDw8WAh8EBUJ+L1Byb2plY3QvU3R1ZGVudCBJbmZvcm1hdGlvbiBhbmQgVHJhY2tpbmcgU3lzdGVtLUVuZ2dSb29tLkNvbS56aXBkZAJ9D2QWAmYPZBYKAgEPDxYCHwMFGUxhbiBNZXNzYWdhbmdlciBpbiBWYi5OZXRkZAIDDw8WAh8DBTFTZW5kIFRleHQgTWVzc2FnZSBpbiBMYW4gd2l0aCBWYi5OZXQgSW1wbGVtZW50ZWQuZGQCBQ8PFgIfAwUGVmIuTmV0ZGQCBw8PFgIfAwUFMjE0ODBkZAIJDw8WAh8EBTJ+L1Byb2plY3QvTGFuIE1lc3NhbmdlciBpbiBWYi5OZXQtRW5nZ1Jvb20uQ29tLnJhcmRkAn4PZBYCZg9kFgoCAQ8PFgIfAwUnRmFzdCBEb3dubG9hZCBNYW5hZ2VyIFByb2plY3QgaW4gVmIuTmV0ZGQCAw8PFgIfAwVhRmFzdCBEb3dubG9hZCBtYW5hZ2VyIGltcGxlbWVudGVkIHdpdGggbmV3IFRDUC1JUCBQcm90b2NvbCB3aGljaCBvZmZlciBIaWdoIFBlcmZvcm1hbmNlIERvd25sb2FkLmRkAgUPDxYCHwMFBlZiLk5ldGRkAgcPDxYCHwMFBDk0MDRkZAIJDw8WAh8EBTR+L1Byb2plY3QvRG93bmxvYWRNYW5hZ2VyIGluIFZiLk5ldC1FbmdnUm9vbS5Db20uemlwZGQCfw9kFgJmD2QWCgIBDw8WAh8DBSRPbmxpbmUgRXhhbWluYXRpb24gU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBX1UaGlzIEFwcGxpY2F0aW9uIGlzIGRldmVsb3BlZCBpbiBhc3AubmV0IGZvciBFLUV4YW0uSXQgaGF2ZSBDb21wbGV0ZSBPbmxpbmUgRXhhbWluYXRpb24gUG9ydGZvbGlvIHdpdGggZHluYW1pYyBBZG1pbiBTZWN0aW9uLmRkAgUPDxYCHwMFEUFzcC5OZXQsQyMsTVMgU3FsZGQCBw8PFgIfAwUFMTAwOTRkZAIJDw8WAh8EBTR+L1Byb2plY3Qvb25saW5lIEV4YW1pbmF0aW9uIHN5c3RlbS1FbmdnUm9vbS5Db20uemlwZGQCgAEPZBYCZg9kFgoCAQ8PFgIfAwUaU01TIEFwcGxpY2F0aW9uIGluIEFzcC5OZXRkZAIDDw8WAh8DBRhTZW5kIGZyZWUgc21zIGluIEFzcC5uZXRkZAIFDw8WAh8DBRFBc3AuTmV0LEMjLE1TIFNxbGRkAgcPDxYCHwMFBTIwMjc4ZGQCCQ8PFgIfBAUcfi9Qcm9qZWN0L3Ntc2FwcGxpY2F0aW9uLnJhcmRkAoEBD2QWAmYPZBYKAgEPDxYCHwMFH0F1dG9ub21vdXMgU2VjdXJpdHkgR3VhcmQgUm9ib3RkZAIDDw8WAh8DBbQCVGhpcyBwcm9qZWN0IGludGVuZHMgdG8gYnVpbGQgYSB3b3JraW5nIHByb3RvdHlwZSBvZiBhIHNlbnRyeS9wYXRyb2wgcm9ib3QuIFRoZSByb2JvdCBpcyBjYXBhYmxlICBvZiAgcGF0cm9sbGluZyAgYW4gIGFyZWEgIHdpdGhvdXQgIGh1bWFuICBpbnRlcmFjdGlvbiAgd2hpbGUgIHByb3ZpZGluZyBmZWVkYmFjayAgYXMgIHRvICB0aGUgIHN0YXRlICBvZiAgaXRzICBzdXJyb3VuZGluZ3MuICBBbGwgIGluc3RydWN0aW9ucyB0byAgdGhlICByb2JvdCAgY2FuICBiZSBnaXZlbiAgcHJpb3IgIHRvICBpdHMgIGFjdHVhbCBhcHBsaWNhdGlvbi5kZAIFDw8WAh8DBSI4MDUxIE1pY3JvQ29udHJvbGxlciBCYXNlZCBQcm9qZWN0ZGQCBw8PFgIfAwUEMTIwOGRkAgkPDxYCHwQFLX4vUHJvamVjdC9hdXRvbm9tb3VzX3NlY3VyaXR5X2d1YXJkX3JvYm90LnppcGRkAoIBD2QWAmYPZBYKAgEPDxYCHwMFHzgwNTEgYmFzZWQgaG9tZSBTZWN1cml0eSBTeXN0ZW1kZAIDDw8WAh8DBZMDVGhlIHByaW1lIGNvbmNlcm4gb2YgdGhpcyBwcm9qZWN0IGlzIHRvIHByb3ZpZGUgdG90YWwgc2VjdXJpdHkuIFRoaXMgbWljcm9jb250cm9sbGVyIGJhc2VkIGhvbWUgc2VjdXJpdHkgd2l0aCBwYXNzd29yZCBkb29yIGxvY2sgc3lzdGVtIGZlYXR1cmUgY2FuIGFsc28gcGVyZm9ybSBkYXkgYW5kIG5pZ2h0IGRldGVjdGlvbiwgbGFzZXIgYmVhbSBtb25pdG9yaW5nIHN5c3RlbSBmb3Igd2luZG93cywgYW5kIG1hZ25ldGljIG1vbml0b3JpbmcgZm9yIGRvb3JzLiBBc2lkZSBvZiBwcm92aWRpbmcgdG90YWwgc2VjdXJpdHksIHRoaXMgcHJvamVjdCBhaW1zIHRvIHV0aWxpemUgdGhlIGhvbWVtYWRlIGNpcmN1aXRyeSBhbmQgYnVpbGQgYSBsb3cgY29zdCBpbnRlZ3JhdGVkIGhvbWUgc2VjdXJpdHkgc3lzdGVtLmRkAgUPDxYCHwMFIjgwNTEgTWljcm9Db250cm9sbGVyIEJhc2VkIFByb2plY3RkZAIHDw8WAh8DBQQxMjczZGQCCQ8PFgIfBAUifi9Qcm9qZWN0L2hvbWUtc2VjdXJpdHktc3lzdGVtLnppcGRkAoMBD2QWAmYPZBYKAgEPDxYCHwMFH0hvbWUgQXV0b21hdGlvbiBDb250cm9sIFN5c3RlbSBkZAIDDw8WAh8DBYQCVGVsbmV0IHNlcnZlciB0byBhY2Nlc3Mgb3VyIHNvZnR3YXJlIGZyb20gYW55d2hlcmUuSW50ZXJuZXQgTWVkaXVtIGlzIHVzZWQgdG8gY29udHJvbCBIb21lIEFwcGxpYW5jZXMgZnJvbSBhIHJlbW90ZSBQQy44MDUxIENvbnRyb2xsZXIgaXMgdXNlZCB0byBwZXJmb3JtIGNvbnRyb2wgZnVuY3Rpb24gc3VjaCBhcyBvbi1vZmYuVGVsbmV0IHVzZXMgVENQXElQIFByb3RvY29scyB1c2luZyBhIHNwZWNpZmljIHBvcnQgdG8gYWNjZXNzIHRoZSBzb2Z0d2FyZS5kZAIFDw8WAh8DBSI4MDUxIE1pY3JvQ29udHJvbGxlciBCYXNlZCBQcm9qZWN0ZGQCBw8PFgIfAwUEMTAwMWRkAgkPDxYCHwQFHH4vUHJvamVjdC9Ib21lQXV0b21hdGlvbi56aXBkZAKEAQ9kFgJmD2QWCgIBDw8WAh8DBRlSZWNydWl0bWVudCBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwXuAVRoaXMgUHJvamVjdCBpcyBhbiBpZGVhbCB3ZWItYmFzZWQgcmVjcnVpdG1lbnQgdG9vbCBmb3IgY29tcGFuaWVzIGFuZCBjby1vcC9pbnRlcm5zaGlwIHByb2dyYW1zLg0KDQpJdCBjb250YWlucyBtb2R1bGVzIGZvciBqb2IgcG9zdGluZ3MsIGFwcGxpY2F0aW9ucywgY29tcGFueSBhbmQgYXBwbGljYW50IGluZm9ybWF0aW9uLCBpbnRlcnZpZXcgc2lnbnVwLCBhbmQgYWR2YW5jZWQgcmVwb3J0aW5nL3NlYXJjaGluZy5kZAIFDw8WAh8DBQlQSFAsTVlTUUxkZAIHDw8WAh8DBQUyNTkyNGRkAgkPDxYCHwQFO34vUHJvamVjdC9SZWNydWl0bWVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBQSFAtRW5nZ1Jvb20ucmFyZGQChQEPZBYCZg9kFgoCAQ8PFgIfAwUgUHJvamVjdCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBQSFBkZAIDDw8WAh8DBewBVGhpcyBQcm9qZWN0IGFsbG93cyB1c2VyIHRvIGNyZWF0ZSBhbmQgZWRpdCBwcm9qZWN0IGRldGFpbHMgd2l0aCB3ZWItYmFzZWQgcHJvamVjdCBtYW5hZ2VtZW50IHNvZnR3YXJlLg0KQ3VzdG9taXplIHlvdXIgcHJvamVjdCBjYXRlZ29yaWVzIGFuZCB0aGUgcHJvamVjdCBzdGF0dXMgb3B0aW9ucyB0byB5b3VyIG5lZWRzLg0KU2V0dXAgYWRtaW4gYW5kIHJlZ3VsYXIgdXNlcnMgZm9yIG11bHRpcGxlIGdyb3Vwcy5kZAIFDw8WAh8DBQlQSFAsTVlTUUxkZAIHDw8WAh8DBQUxMDU2NWRkAgkPDxYCHwQFN34vUHJvamVjdC9Qcm9qZWN0IE1hbmFnZW1lbnQgU3lzdGVtIGluIFBIUC1FbmdnUm9vbS56aXBkZAKGAQ9kFgJmD2QWCgIBDw8WAh8DBSJXZWIgQmFzZWQgQ2xhaW1zIFByb2Nlc3NpbmcgU3lzdGVtZGQCAw8PFgIfAwWSAldlYiBCYXNlZCBDbGFpbXMgUHJvY2Vzc2luZyBTeXN0ZW0gYWxsb3dzIGl0cyB1c2VyIHRvIGZpbGwgdGhlIGNsYWltIGZvcm0gb25saW5lIGFuZCBzdWJtaXQgaXQuQXMgY2xhaW0gZm9ybSBpcyBzdWJtaXR0ZWQgb25saW5lIGF0IENsYWltIHByb2Nlc3NpbmcgRGVwYXJ0bWVudC5UaGUgZm9ybSBjaGVja2VkIGF1dG9tYXRpY2FsbHkgYnkgYSBwcm9ncmFtIGFuZCBjb21wdXRlIHRoZSBhbW91bnQgdGhhdCBzZXR0bGVkIHRvIHRoZSBlbXBsb3llZSBmb3IgdGhlIHRyZWF0bWVudC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ0NzEzZGQCCQ8PFgIfBAVEfi9Qcm9qZWN0L3dlYiBCYXNlZCBDbGFpbSBQcm9jZXNzaW5nIFByb2plY3QgaW4gQXNwLk5ldC1FbmdnUm9vbS5yYXJkZAKHAQ9kFgJmD2QWCgIBDw8WAh8DBSNNdWx0aXBsZSBTZWFyY2ggRW5naW5lIFJlc3VsdCBpbiBDI2RkAgMPDxYCHwMFX1RoaXMgYXBwbGljYXRpb24gcmVxdWVzdCBhIHF1ZXJ5IHRvIHRoZSBtdWx0aXBsZSBzZWFyY2ggZW5naW5lIGFuZCBnZXQgcmVzdWx0IG9uIHNpbmdsZSBzY3JlZW4uZGQCBQ8PFgIfAwUNQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBDQwMzNkZAIJDw8WAh8EBTl+L1Byb2plY3QvTXVsdGlwbGUgU2VhcmNoIEVuZ2luZSBBcHBsaWNhdGlvbi1FbmdnUm9vbS56aXBkZAKIAQ9kFgJmD2QWCgIBDw8WAh8DBSlTb2x2ZSBOZXd0b24gUG9seW5vbWlhbCBFcXVhdGlvbiBVc2luZyBDI2RkAgMPDxYCHwMFZU5ld3RvbiBQb2x5bm9taWFsIEVxdWF0aW9uIGNhbiBzb2x2ZSBlcXVhdGlvbiB1cHRvIDYgZGVncmVlLllvdSBjYW4gZXhwYW5kIGl0IGJ5IGRvaW5nIG1pbm9yIGNoYW5nZXMuZGQCBQ8PFgIfAwUNQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBDEyNDlkZAIJDw8WAh8EBRR+L1Byb2plY3QvTmV3dG9uLnppcGRkAokBD2QWAmYPZBYKAgEPDxYCHwMFFVhOQSBHYW1lIERldmVsb3BlbWVudGRkAgMPDxYCHwMFT1hOQSBHYW1lIGRldmVsb3AgdG8gbW92ZSBvYmplY3QgYnkgQXJyb3cga2V5IG9mIGtleWJvYXJkLnJlYWQgS2V5Ym9yZCBmcm9tIFhOQS5kZAIFDw8WAh8DBQdYTkEuTkVUZGQCBw8PFgIfAwUDNTcxZGQCCQ8PFgIfBAUjfi9Qcm9qZWN0L1hOQSBHYW1lIERldmVsb3BlbWVudC5yYXJkZAKKAQ9kFgJmD2QWCgIBDw8WAh8DBRFXZWIgQnJvd3NlciBJbiBDI2RkAgMPDxYCHwMFI1NpbXBsZSB3ZWIgQnJvd3NlciBkZXZlbG9wZWQgaW4gYyMuZGQCBQ8PFgIfAwUCQyNkZAIHDw8WAh8DBQQ0MzM2ZGQCCQ8PFgIfBAUrfi9Qcm9qZWN0L1dlYi1Ccm93c2VyIGluIEMjbmV0LUVuZ2dSb29tLnppcGRkAosBD2QWAmYPZBYKAgEPDxYCHwMFHlRleHQgVG8gU3BlZWNoIENvbnZlcnRlciBpbiBDI2RkAgMPDxYCHwMFRkFwcGxpY2F0aW9uIGNvbnZlcnQgeW91ciBUZXh0L0ZpbGUgaW50byBMaXN0ZW5hYmxlIGZvcm0gYnkgUmVhZGluZyBJdC5kZAIFDw8WAh8DBQ1DIy5OZXQsTVMgU1FMZGQCBw8PFgIfAwUENDYwNWRkAgkPDxYCHwQFOX4vUHJvamVjdC9UZXh0IHRvIFNwZWVjaCBDb252ZXJ0ZXIgaW4gQyMuTmV0LUVuZ2dSb29tLnppcGRkAowBD2QWAmYPZBYKAgEPDxYCHwMFFVBpenphIE9yZGVyaW5nIFN5c3RlbWRkAgMPDxYCHwMFUlBpenphIE9yZGVyaW5nIFN5c3RlbSBpcyBhIEJpbGxpbmcgQXBwbGljYXRpb24gZm9yIFBpenphIFNob3AgZGV2ZWxvcGVkIGluIGMjLk5ldC5kZAIFDw8WAh8DBQ1DIy5OZXQsTVMgU1FMZGQCBw8PFgIfAwUENTIyM2RkAgkPDxYCHwQFMn4vUHJvamVjdC9QaXp6YSBPcmRlcmluZyBTeXN0ZW0gaW4gRW5nZ1Jvb20tQyMuemlwZGQCjQEPZBYCZg9kFgoCAQ8PFgIfAwUkUGhhcm1hY3kgTWFuYWdlbWVudCBTeXN0ZW0gaW4gQyMuTmV0ZGQCAw8PFgIfAwWIAURlc2t0b3AgQXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIEMjLk5ldCB0byBhdXRvbWF0ZSB0aGUgb3BlcmF0aW9uIG9mIHBoYXJtYSBjb21wYW55IGxpa2UgU2FsZXMgTWFuYWdlbWVudCxNYXRlcmlhbCBhbmQgU3RvY2sgTWFuYWdlbWVudC5kZAIFDw8WAh8DBQ1DIy5OZXQsTVMgU1FMZGQCBw8PFgIfAwUENjAyNWRkAgkPDxYCHwQFO34vUHJvamVjdC9QaGFybWFjeSBNYW5hZ2VtZW50IFN5c3RlbSBpbiBDIy5OZXQtRW5nZ1Jvb20uemlwZGQCjgEPZBYCZg9kFgoCAQ8PFgIfAwUVR1BTIEludGVyZmFjaW5nIEluIEMjZGQCAw8PFgIfAwU8VGhpcyBQcm9qZWN0IERlbW9uc3RyYXRlIEhvdyB0byByZWFkIEdQUyBEZXZpY2UgdXNpbmcgQyMuTmV0ZGQCBQ8PFgIfAwUGQyMuTmV0ZGQCBw8PFgIfAwUEMzU1MWRkAgkPDxYCHwQFJn4vUHJvamVjdC9SRUFESU5HIEdQUyBERVZJQ0UgSU4gQyMuemlwZGQCjwEPZBYCZg9kFgoCAQ8PFgIfAwUOQVRNIFNpbXVsYXRpb25kZAIDDw8WAh8DBbYCVGhpcyBpcyBhIGJhc2ljIEFUTSBzaW11bGF0aW9uIGFuZCBpdCB3aWxsIGdpdmUgdGhlIGlkZWEgb24gaG93IHRyYW5zYWN0aW9uIHdlcmUgbWFkZSBieSBhIHJlYWwgQVRNLiBJdCBoYXMgYSBsb2dpbiBwYWdlLiBBbiBhY2NvdW50IG51bWJlciB3aWxsIHN1YnN0aXR1dGUgb3VyIEFUTSBjYXJkIGluIHRoaXMgc2l0dWF0aW9uLiBPbmNlIHlvdSBhcmUgbG9naW4sIHlvdSB3aWxsIGJlIHByZXNlbnRlZCBhIG1lbnUgdmFyaWVzIGZyb20gY2hlY2sgeW91ciBiYWxhbmNlLCBkZXBvc2l0LCB3aXRoZHJhd2FsIGFuZCBxdWljayB3aXRoZHJhd2FsLmRkAgUPDxYCHwMFDUMjLk5ldCxNUyBTUUxkZAIHDw8WAh8DBQQ0MzYwZGQCCQ8PFgIfBAU7fi9Qcm9qZWN0L0FUTSBNQUNISU5FIFBST0pFQ1QgSU4gQyNfU0lNVUxBVElPTi1FTkdHUk9PTS5yYXJkZAKQAQ9kFgJmD2QWCgIBDw8WAh8DBStBZHZhbmNlZCBQYXkgUm9sbCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwWhAVBheXJvbGwgU3lzdGVtIGlzIGEgd2luZG93IGJhc2VkIHNvbHV0aW9uIGZvciBzbWFsbCBDb21wYW55Lkl0IGluY2x1ZGVzIFNhbGFyeSBNYW5hZ2VtZW50LEVtcGxveWVlIE1hbmFnZW1lbnQsQXR0ZW5kYW5jZSBNYW5hZ2VtZW50LkZyZWUgVG8gRG93bmxvYWQgd2l0aCBSZXBvcnQuZGQCBQ8PFgIfAwULSmF2YSxPcmFjbGVkZAIHDw8WAh8DBQUxODIzMmRkAgkPDxYCHwQFNn4vUHJvamVjdC9hZHZhbmNlIFBheVJvbGwgTWFuYWdlbWVudC1KYXZhLUVuZ2dSb29tLnppcGRkApEBD2QWAmYPZBYKAgEPDxYCHwMFJFN0dWRlbnQgSW5mb3JtYXRpb24gU3lzdGVtIGluIFZiIDYuMGRkAgMPDxYCHwMFgwFzdHVkZW50IEluZm9ybWF0aW9uIHN5c3RlbSBwcm9qZWN0IGltcGxlbWVudCBEYXRhYmFzZSBjb25uZWN0aXZpdHkgd2l0aCBQSFAuTW9kdWxlcyBhcmU6UGVyc29uYWwgRGF0YSBvZiBTdHVkZW50LFJlc3VsdCxBdHRlbmRhbmNlLmRkAgUPDxYCHwMFDVZiIDYuMCxBY2Nlc3NkZAIHDw8WAh8DBQUyMzMwOWRkAgkPDxYCHwQFO34vUHJvamVjdC9TdHVkZW50IEluZm9yYW10aW9uIFN5c3RlbSBpbiBWYiA2LjAtRW5nZ1Jvb20uemlwZGQCkgEPZBYCZg9kFgoCAQ8PFgIfAwUkQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gaW4gVmIgNi4wZGQCAw8PFgIfAwXQAUl0IG1haW50YWluIHRoZSBUaWNrZXQgUmVzZXJ2YXRpb24tQ2FuY2VsIFRpY2tldC4gDQpUaGUgaW1wb3J0YW50IHJlYXNvbiBpcyB0byBtYWtlIHdvcmsgZWFzeS5ObyBuZWVkIHRvIHNlYXJjaCBhIEZsaWdodCByZWdpc3RlciBmb3IgZW50cnkgb3IgYW55IG90aGVyIHRyYW5zYWN0aW9uLlJlYWR5IHRvIFJ1biBQcm9qZWN0IHdpdGggUmVwb3J0IGluIFZCIDYuMC5kZAIFDw8WAh8DBQ1WYiA2LjAsQWNjZXNzZGQCBw8PFgIfAwUEODgzOGRkAgkPDxYCHwQFQ34vUHJvamVjdC9BaXJsaW5lIFJlc2VydmF0aW9uIFN5c3RlbSBQcm9qZWN0IGluIFZCIDYuMC1FbmdnUm9vbS5yYXJkZAKTAQ9kFgJmD2QWCgIBDw8WAh8DBSZBY2NvdW50aW5nIE1hbmFnZW1lbnQgU3lzdGVtIGluIFZiIDYuMGRkAgMPDxYCHwMFlQFBY2FkZW1pYyBQcm9qZWN0IGRldmVsb3BlZCAgaW4gVmIgNi4wIHRvIGF1dG9tYXRlIGFjY291bnQgb2YgSW5kaXZpZHVhbC9Db21wYW55LkFjY291bnQgYW5hbHlzaXMsUmVwb3J0IEdlbmVyYXRpb24gYW5kIG90aGVyIEZhY2lsaXR5IGlzIGltcGxlbWVudGVkLmRkAgUPDxYCHwMFDVZiIDYuMCxBY2Nlc3NkZAIHDw8WAh8DBQUxMDM0NmRkAgkPDxYCHwQFMn4vUHJvamVjdC9BY2NvdW50aW5nIE1ndCBTeXN0ZW0gaW4gVmItRW5nZ1Jvb20ucmFyZGQClAEPZBYCZg9kFgoCAQ8PFgIfAwUgVHJhdmVsbGluZyBBZ2VuY3kgUHJvamVjdCBpbiBDKytkZAIDDw8WAh8DBXRTaW1wbGUgR1VJIGJhc2VkIEFwcGxpY2F0aW9uIGRldmVsb3BlZCBhcyBhIG1pbm9yIHByb2plY3QgZm9yIE1DQSxCRS1JVCBzdHVkZW50IHRvIHN1Ym1pdCBpdCBhcyBhIHJlYWR5IHRvIHJ1biBjb2RlLmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDY1NzFkZAIJDw8WAh8EBTd+L1Byb2plY3QvVHJhdmVsbGluZyBBZ2VuY3kgUHJvamVjdCBpbiBDKystRW5nZ1Jvb20uemlwZGQClQEPZBYCZg9kFgoCAQ8PFgIfAwUhUmVzdGF1cmFudCBiaWxsaW5nIFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwV1U2ltcGxlIE1pbm9yIFByb2plY3QgRGV2ZWxvcGVkIGluIGMrKyB3aXRoIGdyYXBoaWNhbCBpbnRlcmZhY2UuQkUtSVQsQ0UsTUNBIHN0dWRlbnQgY2FuIHN1Ym1pdCBpdCBhcyBhIG1pbm9yIFByb2plY3QuZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENjQ4OGRkAgkPDxYCHwQFN34vUHJvamVjdC9SZXN0dXJhbnQgYmlsbGluZyBQcm9qZWN0IGluIEMrKy1FbmdnUm9vbS56aXBkZAKWAQ9kFgJmD2QWCgIBDw8WAh8DBRNPbmxpbmUgQWRkcmVzcyBCb29rZGQCAw8PFgIfAwVsT25saW5lIEFkZHJlc3MgYm9vayBtYWRlIGFzIGEgbWluaSBwcm9qZWN0IGluIEpTUCB0byBleHBsb3JlIGZlYXR1cmVzIG9mIEphdmEuVmVyeSBOaWNlIEdVSSBkZXNpZ25lZCBpbiBKU1AuZGQCBQ8PFgIfAwUPSlNQLEphdmEsT3JhY2xlZGQCBw8PFgIfAwUFMTEzOTNkZAIJDw8WAh8EBTF+L1Byb2plY3QvT25saW5lIEFkZHJlc3MgQm9vayBpbiBKU1AtRW5nZ1Jvb20uemlwZGQClwEPZBYCZg9kFgoCAQ8PFgIfAwUPRS1HcmFtUGFuY2hheWF0ZGQCAw8PFgIfAwV+RS1HcmFtUGFuY2hheWF0IGlzIGEgU29sdXRpb24gdG8gYXV0b21hdGUgZGFpbHkgcm91dGluZSBwcm9jZXNzIG9mIEdyYW0gUGFuY2hheWF0IHRvIEZhc3QgYW5kIEVhc3kgQ29tcHV0ZXJpemVkIHRhc2sgSGFuZGxpbmcuZGQCBQ8PFgIfAwUNVmIgNi4wLEFjY2Vzc2RkAgcPDxYCHwMFBDc0NTBkZAIJDw8WAh8EBR1+L1Byb2plY3QvRS1HcmFtUGFuY2hheWF0LnJhcmRkApgBD2QWAmYPZBYKAgEPDxYCHwMFKENlbnRyYWxpemVkIEFkbWlzc2lvbiBTeXN0ZW0gZm9yIENvbGxlZ2VkZAIDDw8WAh8DBf8CVGhpcyBzb2Z0d2FyZSBkZWFscyB3aXRoIHRoZSBDZW50cmFsaXplZCBBZG1pc3Npb24gU3lzdGVtIGZvciB0aGUgY29sbGVnZXMuIE1haW4gZmVhdHVyZXMgb2YgdGhpcyBzb2Z0d2FyZSBhcmUgYXMgdW5kZXIuDQoNCkFjY2VwdGluZyBkYXRhIGFib3V0IHRoZSBzdHVkZW50cyBmcm9tIHRoZWlyIGFkbWlzc2lvbiBmb3Jtcy4NCkdlbmVyYXRpbmcgdGhlIG1lcml0IGxpc3Qgb2YgdGhlIHN0dWRlbnRzLg0KUHJvdmlkaW5nIHRoZSBhZG1pc3Npb24gdGltZSBkZXRhaWxzLg0KR2l2aW5nIGFkbWlzc2lvbiB0byBzdHVkZW50cyBpbiB0aGUgY29sbGVnZXMuDQpVcGRhdGluZyB0aGUgc2VhdHMgYWNjb3JkaW5nIHRvIHRoZSBhZG1pc3Npb24gaW4gdmFyaW91cyBjb2xsZWdlcy5kZAIFDw8WAh8DBQ1WYiA2LjAsQWNjZXNzZGQCBw8PFgIfAwUEODgxNGRkAgkPDxYCHwQFKH4vUHJvamVjdC9DZW50cmFsaXplZEFkbWlzc2lvblN5c3RlbS5yYXJkZAKZAQ9kFgJmD2QWCgIBDw8WAh8DBSNQcm9qZWN0IEV2YWx1YXRvciBpbiBBc3AuTmV0IFJlcG9ydGRkAgMPDxYCHwMFwQRQUk9KRUNUIEVWQUxVQVRPUiBpcyBiZWluZyBkZXNpZ25lZCB0byBvdmVyY29tZSB0aGUgbW9zdCBvZiB0aGUgbWFudWFsIHByb2Nlc3NlcyB0aGF0IGlzIGdvaW5nIGluIGEgc29mdHdhcmUgZmlybS4gSXQgaXMgYSB3ZWIgYXBwbGljYXRpb24gdGhhdCBjYW4gc2ltcGxpZnkgdGhlIHRhc2sgb2YgdGhlIGFkbWluaXN0cmF0b3IsIHByb2plY3QgbWFuYWdlciwgcHJvamVjdCBsZWFkZXIsIGRldmVsb3BlciBhbmQgdGVzdGVyLiBUaGUgcHJvY2VzcyBvZiBhY2NlcHRpbmcgYSBwcm9qZWN0IGZyb20gYSBjbGllbnQsIGFzc2lnbmluZyB0aGlzIHByb2plY3QgdG8gYSBwcm9qZWN0IGxlYWRlciBpbiBzdWNoIGEgd2F5IHRoYXQgaGUgaXMgbm90IG92ZXJsb2FkZWQsIHRoZSB0YXNrIG9mIGRpdmlzaW9uIG9mIHRoZSBwcm9qZWN0IHRvIHZhcmlvdXMgZGV2ZWxvcGVycywgZGFpbHkgZXZhbHVhdGlvbiBvZiBwcm9qZWN0LCB3ZWVrbHkgcmVwb3J0IG9mIHN0YXR1cyBvZiBwcm9qZWN0LCB0ZXN0aW5nIGFuZCBpdHMgcmVwb3J0LCBhbGwgdGhlc2UgZnVuY3Rpb25zIHdhcyBtYWRlIGVhc3kgd2l0aCB0aGlzIHByb2plY3QuZGQCBQ8PFgIfAwUVQXNwLk5ldCxNUyBTcWwsQyMuTmV0ZGQCBw8PFgIfAwUENTgzNWRkAgkPDxYCHwQFMn4vUHJvamVjdC9Qcm9qZWN0LUV2YWx1YXRvci1hbi1BU1AtTmV0LVByb2plY3QuemlwZGQCmgEPZBYCZg9kFgoCAQ8PFgIfAwUjUHJvamVjdCBFdmFsdWF0b3IgaW4gQXNwLk5ldCBSZXBvcnRkZAIDDw8WAh8DBcEEUFJPSkVDVCBFVkFMVUFUT1IgaXMgYmVpbmcgZGVzaWduZWQgdG8gb3ZlcmNvbWUgdGhlIG1vc3Qgb2YgdGhlIG1hbnVhbCBwcm9jZXNzZXMgdGhhdCBpcyBnb2luZyBpbiBhIHNvZnR3YXJlIGZpcm0uIEl0IGlzIGEgd2ViIGFwcGxpY2F0aW9uIHRoYXQgY2FuIHNpbXBsaWZ5IHRoZSB0YXNrIG9mIHRoZSBhZG1pbmlzdHJhdG9yLCBwcm9qZWN0IG1hbmFnZXIsIHByb2plY3QgbGVhZGVyLCBkZXZlbG9wZXIgYW5kIHRlc3Rlci4gVGhlIHByb2Nlc3Mgb2YgYWNjZXB0aW5nIGEgcHJvamVjdCBmcm9tIGEgY2xpZW50LCBhc3NpZ25pbmcgdGhpcyBwcm9qZWN0IHRvIGEgcHJvamVjdCBsZWFkZXIgaW4gc3VjaCBhIHdheSB0aGF0IGhlIGlzIG5vdCBvdmVybG9hZGVkLCB0aGUgdGFzayBvZiBkaXZpc2lvbiBvZiB0aGUgcHJvamVjdCB0byB2YXJpb3VzIGRldmVsb3BlcnMsIGRhaWx5IGV2YWx1YXRpb24gb2YgcHJvamVjdCwgd2Vla2x5IHJlcG9ydCBvZiBzdGF0dXMgb2YgcHJvamVjdCwgdGVzdGluZyBhbmQgaXRzIHJlcG9ydCwgYWxsIHRoZXNlIGZ1bmN0aW9ucyB3YXMgbWFkZSBlYXN5IHdpdGggdGhpcyBwcm9qZWN0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDU4MzVkZAIJDw8WAh8EBTJ+L1Byb2plY3QvUHJvamVjdC1FdmFsdWF0b3ItYW4tQVNQLU5ldC1Qcm9qZWN0LnppcGRkApsBD2QWAmYPZBYKAgEPDxYCHwMFI09ubGluZSBWb3RpbmcgU3lzdGVtIFByb2plY3QgUmVwb3J0ZGQCAw8PFgIfAwXlA1RoZSBwcm9qZWN0ICJWb3RpbmcgU29mdHdhcmUiIGFpbXMgYXQgbWFraW5nIHRoZSB2b3RpbmcgcHJvY2VzcyBlYXN5IGluIGNvb3BlcmF0aXZlIHNvY2lldGllcy4gUHJlc2VudGx5IHZvdGluZyBpcyBwZXJmb3JtZWQgdXNpbmcgYmFsbG90IHBhcGVyIGFuZCB0aGUgY291bnRpbmcgaXMgZG9uZSBtYW51YWxseSwgaGVuY2UgaXQgY29uc3VtZXMgYSBsb3Qgb2YgdGltZS4gVGhlcmUgY2FuIGJlIHBvc3NpYmlsaXR5IG9mIGludmFsaWQgdm90ZXMuIEFsbCB0aGVzZSBtYWtlcyBlbGVjdGlvbiBhIHRlZGlvdXMgdGFzay4gSW4gb3VyIHByb3Bvc2VkIHN5c3RlbSB2b3RpbmcgYW5kIGNvdW50aW5nIGlzIGRvbmUgd2l0aCB0aGUgaGVscCBvZiBjb21wdXRlci4gSXQgc2F2ZXMgdGltZSwgYXZvaWQgZXJyb3IgaW4gY291bnRpbmcgYW5kIHRoZXJlIHdpbGwgYmUgbm8gaW52YWxpZCB2b3Rlcy4gSXQgbWFrZXMgdGhlIGVsZWN0aW9uIHByb2Nlc3MgZWFzeS4gZGQCBQ8PFgIfAwUVQXNwLk5ldCxNUyBTcWwsQyMuTmV0ZGQCBw8PFgIfAwUFMTA3MTdkZAIJDw8WAh8EBTR+L1Byb2plY3QvT25saW5lLXZvdGluZy1zeXN0ZW0tYS1BU1AuTmV0LVByb2plY3QuemlwZGQCnAEPZBYCZg9kFgoCAQ8PFgIfAwUYUGhhcm1hIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVSRGVza3RvcCBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gSmF2YSB0byBhdXRvbWF0ZSB0aGUgb3BlcmF0aW9uIG9mIHBoYXJtYSBjb21wYW55LmRkAgUPDxYCHwMFC0phdmEsT3JhY2xlZGQCBw8PFgIfAwUFMTE5MDNkZAIJDw8WAh8EBSd+L1Byb2plY3QvcGhhcm1hIG1hbmFnZW1lbnQgcHJvamVjdC56aXBkZAKdAQ9kFgJmD2QWCgIBDw8WAh8DBSFQYXlSb2xsIE1hbmFnZW1lbnQgU3lzdGVtIGluIEphdmFkZAIDDw8WAh8DBc4BUGF5cm9sbCBTeXN0ZW0gaXMgYSB3aW5kb3cgYmFzZWQgc29sdXRpb24gZm9yIHNtYWxsIENvbXBhbnkuSXQgaW5jbHVkZXMgU2FsYXJ5IE1hbmFnZW1lbnQsRW1wbG95ZWUgTWFuYWdlbWVudCxBdHRlbmRhbmNlIE1hbmFnZW1lbnQuQSBQcm9qZWN0IGlzIERldmVsb3BlZCBpbiBKYXZhIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBvb3AgY29uY2VwdHMgb2YgSmF2YS5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUENjcwNGRkAgkPDxYCHwQFN34vUHJvamVjdC9QYXlSb2xsIE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3QgaW4gSmF2YS56aXBkZAKeAQ9kFgJmD2QWCgIBDw8WAh8DBRtPbmxpbmUgTXVzaWMgTGlicmFyeSBpbiBKU1BkZAIDDw8WAh8DBXtQcm9qZWN0cyBpbXBsZW1lbnQgb25saW5lIG11c2ljIExpYnJhcnkgaW4gSlNQKEphdmEgU2VydmVyIFBhZ2VzKS5JbXBsZW1lbnRzIERhdGFiYXNlIGFuZCBTdG9yZSBDb21wbGV4IG11c2ljIGZpbGUgaW4gSmF2YS5kZAIFDw8WAh8DBQ9KU1AsSmF2YSxPcmFjbGVkZAIHDw8WAh8DBQUxMDczOWRkAgkPDxYCHwQFMX4vUHJvamVjdC9PbmxpbmUgTXVzaWMgUG9ydGFsIGluIEpTUC1FbmdnUm9vbS56aXBkZAKfAQ9kFgJmD2QWCgIBDw8WAh8DBR1GaWxlIFNlYXJjaGluZyBTeXN0ZW0gaW4gSkFWQWRkAgMPDxYCHwMFkQFFZmZpY2llbnQgRmlsZSBTZWFyY2hpbmcgYWxnb3JpdGhtIGlzIGltcGxlbWVudGVkIGluIEphdmEuSXQgaW1wbGVtZW50cyBtaW5pbXVtIGRlbGF5IGZpbGUgc2VhcmNoaW5nIGZhY2lsaXR5IHdpdGggb3B0aW1pemVkIHNlYXJjaGluZyBhbGdvcml0aG0uZGQCBQ8PFgIfAwUESkFWQWRkAgcPDxYCHwMFBTE4ODU4ZGQCCQ8PFgIfBAU1fi9Qcm9qZWN0L0ZpbGUgU2VhcmNoaW5nIFByb2plY3QgaW4gSmF2YS1FbmdnUm9vbS56aXBkZAKgAQ9kFgJmD2QWCgIBDw8WAh8DBSFTdHVkZW50IEluZm9ybWF0aW9uIFN5c3RlbSBpbiBQSFBkZAIDDw8WAh8DBYMBc3R1ZGVudCBJbmZvcm1hdGlvbiBzeXN0ZW0gcHJvamVjdCBpbXBsZW1lbnQgRGF0YWJhc2UgY29ubmVjdGl2aXR5IHdpdGggUEhQLk1vZHVsZXMgYXJlOlBlcnNvbmFsIERhdGEgb2YgU3R1ZGVudCxSZXN1bHQsQXR0ZW5kYW5jZS5kZAIFDw8WAh8DBQlQSFAsTVlTUUxkZAIHDw8WAh8DBQU0MDM1NmRkAgkPDxYCHwQFOH4vUHJvamVjdC9TdHVkZW50IEluZm9ybWF0aW9uIFN5c3RlbSBpbiBQSFBfRW5nZ1Jvb20uemlwZGQCoQEPZBYCZg9kFgoCAQ8PFgIfAwUeQ29sbGVnZSBMaWJyYXJ5IFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwVKTGlicmFyeSBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0IERldmVsb3BlZCB3aXRoIE9iamVjdCBPcmllbnRlZCBDb25jZXB0cy5kZAIFDw8WAh8DBQtKYXZhLE9yYWNsZWRkAgcPDxYCHwMFBTIwOTg0ZGQCCQ8PFgIfBAUcfi9Qcm9qZWN0L2NvbGxlZ2VsaWJyYXJ5LnppcGRkAqIBD2QWAmYPZBYKAgEPDxYCHwMFG09ubGluZSBNdXNpYyBMaWJyYXJ5IGluIFBIUGRkAgMPDxYCHwMFZ1Byb2plY3RzIGltcGxlbWVudCBvbmxpbmUgbXVzaWMgTGlicmFyeSBpbiBQSFAuSW1wbGVtZW50cyBEYXRhYmFzZSBhbmQgU3RvcmUgQ29tcGxleCBtdXNpYyBmaWxlIGluIFBIUC5kZAIFDw8WAh8DBQlQSFAsTVlTUUxkZAIHDw8WAh8DBQUxNzE3OGRkAgkPDxYCHwQFKX4vUHJvamVjdC9PbmxpbmUgbXVzaWMgTGlicmFyeSBpbiBQSFAuemlwZGQCowEPZBYCZg9kFgoCAQ8PFgIfAwUlT25saW5lIEhvdGVsIE1hbmFnZW1lbnQgU3lzdGVtIGluIFBIUGRkAgMPDxYCHwMFS29ubGluZSBIb3RlbCBTaXRlIERldmVsb3BlZCBpbiBQSFAuUmVhZHkgdG8gcnVuIGNvZGUgZm9yIGZpbmFsIHNlbSBzdHVkZW50LmRkAgUPDxYCHwMFCVBIUCxNWVNRTGRkAgcPDxYCHwMFBTE3NDM5ZGQCCQ8PFgIfBAUufi9Qcm9qZWN0L0hvdGVsIE1hbmFnZW1lbnQgSW4gUEhQIEVuZ2dSb29tLnppcGRkAqQBD2QWAmYPZBYKAgEPDxYCHwMFIUJhcmNvZGUgRW5hYmxlZCBBdHRlbmRhbmNlIFN5c3RlbWRkAgMPDxYCHwMFVmJhcmNvZGUgRW5hYmxlZCBBdHRlbmRhbmNlIFN5c3RlbSBpbiAuTmV0IHRvIGludGVyZmFjZSBFbGVjdHJvbmljIERldmljZXMgd2l0aCBDIy5OZXQuZGQCBQ8PFgIfAwUNQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBDQ0MjFkZAIJDw8WAh8EBTZ+L1Byb2plY3QvQmFyY29kZSBFbmFibGVkIEF0dGVuZGFuY2UgUmVjb3JkIFN5c3RlbS5yYXJkZAKlAQ9kFgJmD2QWCgIBDw8WAh8DBShPbmxpbmUgQ291cmllciBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwVNT25saW5lIFdlYnNpdGUgRGV2ZWxvcCBmb3IgQ291cmllciBDb21wYW5pZXMgdG8gQ29tcHV0ZXJpemUgdGhlaXIgb3BlcmF0aW9ucy5kZAIFDw8WAh8DBQtKYXZhLE9yYWNsZWRkAgcPDxYCHwMFBDkyNjVkZAIJDw8WAh8EBTd+L1Byb2plY3QvT25saW5lIENvdXJpb3VyIE1hbmFnZW1lbnQgU3lzdGVtIGluIEphdmEuemlwZGQCpgEPZBYCZg9kFgoCAQ8PFgIfAwUtU2FsZXMgYW5kIEludmVudG9yeSBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwW+AVRoaXMgUHJvamVjdCBBdXRvbWF0ZSBTYWxlcyBhbmQgSW52ZW50b3J5IE9wZXJhdGlvbnMgb2YgQ29tbWVyY2lhbCBGaXJtLkl0IGluY2x1ZGVzLFB1cmNoYXNlIE1hbmFnZW1lbnQsU3RvY2sgTWFuYWdlbWVudCxTYWxlcyBNYW5hZ2VtZW50IE1vZHVsZXMuUHJvamVjdCBhbHNvIEluY2x1ZGVzIG5pY2UgRGVzaWduZWQgUmVwb3J0cy5kZAIFDw8WAh8DBRxWYi5OZXQsTXlTcWwsQ3J5c3RhbCBSZXBvcnRzZGQCBw8PFgIfAwUFMjAyOTlkZAIJDw8WAh8EBTx+L1Byb2plY3QvU2FsZXMgYW5kIGludmVudG9yeSBNYW5hZ2VtZW50IFN5c3RlbSBFbmdnUm9vbS5yYXJkZAKnAQ9kFgJmD2QWCgIBDw8WAh8DBSpGYWNlYm9vayBsaWtlIFNvY2lhbCBOZXR3b3JraW5nIGluIEFzcC5uZXRkZAIDDw8WAh8DBWBTb2NpYWwgTmV0d29ya2luZyBpcyBhIGVtZXJnaW5nIHRyZW5kIE5vdy5UaGlzIFByb2plY3QgaW1wbGVtZW50ZWQgU29jaWFsIE5ldHdvcmtpbmcgaW4gQXNwLk5ldC5kZAIFDw8WAh8DBRNBc3AuTmV0LEMjLk5ldCxIVE1MZGQCBw8PFgIfAwUFMTg5NzBkZAIJDw8WAh8EBTl+L1Byb2plY3QvU29jaWFsIE5ldHdvcmtpbmcgc2l0ZXMgaW4gQXNwLk5ldCBFbmdnUm9vbS5yYXJkZAKoAQ9kFgJmD2QWCgIBDw8WAh8DBSBvbmxpbmUgRXhhbWluYXRpb24gU3lzdGVtIGluIFBIUGRkAgMPDxYCHwMFc1JlYWwgdGltZSBPbmxpbmUgRXhhbWluYXRpb24gV2Vic2l0ZSBkZXZlbG9wZWQgaW4gUEhQLkluc3RhbnQgcmVzdWx0LFJhbmRvbSBRdWVzdGlvbixFeGFtIFNlbGVjdGlvbiBpcyBpbXBsZW1lbnRlZC5kZAIFDw8WAh8DBQlQSFAsTVlTUUxkZAIHDw8WAh8DBQUyNzUwMGRkAgkPDxYCHwQFKX4vUHJvamVjdC9PbmxpbmUgRXhhbSBpbiBQSFAgRW5nZ1Jvb20uemlwZGQCqQEPZBYCZg9kFgoCAQ8PFgIfAwUdT25saW5lIEJhbmtpbmcgU3lzdGVtIFByb2plY3RkZAIDDw8WAh8DBWBOZXRiYW5raW5nIEZhY2lsaXR5aXMgVml0YWwgZWxlbWVudCBmb3IgYW55IEJhbmsuVGhpcyBQcm9qZWN0IGltcGxlbWVudCBOZXRCYW5raW5nIHdpdGggQXNwLk5ldC5kZAIFDw8WAh8DBRNBc3AuTmV0LEMjLk5ldCxIVE1MZGQCBw8PFgIfAwUENzMxMGRkAgkPDxYCHwQFIH4vUHJvamVjdC9OZXRCYW5raW5nRW5nZ1Jvb20ucmFyZGQCqgEPZBYCZg9kFgoCAQ8PFgIfAwUoT25saW5lIENvdXJpZXIgQ2FyZ28gTWFuYWdlbWVudCBQcm9qZWN0IGRkAgMPDxYCHwMFmgFPbmxpbmUgV2Vic2l0ZSBEZXZlbG9wIGZvciBDb3VyaWVyIGFuZCBDYXJnbyBDb21wYW5pZXMgdG8gaGFuZGxlIHRoZWlyIE9wZXJhdGlvbnMgUmVtb3RlbHkgZnJvbSBBbnl3aGVyZS5WZXJ5IG5pY2UgUHJvamVjdCBkZXZlbG9wZWQgd2l0aCBQcm9mZXNzaW9uYWxpc20uZGQCBQ8PFgIfAwUTQXNwLk5ldCxDIy5OZXQsSFRNTGRkAgcPDxYCHwMFBDU5MzFkZAIJDw8WAh8EBTF+L1Byb2plY3QvT05MSU5FIENPVVJJRVIgQU5EIENBUkdPIE1BTkFHRU1FTlQucmFyZGQCqwEPZBYCZg9kFgoCAQ8PFgIfAwUhQ29sbGVnZSBNYW5hZ21lbnQgU3lzdGVtIFByb2plY3QgZGQCAw8PFgIfAwVpVGhpcyBQcm9qZWN0IGluY2x1ZGVzIEFkbWlzc2lvbiBNb2R1bGVzLEZlZXMgQ29sbGVjdGlvbixBdHRlbmRhbmNlIGFuZCBUaW1lVGFibGUgTWFuYWdlbWVudCBmb3IgQ29sbGVnZXMuZGQCBQ8PFgIfAwUNVmIuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBTIyNjc2ZGQCCQ8PFgIfBAUkfi9Qcm9qZWN0L0NvbGxlZ2VNYW5hZ21lbnRTeXN0ZW0ucmFyZGQCrAEPZBYCZg9kFgoCAQ8PFgIfAwUiQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gUHJvamVjdGRkAgMPDxYCHwMFNEFpcmxpbmUgUmVzZXJ2YXRpb24gU3lzdGVtIFByb2plY3QgaXMgbWFkZSBpbiBWYi5uZXRkZAIFDw8WAh8DBQZWYi5OZXRkZAIHDw8WAh8DBQUyMjc4MmRkAgkPDxYCHwQFKH4vUHJvamVjdC9haXJsaW5lIHJlc2VydmF0aW9uIHN5c3RlbS5yYXJkZAKtAQ9kFgJmD2QWCgIBDw8WAh8DBSBUZWxlcGhvbmUgQmlsbGluZyBTeXN0ZW0gUHJvamVjdGRkAgMPDxYCHwMFJVRlbGVwaG9uZSBCaWxsaW5nIFN5c3RlbSBtYWRlIGluIEphdmFkZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUFMTg4NDFkZAIJDw8WAh8EBSZ+L1Byb2plY3QvVGVsZXBob25lIEJpbGxpbmcgU3lzdGVtLnppcGRkAq4BD2QWAmYPZBYKAgEPDxYCHwMFKUhvc3BpdGFsIE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwUtSG9zcGl0YWwgTWFuYWdlbWVudCBTeXN0ZW0gd2l0aCBPT1BTIENvbmNlcHQuZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENzg2MWRkAgkPDxYCHwQFPX4vUHJvamVjdC9ob3NwaXRhbCBtYW5hZ2VtZW50IFByb2plY3QgaW4gQ1BQIEVuZ2dSb29tLkNvbS56aXBkZAKvAQ9kFgJmD2QWCgIBDw8WAh8DBS1SYWlsd2F5IHJlc2VydmF0aW9uIFN5c3RlbSBQcm9qZWN0IGluIEFzcC5uZXRkZAIDDw8WAh8DBbwCVGhpcyBPbmxpbmUgU3lzdGVtIGlzIGJhc2ljYWxseSBjb25jZXJuIHdpdGggUmVzZXJ2YXRpb24gYW5kIGNhbmNlbGxhdGlvbiBvZiBSYWlsd2F5IFRpY2tldHMuVXNlciBvZiB0aGlzIHN5c3RlbSByZXF1aXJlIGEgUmVnaXN0cmF0aW9uLmFmdGVyIHJlZ2lzdHJhdGlvbiBvbmUgY2FuIGJvb2sgb3IgY2FuY2VsIHRpY2tldHMuYXV0b21hdGljIHNlYXQgYWxsb2NhdGlvbiBhbmQgc2VhdCBtYXRyaXggYXJlIG1haW50YWluZWQgYnkgc3lzdGVtLkFkbWluaXN0cmF0b3Igb2YgdGhpcyBzeXN0ZW0gY2FuIG1hbmFnZSBhbGwgdGhlIHRhc2sgZ2VuZXJhbGx5LmRkAgUPDxYCHwMFGkFzcC5OZXQsQyMuTmV0LEhUTUwsTVMgU3FsZGQCBw8PFgIfAwUENzYxOGRkAgkPDxYCHwQFPX4vUHJvamVjdC9SYWlsd2F5IFJlc2VydmF0aW9uIFN5c3R5ZW0gaW4gQXNwLUVuZ2dSb29tLkNvbS56aXBkZAKwAQ9kFgJmD2QWCgIBDw8WAh8DBSJSYWlsd2F5IHJlc2VydmF0aW9uIFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwU5RnVsbHkgQXV0b21hdGVkIFJhaWx3YXkgcmVzZXJ2YXRpb24gU3lzdGVtIG1hZGUgaW4gVmIgNi4wZGQCBQ8PFgIfAwUGVmIgNi4wZGQCBw8PFgIfAwUEODc0OWRkAgkPDxYCHwQFNX4vUHJvamVjdC9SYWlsd2F5IFJlc2VydmF0aW9uIFN5c3RlbS1Fbmdncm9vbS5jb20uemlwZGQCsQEPZBYCZg9kFgoCAQ8PFgIfAwUgQW5kcm9pZCBiYXNlZCBFLVRlbmRlcmluZyBTeXN0ZW1kZAIDDw8WAh8DBUlFLXRlbmRlcmluZyBpcyBhIGFuZHJvaWQgYmFzZWQgVGVuZGVyaW5nIFN5c3RlbSBmb3IgQW5kcm9pZCBNb2JpbGUgVXNlcnMuZGQCBQ8PFgIfAwUHQW5kcm9pZGRkAgcPDxYCHwMFBDE5MDlkZAIJDw8WAh8EBR1+L1Byb2plY3QvU21hcnQgVGVuZGVyaW5nLnppcGRkArIBD2QWAmYPZBYKAgEPDxYCHwMFKE9ubGluZSBVc2UgRmVlZCB1c2luZyBSU1MgaW4gUEhQIFByb2plY3RkZAIDDw8WAh8DBUBUaGlzIHByb2plY3QgaXMgYSBzaW1wbGUgZXhhbXBsZSBvZiBob3cgdG8gdXNlIFJTUyBGZWVkIGluIFBIUCAuZGQCBQ8PFgIfAwUJUEhQIE1ZU1FMZGQCBw8PFgIfAwUENzI2MmRkAgkPDxYCHwQFGH4vUHJvamVjdC9OZXdzRmVlZGVyLnppcGRkArMBD2QWAmYPZBYKAgEPDxYCHwMFGVRyYXZlbGxpbmcgQWdlbmN5IFByb2plY3RkZAIDDw8WAh8DBSNUcmF2ZWxsaW5nIEFnZW5jeSBwcm9qZWN0IG1hZGUgaW4gQ2RkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDgyNDZkZAIJDw8WAh8EBR9+L1Byb2plY3QvVHJhdmVsbGluZyBBZ2VuY3kuemlwZGQCtAEPZBYCZg9kFgoCAQ8PFgIfAwUaUmVzdGF1cmFudCBiaWxsaW5nIFByb2plY3RkZAIDDw8WAh8DBSRSZXN0YXVyYW50IGJpbGxpbmcgUHJvamVjdCBtYWRlIGluIENkZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ0ODAzZGQCCQ8PFgIfBAUefi9Qcm9qZWN0L1Jlc3R1cmFudGJpbGxpbmcuemlwZGQCtQEPZBYCZg9kFgoCAQ8PFgIfAwUbVGVsZXBob25lIERpcmVjdG9yeSBQcm9qZWN0ZGQCAw8PFgIfAwUpVGVsZXBob25lIERpcmVjdG9yeSBQcm9qZWN0IG1hZGUgaW4gQy9DKytkZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ1NzM2ZGQCCQ8PFgIfBAUhfi9Qcm9qZWN0L1RlbGVwaG9uZSBEaXJlY3RvcnkucmFyZGQCtgEPZBYCZg9kFgoCAQ8PFgIfAwUhU291cmNlIENvZGUgRm9yIFRpYyBUYWMgVG9lIEdhbWUgZGQCAw8PFgIfAwUlU291cmNlIENvZGUgRm9yIFRpYyBUYWMgVG9lIEdhbWUgaW4gQ2RkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDQ4ODlkZAIJDw8WAh8EBRl+L1Byb2plY3QvVGljIFRhYyBUb2UucmFyZGQCtwEPZBYCZg9kFgoCAQ8PFgIfAwUkVHJhZmZpYyBMaWdodCBJbXBsZW1lbnRhdGlvbiBQcm9qZWN0ZGQCAw8PFgIfAwUyVHJhZmZpYyBMaWdodCBJbXBsZW1lbnRhdGlvbiBQcm9qZWN0IG1hZGUgaW4gQy9DKytkZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQUxMDE2MGRkAgkPDxYCHwQFKn4vUHJvamVjdC90cmFmZmljIGxpZ2h0IGltcGxlbWVudGF0aW9uLnJhcmRkArgBD2QWAmYPZBYKAgEPDxYCHwMFGVRyYXZlbGxpbmcgQWdlbmN5IFByb2plY3RkZAIDDw8WAh8DBSdUcmF2ZWxsaW5nIEFnZW5jeSBQcm9qZWN0IG1hZGUgaW4gQy9DKytkZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ4MjQ2ZGQCCQ8PFgIfBAUffi9Qcm9qZWN0L1RyYXZlbGxpbmcgQWdlbmN5LnppcGRkArkBD2QWAmYPZBYKAgEPDxYCHwMFIUxJQlJBUlkgTUFOQUdFTUVOVCBTWVNURU0gUFJPSkVDVGRkAgMPDxYCHwMFGlRoaXMgUHJvamVjdCBNYWRlIGluIEMvQysrZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENjQzNGRkAgkPDxYCHwQFM34vUHJvamVjdC9MSUJSQVJZLU1BTkFHRU1FTlQtU1lTVEVNLUEtQy1QUk9KRUNULnppcGRkAroBD2QWAmYPZBYKAgEPDxYCHwMFEk9ubGluZSBFeGFtIFN5c3RlbWRkAgMPDxYCHwMFdFdlYiBiYXNlZCBhcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gUEhQIGFuZCBNeVNxbCB3aXRoIHJlYWx0aW1lIHNjZW5hcmlvLlRoaXMgUHJvamVjdCBhbHNvIGltcGxlbWVudCBmdW5jdGlvbiBpbiBwaHAuZGQCBQ8PFgIfAwUJUEhQLE1ZU1FMZGQCBw8PFgIfAwUFMjM3MzBkZAIJDw8WAh8EBR1+L1Byb2plY3Qvb25saW5lX2V4YW1fcGhwLnppcGRkArsBD2QWAmYPZBYKAgEPDxYCHwMFIE9ubGluZSBDb3VyaWVyIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVwVGhpcyBpcyBhIHdlYiBhcHBsaWNhdGlvbiBkZXZlbG9wZWQgd2l0aCBKU1AuSXQgZXhwbG9yZSBmdWxsIGZlYXR1cmVzIG9mIEphdmEuUmVhZHkgdG8gU3VibWl0IGZpbmFsIHNlbSBQcm9qZWN0LmRkAgUPDxYCHwMFD0phdmEsSlNQLE9yYWNsZWRkAgcPDxYCHwMFBDgxMTFkZAIJDw8WAh8EBS9+L1Byb2plY3QvT25saW5lIENvdXJpb3VyIE1hbmFnZW1lbnQgU3lzdGVtLnppcGRkArwBD2QWAmYPZBYKAgEPDxYCHwMFJUVsZWN0cm9uaWMgU2hvcHBpbmcgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBXxQcm9qZWN0IERldmVsb3BlZCBpbiBWYi5OZXQgd2l0aCBmb2xsb3dpbmcgU29mdHdhcmUgRW5naW5lZXJpbmcgUGFyYWRpZ20uUmVhZHkgdG8gc3VibWl0IHByb2plY3QgRWxlY3Ryb25pYyBTaG9wIE1hbmFnZW1lbnQuZGQCBQ8PFgIfAwUMVmIuTmV0LEFjZXNzZGQCBw8PFgIfAwUFMTU0NTJkZAIJDw8WAh8EBSx+L1Byb2plY3QvRWxlY3Ryb25pY1Nob3BNYW5hZ2VtZW50U3lzdGVtLnJhcmRkAr0BD2QWAmYPZBYKAgEPDxYCHwMFGVBheXJvbGwgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBW5XaW5kb3dzIEFwcGxpY2F0aW9uIGRldmVsb3BlZCBhcyBhIGFjYWRlbWljIHByb2plY3QgaW4gVkIuTmV0LkNvbXBsZXRlIHByb2plY3Qgd2l0aCBzaW1wbGUgY29kaW5nIGFuZCByZXBvcnRzLmRkAgUPDxYCHwMFDFZiLk5ldCxBY2Vzc2RkAgcPDxYCHwMFBTE1NDQ1ZGQCCQ8PFgIfBAUlfi9Qcm9qZWN0L0VtcGxveWVlUGF5cm9sbGFuZExlYXZlLnppcGRkAr4BD2QWAmYPZBYKAgEPDxYCHwMFF0xlYXZlIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVAQWNhZGVtaWMgUHJvamVjdCBtYWRlIGluIFZiLk5ldCBmb3IgYXV0b21hdGluZyBwcm9jZXNzIG9mIExlYXZlLmRkAgUPDxYCHwMFDFZiLk5ldCxBY2Vzc2RkAgcPDxYCHwMFBTEwNjQ0ZGQCCQ8PFgIfBAUlfi9Qcm9qZWN0L0xlYXZlIE1hbmFnZW1lbnQgU3lzdGVtLnJhcmRkAr8BD2QWAmYPZBYKAgEPDxYCHwMFI0luc3RpdHV0ZSBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwU5VGhpcyBpcyBhIFdpbmRvd3MgQXBwbGljYXRpb24gbWFkZSBhcyBhIGFjYWRlbWljIHByb2plY3QuZGQCBQ8PFgIfAwUbViBCIDYuMCxWaXN1YWwgQmFzaWMsQWNjZXNzZGQCBw8PFgIfAwUEMTcwNGRkAgkPDxYCHwQFMX4vUHJvamVjdC9JbnN0aXR1dGUgTWFuYWdlbWVudCBTeXN0ZW0gUHJvamVjdC5yYXJkZALAAQ9kFgJmD2QWCgIBDw8WAh8DBQ9BdWN0aW9uIFdlYnNpdGVkZAIDDw8WAh8DBU5BdWN0aW9uIFdlYnNpdGUgTWFkZSBpbiBBc3AuTmV0IC5UaGlzIFdlYnNpdGUgTWFkZSBCeSBOYWl0aWsgU2lyKFNTUEMsQ29sbGVnZSlkZAIFDw8WAh8DBQdBU1AuTmV0ZGQCBw8PFgIfAwUENjU0MGRkAgkPDxYCHwQFGn4vUHJvamVjdC9hdWN0aW9uX2hvbGkucmFyZGQCwQEPZBYCZg9kFgoCAQ8PFgIfAwUWQ3JpbWUgUmVwb3J0aW5nIFN5c3RlbWRkAgMPDxYCHwMFJUNyaW1lIFJlcG9ydGluZyBTeXN0ZW0gUHJvamVjdCBJbiBQSFBkZAIFDw8WAh8DBQNQSFBkZAIHDw8WAh8DBQUxNjcxNmRkAgkPDxYCHwQFJH4vUHJvamVjdC9DcmltZSBSZXBvcnRpbmcgU3lzdGVtLnJhcmRkAsIBD2QWAmYPZBYKAgEPDxYCHwMFJU9ubGluZSBFbXBsb3llZSBSZWdpc3RyYXRpb24gIFByb2plY3RkZAIDDw8WAh8DBTdPbmxpbmUgRW1wbG95ZWUgUmVnaXN0cmF0aW9uICBQcm9qZWN0ICBtYWRlIGluIEFzcC5uZXQgZGQCBQ8PFgIfAwUHQVNQLk5ldGRkAgcPDxYCHwMFBDc0NTVkZAIJDw8WAh8EBR5+L1Byb2plY3QvRW1wbG95aWVlIGVudGVyeS5yYXJkZALDAQ9kFgJmD2QWCgIBDw8WAh8DBRZtb2JpbGUgYmFua2luZyBQcm9qZWN0ZGQCAw8PFgIfAwXqAW1vYmlsZSBiYW5raW5nIGlzIGJlY29taW5nIG1vcmUgYW5kIG1vcmUgcG9wdWxhciBub3cudGhpcyBhcHBsaWNhdGlvbiBpcyBkZXZlbG9wZWQgaW4gamF2YSB0byBwcm92aWRlIGEgYmFuayBvbiBtb2JpbGUubW9iaWxlIGJhbmtpbmcgYWxsb3dzIHVzZXIgdG8gdmlldyB0aGVpciBiYWxhbmNlLHRyYW5zYWN0aW9uIGFuZCB0cmFuc2ZlciBtb25leS5JdCBwcm92aWRlcyBhIGVhc2Ugb2YgdXNlIGZvciB1c2VyLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQUyMzEyNWRkAgkPDxYCHwQFOH4vUHJvamVjdC9tb2JpbGUtYmFua2luZy1wcm9qZWN0LXNvdXJjZS1jb2RlLWluLWphdmEuemlwZGQCxAEPZBYCZg9kFgoCAQ8PFgIfAwUiVGV4dCBUbyBTcGVlY2ggY29udmVydCBpbiBBbmRyb2lkIGRkAgMPDxYCHwMFNHRoaXMgaXMgc2ltcGxlIGFwcGxpY2F0aW9uIGZvciBiZWdpbm5lcnMgaW4gYW5kcm9pZCBkZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUEMjEyOWRkAgkPDxYCHwQFKH4vUHJvamVjdC9BbmRyb2lkVGV4dFRvU3BlZWNoUHJvamVjdC5yYXJkZALFAQ9kFgJmD2QWCgIBDw8WAh8DBQxTdG9jayBNYXJrZXRkZAIDDw8WAh8DBWFUaGlzIGlzIFdpbmRvd3MgQmFzZSBhcHBsaWNhdGlvbi4gSW4gUmhpcyBQcm9qZWN0IFUgQ2FuIFNlZSBMaXZlIFJhdGUgT2YgU2hhcmUgLCBhZGQgdXIgbGlzdCwgZXRjZGQCBQ8PFgIfAwUGQyMuTmV0ZGQCBw8PFgIfAwUEMjY2OWRkAgkPDxYCHwQFFn4vUHJvamVjdC9TdG9ja0JhZy5yYXJkZALGAQ9kFgJmD2QWCgIBDw8WAh8DBRVLYXVuIEJhbmVnYSBDcm9yZXBhdGlkZAIDDw8WAh8DBSdUaGlzIFByb2plY3QgSXMgTWFkZSBpbiBBc3AubmV0IHdpdGggQyNkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEODQ1NmRkAgkPDxYCHwQFFn4vUHJvamVjdC9XZWJTaXRlMS5yYXJkZALHAQ9kFgJmD2QWCgIBDw8WAh8DBSVTYWxlcyBhbmQgSW52ZW50b3J5IE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVaU2FsZXMgYW5kIEludmVudG9yeSBNYW5hZ2VtZW50IFN5c3RlbSBkZXZlbG9wZWQgaW4gRG90bmV0IHRvIGV4cGxvcmUgcG93ZXIgb2YgR1VJIGFuZCBPT1AuZGQCBQ8PFgIfAwUGQyMuTmV0ZGQCBw8PFgIfAwUENDkxN2RkAgkPDxYCHwQFQX4vUHJvamVjdC9zYWxlcy1hbmQtaW52ZW50b3J5LW1hbmFnZW1lbnQtc3lzdGVtLXByb2plY3QtaW4tdmIuemlwZGQCyAEPZBYCZg9kFgoCAQ8PFgIfAwUbT25saW5lIE1vYmlsZSBTaG9wcGluZyBjYXJ0ZGQCAw8PFgIfAwU3QSBwcm9qZWN0IG1hZGUgaW4gYXNwLm5ldCB0byBpbXBsZW1lbnQgb25saW5lIHNob3BwaW5nLmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQ4MDE4ZGQCCQ8PFgIfBAU4fi9Qcm9qZWN0L09OTElORS1NT0JJTEUtUEhPTkUtU0hPUC1BLUFTUC5ORVQtUFJPSkVDVC56aXBkZALJAQ9kFgJmD2QWCgIBDw8WAh8DBQpUZWNoIE1hcnQgZGQCAw8PFgIfAwU0QSBwcm9qZWN0IG1hZGUgaW4gamF2YSBmb3IgY29ubmVjdGluZyB3aXRoIERhdGFiYXNlLmRkAgUPDxYCHwMFBUphdmEgZGQCBw8PFgIfAwUFMTgyMDBkZAIJDw8WAh8EBRZ+L1Byb2plY3QvVGVjaE1hcnQuemlwZGQCygEPZBYCZg9kFgoCAQ8PFgIfAwUXRGFpcnkgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBeIBVGhpcyBpcyBhIERhaXJ5IE1hbmFnZW1lbnQgU3lzdGVtIHByb2plY3QgZGV2ZWxvcGVkIGluIGMjLm5ldC5UaGlzIHdpbmRvd3MgYmFzZWQgcHJvamVjdCBkZWFsIHdpdGggbWFpbnRhaW5pbmcgcmVjb3JkIG9mIGNvbGxlY3Rpb24gb2YgTWlsayxBY2NvdW50aW5nIG9mIG1pbGssU3RvY2sgbWFuYWdlbWVudCBhbmQgb3RoZXIgdmFyaW91cyBpbnZlbnRvcnkgdGFzayByZWxhdGVkIHRvIERhaXJ5LmRkAgUPDxYCHwMFBkMjLk5ldGRkAgcPDxYCHwMFBDM5ODFkZAIJDw8WAh8EBSV+L1Byb2plY3QvREFJUlkgTUFOQUdFTUVOVCBTWVNURU0ucmFyZGQCywEPZBYCZg9kFgoCAQ8PFgIfAwUVS2F1biBCYW5lZ2EgQ3JvcmVwYXRpZGQCAw8PFgIfAwVAVGhpcyBpcyBhIHNtYWxsIHByb2plY3QgdG8gc2hvdyBhIGdyYXBoaWNhbCBwb3dlciBvZiBDKysgTGlicmFyeWRkAgUPDxYCHwMFBUMvQysrZGQCBw8PFgIfAwUENjYzMmRkAgkPDxYCHwQFIn4vUHJvamVjdC9rYXVuX2JhbmVnYV9hcmFicGF0aS56aXBkZALMAQ9kFgJmD2QWCgIBDw8WAh8DBRxFLUJpbGxpbmcgYW5kIEludm9pY2UgU3lzdGVtZGQCAw8PFgIfAwVGZWJpbGxpbmcgYW5kIGludm9pY2Ugc3lzdGVtIGlzIGEgbGl2ZSBwcm9qZWN0IHdyaXR0ZW4gaW4gdmlzdWFsIGJhc2ljLmRkAgUPDxYCHwMFBlZiLk5ldGRkAgcPDxYCHwMFBTE0MDc3ZGQCCQ8PFgIfBAUpfi9Qcm9qZWN0L2ViaWxsaW5nLWFuZC1pbnZvaWNlLXN5c3RlbS56aXBkZALNAQ9kFgJmD2QWCgIBDw8WAh8DBRRLaW9zayBDb250cm9sIFN5c3RlbWRkAgMPDxYCHwMFtAFLaW9zayBNYW5hZ2VtZW50IFN5c3RlbSBjYW4gYmUgdXNlZCBpbiBSZXNlcnZhdGlvbiBDZW50ZXJzLiBIZXJlIHdlIHRha2UgS1NSVEMgUmFpbHdheSwgQWlybGluZSBhbmQgSG90ZWwgcmVzZXJ2YXRpb24gYXMgb3VyIGFwcGxpY2F0aW9uLiBUaGUgYXBwbGljYXRpb24gd2lsbCBiZSBkb25lIHVzaW5nIEMjLk5ldC5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMzQ0M2RkAgkPDxYCHwQFIn4vUHJvamVjdC9LaW9zayBDb250cm9sIFN5c3RlbS56aXBkZALOAQ9kFgJmD2QWCgIBDw8WAh8DBRBPbmxpbmUgSGVscCBEZXNrZGQCAw8PFgIfAwWJAyBUaGlzIGlzIGFuIEludHJhbmV0IGJhc2VkIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIHRocm91Z2hvdXQgdGhlIGNhbXB1cy4gVGhpcyBpcyBvbmUgaW50ZWdyYXRlZCBzeXN0ZW0gdGhhdCBjb3ZlcnMgZGlmZmVyZW50IGtpbmRzIG9mIGZhY2lsaXRpZXMgbGlrZSBjbGFzcy1yb29tcywgbGFicywgaG9zdGVscywgbWVzcywgY2FudGVlbiwgZ3ltbmFzaXVtLCBjb21wdXRlciBjZW50ZXIsIGZhY3VsdHkgY2x1YiBldGMuIFJlZ2lzdGVyZWQgdXNlcnMgKHN0dWRlbnRzLCBmYWN1bHR5LCBsYWItYXNzaXN0YW50cyBhbmQgb3RoZXJzKSB3aWxsIGJlIGFibGUgdG8gbG9nIGluIGEgcmVxdWVzdCBmb3Igc2VydmljZSBmb3IgYW55IG9mIHRoZSBzdXBwb3J0ZWQgZmFjaWxpdGllLmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQzNjE1ZGQCCQ8PFgIfBAUefi9Qcm9qZWN0L09ubGluZSBIZWxwIERlc2sucmFyZGQCzwEPZBYCZg9kFgoCAQ8PFgIfAwUdT25saW5lIFNvY2lhbCBOZXR3b3JraW5nIFNpdGVkZAIDDw8WAh8DBWVTb2NpYWwgTmV0d29ya2luZyBTaXRlLERldmVsb3BlZCBhcyBhIGFjYWRlbWljIHByb2plY3RzIGZvciBCQ0EsTUNBLEJFLEJURUNILEJTQyhJVCksRGlwbG9tYSBTdHVkZW50LmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQ2NzQ3ZGQCCQ8PFgIfBAUrfi9Qcm9qZWN0L09ubGluZSBTb2NpYWwgTmV0d29ya2luZyBTaXRlLnJhcmRkAtABD2QWAmYPZBYKAgEPDxYCHwMFC09ubGluZSBFeGFtZGQCAw8PFgIfAwWpAVRoaXMgV2ViIEFwcGxpY2F0aW9uIHByb3ZpZGVzIGZhY2lsaXR5IHRvIGNvbmR1Y3Qgb25saW5lIGV4YW1pbmF0aW9uLmFsbG93cyBudW1iZXIgb2Ygc3R1ZGVudHMgdG8gZ2l2ZSB0aGUgZXhhbSBhdCBhIHRpbWUgYW5kIGRpc3BsYXlzIHRoZSByZXN1bHRzIGFzIHRoZSB0ZXN0IGdldHMgb3Zlci5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUENTUwMmRkAgkPDxYCHwQFGX4vUHJvamVjdC9PbmxpbmUgRXhhbS5yYXJkZALRAQ9kFgJmD2QWCgIBDw8WAh8DBSRPbmxpbmUgRW1wbG95ZWUgUmVnaXN0cmF0aW9uIFN5c3RlbS5kZAIDDw8WAh8DBX1FSVMgaXMgYWNhZGVtaWMgcHJvamVjdCB3aGljaCBpbmNsdWRlIE9ubGluZSBFbXBsb3llZSBSZWdpc3RyYXRpb24sQXR0ZW5kYW5jZSxMZWF2ZSBNYW5hZ2VtZW50LEhvbGlkYXkgYW5kIFNhbGFyeSBNYW5hZ2VtZW50LmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQ0Mjc0ZGQCCQ8PFgIfBAUxfi9Qcm9qZWN0L09ubGluZSBFbXBsb3llZSBSZWdpc3RyYXRpb24gU3lzdGVtLnJhcmRkAtIBD2QWAmYPZBYKAgEPDxYCHwMFFU9ubGluZSBUcmFkaW5nIFN5c3RlbWRkAgMPDxYCHwMFhAEiT25saW5lIFRyYWRpbmcgU3lzdGVtIiBJdCBjb3ZlcnMgdGhlIGZvbGxvd2luZyB0b3BpY3M6IENsaWVudCBHYXRld2F5IFRyYWRpbmcgRW5naW5lIE1hcmtldCBEYXRhIFN5c3RlbSBBdWRpdCBSZXF1aXJlbWVudHMgU3VtbWFyeS5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMjQzOGRkAgkPDxYCHwQFHH4vUHJvamVjdC9PbmxpbmUgVHJhZGluZy5yYXJkZALTAQ9kFgJmD2QWCgIBDw8WAh8DBR9PbmxpbmUgVHJhdmVsaW5nIFRpY2tldCBCb29raW5nZGQCAw8PFgIfAwXQAlVzZWZ1bCBmb3IgU3R1ZGVudHMsIEZyZXNoZXJzIGFuZCBIb2JiaWVzdCB0byBnYWluIGhhbmQtb24gcHJvamVjdCBleHBlcmllbmNlLiAgVGhlc2UgcHJvamVjdHMgY2FuIGFsc28gYmUgdXNlZCBhcyBBY2FkZW1pYyBQcm9qZWN0cyBvZiBCQ0EsTUNBLEIuU2MsTS5TYyxCLkUgc3R1ZGVudHMgIFByb2plY3QgQXZhaWxhYmxlIGluIDogVmlzdWFsIEJhc2ljIDYuMCwgVmlzdWFsIEJhc2ljIC5uZXQsIFZpc3VhbCBCYXNpYyAyMDA1IDIwMDggICBBU1AsIEFTUC5uZXQsIE1TIEFjY2VzcywgU3FsIFNlcnZlciwgT3JhY2xlIHBsZWFzZSBjaGVjayBvdXQgbGlzdCBmb3IgbW9yZSBkZXRhaWxzLmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQzNjEyZGQCCQ8PFgIfBAUtfi9Qcm9qZWN0L09ubGluZSBUcmF2ZWxpbmcgVGlja2V0IEJvb2tpbmcucmFyZGQC1AEPZBYCZg9kFgoCAQ8PFgIfAwUOUGF5cm9sbCBTeXN0ZW1kZAIDDw8WAh8DBaABUGF5cm9sbCBTeXN0ZW0gaXMgYSB3aW5kb3cgYmFzZWQgc29sdXRpb24gZm9yIHNtYWxsIENvbXBhbnkuSXQgaW5jbHVkZXMgU2FsYXJ5IE1hbmFnZW1lbnQsRW1wbG95ZWUgTWFuYWdlbWVudCxBdHRlbmRhbmNlIE1hbmFnZW1lbnQuRnJlZSBUbyBEb3dubG9hZCB3aXRoIFJlcG9ydGRkAgUPDxYCHwMFBkMjLk5ldGRkAgcPDxYCHwMFBDQ2MjJkZAIJDw8WAh8EBRx+L1Byb2plY3QvUGF5cm9sbCBTeXN0ZW0ucmFyZGQC1QEPZBYCZg9kFgoCAQ8PFgIfAwUgT25saW5lIExpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBZEBT25saW5lIExpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW0gaXMgYSB3ZWIgQXBwbGljYXRpb24gd2hpY2ggaW5jbHVkZSBTdHVkZW50IE1hbmFnZW1lbnQsQXV0b21hdGFkZSBSZW5ld2FsIFByb2Nlc3MsUHVyY2hhc2UgbWFuYWdlbWVudCBpcyBpbmNsdWRlZGRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQ1NzcxZGQCCQ8PFgIfBAUnfi9Qcm9qZWN0L09ubGluZSBMaWJyYXJ5IE1hbmFnZW1lbnQucmFyZGQC1gEPZBYCZg9kFgoCAQ8PFgIfAwUXSG90ZWwgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBW9UaGlzIGlzIGEgd2luZG93IGJhc2VkIGFwcGxpY2F0aW9uLkl0IGluY2x1ZGVzIE9yZGVyIHN1Ym1pc3Npb24sQmlsbCBHZW5lcmF0aW9uIGFuZCBPdGhlciBtaXNjZWxsYW5lb3VzIFJlcG9ydC5kZAIFDw8WAh8DBQZDIy5OZXRkZAIHDw8WAh8DBQUyNDU1MGRkAgkPDxYCHwQFJX4vUHJvamVjdC9Ib3RlbCBNYW5hZ2VtZW50IFN5c3RlbS5yYXJkZALXAQ9kFgJmD2QWCgIBDw8WAh8DBR5PbmxpbmUgRmFjdWx0eSBGZWVkYmFjayBTeXN0ZW1kZAIDDw8WAh8DBeIBRGV2ZWxvcGluZyBlZmZlY3RpdmUgbWVjaGFuaXNtcyBmb3IgZmVlZGJhY2sgY29sbGVjdGlvbiBpbiBsZWFybmluZyBlbnZpcm9ubWVudHMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCBhdCB0aGUgZnJvbnRpZXJzIG9mIG5ldyBrbm93bGVkZ2UgLlZhbHVpbmcgYW5kIGFza2luZyBmb3IgZmVlZGJhY2sgaGFzIHJlY29nbml6ZWQgYmVuZWZpdHMgZm9yIGJvdGggc3RhZmYgYW5kIHN0dWRlbnRzLmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQzMjc4ZGQCCQ8PFgIfBAUWfi9Qcm9qZWN0L0ZlZWRiYWNrLnJhcmRkAtgBD2QWAmYPZBYKAgEPDxYCHwMFEU9ubGluZSBKb2IgUHJvdGFsZGQCAw8PFgIfAwWOAVRoaXMgaXMgYSB3ZWIgYmFzZWQgU29sdXRpb24gZm9yIENhbGwgQ2VudGVycy5Db21wbGV0ZSBDdXN0b21lciBBbmQgY2FsbCBjZW50ZXIgUmVwcmVzZW50YXRpdmUgbWFuYWdlbWVudCBpcyBwcm92aWRlZCBpbiB0aGUgZmluZCAgT25saW5lIGpvYi5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUENDE3NGRkAgkPDxYCHwQFGH4vUHJvamVjdC9qb2IgcG9ydGFsLnJhcmRkAtkBD2QWAmYPZBYKAgEPDxYCHwMFGFBlcnNvbmFsIEFjY291bnQgUGxhbm5lcmRkAgMPDxYCHwMFmgRQZXJzb25hbCBBY2NvdW50IFBsYW5uZXIgaXMgdGhlIGNvbXBsZXRlIHVzZXIgaW50ZXJhY3Qgc3lzdGVtLiBJdCBpcyBpbnRlZ3JhdGVkIHdpZG93cyBiYXNlZCB0b3RhbCB3b3JrZmxvdyBhdXRvbWF0aW9uIHN5c3RlbSBmb3IgYW55IHVzZXIuIFBlcnNvbmFsIEFjY291bnQgUGxhbm5lciBzZWFtbGVzc2x5IGludGVncmF0ZXMgdGhlIGV4aXN0aW5nIG1hbnVhbCBvciBzZW1pLWF1dG9tYXRlZCBwcm9jZXNzLCBzdGFydGluZyBmcm9tIHVzZXIgYWNjb3VudHMsIHR5cGUgb2YgdHJhbnNhY3Rpb25zLCBjYXRlZ29yaWVzIGFuZCB0aGUgZmluYW5jaWFsIHllYXJzIGFuZCBsYXN0IHRyYW5zYWN0aW9uIG9mIGFjY291bnQgdG8gYWNjb3VudC4gSXQgd2lsbCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIHRoZSByZXBvcnQgb2YgdGhlIHRyYW5zYWN0aW9ucyBvZiBhY2NvdW50cyBhbmQgSSB3aWxsIGFsc28gZ2VuZXJhdGUgY2hhcnQgdG9vLiBJdCB3aWxsIHVzZWZ1bCB0byBjYWxjdWxhdGUgeW91ciBpbmNvbWUgYW5kIG1hbmdlIHlvdXIgZXhwZW5zZS4gZGQCBQ8PFgIfAwUGVmIuTmV0ZGQCBw8PFgIfAwUEODc5NGRkAgkPDxYCHwQFJn4vUHJvamVjdC9QZXJzb25hbCBBY2NvdW50IFBsYW5uZXIucmFyZGQC2gEPZBYCZg9kFgoCAQ8PFgIfAwUZT25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbWRkAgMPDxYCHwMFzgFBbiBPbmxpbmUgRXhhbWluYXRpb24gU3lzdGVtIGlzIGEgd2ViIGJhc2VkIHNvbHV0aW9uLlJlYWR5IHRvIHJ1biBjb2RlIGlzIGF2YWlsYWJsZSB0byBkb3dubG9hZCBmcmVlLlVzZXIgY2FuIGdpdmUgYXZhaWxhYmxlIGV4YW1zIGZyb20gaG9tZS5BIGNhcmUgaXMgdGFrZW4gZm9yIFN0YXRlIG1hbmFnZW1lbnQgYW5kIFN5c3RlbSBmYWlsdXJlIFJlY292ZXJ5LmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQzODcyZGQCCQ8PFgIfBAUhfi9Qcm9qZWN0L29ubGluZSBleGFtIHByb2plY3QucmFyZGQC2wEPZBYCZg9kFgoCAQ8PFgIfAwURSW50ZXJuZXQgQmFua2luZyBkZAIDDw8WAh8DBcsBVG9kYXksSW50ZXJuZXQgYmFua2luZyBpcyBvbmUgb2YgdGhlIGNydWNpYWwgbmVlZCBmb3IgQmFuay5UaGlzIGFwcGxpY2F0aW9uIGltcGxlbWVudCBpbnRlcm5ldCBiYW5raW5nIHdpdGggU2VjdXJlIExvZ0luLFRyYW5zYWN0aW9uIEZhY2lsaXR5LEJhbGFuY2UgSW5xdXJ5LllvdSBjYW4gZG93bmxvYWQgcHJvamVjdCB3aXRoIGNvbXBsZXRlIHJlcG9ydC5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUFMTY0NDlkZAIJDw8WAh8EBR1+L1Byb2plY3QvaW50ZXJuZXRiYW5raW5nLnppcGRkAtwBD2QWAmYPZBYKAgEPDxYCHwMFGlJhaWx3YXkgUmVzZXJ2YXRpb24gU3lzdGVtZGQCAw8PFgIfAwV1VGhpcyBhcHBsaWNhdGlvbiBpcyBkZXZlbG9wZWQgaW4gQy9DKysgdG8gZGVtb3N0cmF0ZSBwb3dlciBvZiBPYmplY3QgT3JpZW50ZWQgbGFuZ3VhZ2UuVGhpcyBpbXBsZW1lbnRlZCBHVUkgaW4gQy9DKysuZGQCBQ8PFgIfAwUFQy9DKytkZAIHDw8WAh8DBQUxMDE4M2RkAgkPDxYCHwQFFX4vUHJvamVjdC9SQUlMV0FZLnJhcmRkAt0BD2QWAmYPZBYKAgEPDxYCHwMFE0NSTSBGb3IgQ2FsbCBDZW50ZXJkZAIDDw8WAh8DBYYBVGhpcyBpcyBhIHdlYiBiYXNlZCBTb2x1dGlvbiBmb3IgQ2FsbCBDZW50ZXJzLkNvbXBsZXRlIEN1c3RvbWVyIEFuZCBjYWxsIGNlbnRlciBSZXByZXNlbnRhdGl2ZSBtYW5hZ2VtZW50IGlzIHByb3ZpZGVkIGluIHRoZSBzb2x1dGlvbi5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMzg3N2RkAgkPDxYCHwQFKH4vUHJvamVjdC9jcm1fY2FsbF9jZW50cmVfbWFuYWdlbWVudC56aXBkZALeAQ9kFgJmD2QWCgIBDw8WAh8DBRhNZWRpY2FsIEludmVudG9yeSBTeXN0ZW1kZAIDDw8WAh8DBeUBVGhpcyBQcm9qZWN0IGlzIHdpbmRvdyBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gVmIuTmV0LkJ5IEFwcGx5aW5nIE9PUHMgRnVuZGFtZW50YWwsQ29tcGxldGUgSW52ZW50b3J5IE1hbmFnZW1lbnQgaXMgRGV2ZWxvcGVkIHdpdGggUmVwb3J0IEdlbmVyYXRpb24gYW5kIEF1dG9tYXRpYyBTdG9jayxQdXJjaGFzZSBhbmQgU2FsZXMgTWFuYWdlbWVudC5GcmVlIFRvIERvd25sb2FkIHdpdGggUmVwb3J0LmRkAgUPDxYCHwMFBlZiLk5ldGRkAgcPDxYCHwMFBTE2ODM0ZGQCCQ8PFgIfBAUmfi9Qcm9qZWN0L01FRElDQUwgSU5WRU5UT1JZIFNZU1RFTS5yYXJkZALfAQ8PFgIfAmhkZAIDDw9kDxAWAWYWARYCHg5QYXJhbWV0ZXJWYWx1ZQUFQ0UvSVQWAQIFZGQYAQUjY3RsMDAkQ29udGVudFBsYWNlSG9sZGVyMSRHcmlkVmlldzEPPCsADAEIAgFkTfKixl/gezWFGHMzKwyen63nPSMSteyI4V3cqNlGk8Q=', 
     '__VIEWSTATEGENERATOR': '489F9336', 
     '__EVENTVALIDATION': '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'}

    response = requests.post(exporturl, data=payload, stream=True)
    return response

def validateFile(response):
    if(response.status_code == 200):
        filetype = response.headers['Content-Type']
        if(filetype == "application/octet-stream"):
            filename = cgi.parse_header(response.headers['Content-Disposition'])[-1]['filename']
            filename = filename.split('/')[-1]
            return filename
    return False

def saveFile(response, filename):
    content = response.content
    with open(filename, 'wb') as f:
        f.write(content)

db = MySQLdb.connect("localhost","root","password","icalc")
cursor = db.cursor()
request = requests.get("http://www.enggroom.com/Project.aspx")
raw_html = BeautifulSoup(request.text, "lxml")

for i in range(1, 224):
    if(i >= 0 and i <= 9):
        i = "0%s"%i
    response = init(str(i))
    filename = validateFile(response)
    search_name = "ctl00_ContentPlaceHolder1_GridView1_ctl%s_Label1"%i
    search_description = "ctl00_ContentPlaceHolder1_GridView1_ctl%s_Label3"%i
    search_language = "ctl00_ContentPlaceHolder1_GridView1_ctl%s_Label4"%i
    if(filename != False):
        name = raw_html.find("span", {"id" : search_name}).text
        name = u''.join(name).encode('utf-8').strip()
        description = raw_html.find("span", {"id" : search_description}).text
        description = u''.join(description).encode('utf-8').strip()
        language = raw_html.find("span", {"id" : search_language}).text
        language = u''.join(language).encode('utf-8').strip()

        query = 'INSERT INTO projects(name, description, language, filename) VALUES("%s", "%s", "%s", "%s");'
        cursor.execute(query, (name, description, language, filename))
        saveFile(response, filename)
        print("Project: %s Downloaded Successfully..!!" %filename)
print("Download Successfull..!!")
db.commit()
db.close()