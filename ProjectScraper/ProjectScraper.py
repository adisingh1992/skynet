import requests
import cgi

def init(filenumber):
    exporturl = "http://www.enggroom.com/Project.aspx"
    payload = {'__EVENTTARGET': 'ctl00$ContentPlaceHolder1$GridView1$ctl%s$btnDownloadTheFile'%filenumber,
     '__EVENTARGUMENT': '',
     '__VIEWSTATE': '/wEPDwUKLTg2MzEyNTMzNA9kFgJmD2QWAgIDD2QWAgIBD2QWBAIBDzwrABEDAA8WBB4LXyFEYXRhQm91bmRnHgtfIUl0ZW1Db3VudALeAWQBEBYAFgAWAAwUKwAAFgJmD2QWwANmDw8WAh4HVmlzaWJsZWhkZAIBD2QWAmYPZBYKAgEPDxYCHgRUZXh0BStPbmxpbmUgUmVzdGF1cmFudCBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwWlAURvd25sb2FkIE9ubGluZSBSZXN0YXVyYW50IE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3QgaW4gUEhQIHdpdGggbXkgc3FsIHdpdGggc291cmNlIGNvZGUsUmVwb3J0IEZvciBMYXN0IFNlbWVzdGVyIFN0dWRlbnQgQ29tcHV0ZXIgRW5naW5lZXJpbmcsRGlwbG9tYSxCQ0EsTVNDLUlULE1DQWRkAgUPDxYCHwMFE1BocCxNeSBTcWwsSHRtbCxDU1NkZAIHDw8WAh8DBQQyODUyZGQCCQ8PFgIeD0NvbW1hbmRBcmd1bWVudAUnfi9Qcm9qZWN0L09ubGluZVJlc3RyYXVudE1hbmFnZW1lbnQuemlwZGQCAg9kFgJmD2QWCgIBDw8WAh8DBRtQTkVVTUFUSUMgQlVNUEVSIEFVVE9NQVRJQyBkZAIDDw8WAh8DBboEVGhpcyBzeXN0ZW0gaXMgY29uc2lzdHMgb2YgSVIgdHJhbnNtaXR0ZXIgYW5kIFJlY2VpdmVyIGNpcmN1aXQsIENvbnRyb2wgVW5pdCwgUG5ldW1hdGljIGJ1bXBlciBzeXN0ZW0uIFRoZSBJUiBzZW5zb3IgaXMgdXNlZCB0byBkZXRlY3QgdGhlIG9ic3RhY2xlLiBUaGVyZSBpcyBhbnkgb2JzdGFjbGUgY2xvc2VyIHRvIHRoZSB2ZWhpY2xlICh3aXRoIGluIDQgZmVldCksIHRoZSBjb250cm9sIHNpZ25hbCBpcyBnaXZlbiB0byB0aGUgYnVtcGVyIGFjdGl2YXRpb24gc3lzdGVtLiBUaGUgcG5ldW1hdGljIGJ1bXBlciBzeXN0ZW0gaXMgdXNlZCB0byBwcm9kdWN0IHRoZSBtYW4gYW5kIHZlaGljbGUuIFRoaXMgYnVtcGVyIGFjdGl2YXRpb24gc3lzdGVtIGlzIG9ubHkgYWN0aXZhdGVkIHRoZSB2ZWhpY2xlIHNwZWVkIGFib3ZlIDQwLTUwIGttIHBlciBob3VyLiBUaGlzIHZlaGljbGUgc3BlZWQgaXMgc2Vuc2VkIGJ5IHRoZSBwcm94aW1pdHkgc2Vuc29yIGFuZCB0aGlzIHNpZ25hbCBpcyBnaXZlbiB0byB0aGUgY29udHJvbCB1bml0IGFuZCBwbmV1bWF0aWMgYnVtcGVyIGFjdGl2YXRpb24gc3lzdGVtLiAgZGQCBQ8PFgIfAwUTTWVjaGFuaWNhbCAgcHJvamVjdGRkAgcPDxYCHwMFAzE2NmRkAgkPDxYCHwQFTn4vUHJvamVjdC9BVVRPTUFUSUMgUE5FVU1BVElDIEJVTVBFUi1NRUNIQU5JQ0FMIEVOR0lORUVSSU5HIFBST0pFQ1QgUkVQT1JULmRvY2RkAgMPZBYCZg9kFgoCAQ8PFgIfAwUxRG93bmxvYWQgT25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbSBQcm9qZWN0IGluIFBIUGRkAgMPDxYCHwMF1gJPbmxpbmUgRXhhbWluYXRpb24gc3lzdGVtIGlzIHRoZSBwcm9jZXNzIG9mIGNvbmR1Y3RpbmcgZXhhbSBvbmxpbmUuVGhpcyBwcm9qZWN0IHByb3ZpZGUgYWNjdXJhdGUgYW5kIGZsZXhpYmxlIG1hbm5lciBvZiBjb25kdWN0aW5nIGV4YW0gb25saW5lLlRoaXMgUHJvamVjdCBwcm92aWRlcyBtb3JlIGFjY3VyYXRlIGFuZCBlZmZpY2llbnQgd2F5IHRvIHRha2UgZXhhbS5JdCBhbHNvIHByb3ZpZGVzIGZsZXhpYmlsaXR5ICB0byB0aGUgdXNlciBhcyBvbmUgY2FuIGdpdmUgdGhlIGV4YW0gYXQgaG9tZS5UaGlzIGlzIGEgb25lIG9mIHRoZSBnb29kIHByb2plY3QgZm9yIGZpbmFsIHllYXIgc3R1ZGVudC5kZAIFDw8WAh8DBQlQSFAsTXlTcWxkZAIHDw8WAh8DBQQ3NzI5ZGQCCQ8PFgIfBAUkfi9Qcm9qZWN0L09ubGluZV9FeGFtaW5hdGlvbl9QSFAuemlwZGQCBA9kFgJmD2QWCgIBDw8WAh8DBSpPbmxpbmUgQ2luZW1hIFRpY2tldCBCb29raW5nIFN5c3RlbSBpbiBQSFBkZAIDDw8WAh8DBYIEVGhpcyBzb2x1dGlvbiB1c2luZyBQSFAgUGxhdGZvcm0gd2hpY2ggd291bGQgZW5hYmxlIG1vdmllIGdvZXJzIHRvIGJvb2sgdGhlaXINCnRpY2tldHMgZWxlY3Ryb25pY2FsbHkgb3ZlciB0aGUgSW50ZXJuZXQgZnJvbSB0aGUgY29tZm9ydCBvZiB0aGVpciBvZmZpY2Ugb3IgaG9tZS4NCldpdGggdGhlIGFkdmVudCBvZiB0aGUgbW9kZXJuIGFnZSwgdGhlIHR5cGljYWwgdXNlciBkaWQgbm90IGhhdmUgZW5vdWdoIHRpbWUgdG8NCnN0YW5kIGluIGxpbmUgb3V0c2lkZSB0aGUgdGhlYXRlcnMuIFRoZSBvbmxpbmUgc29sdXRpb24gYWxsb3dzIHVzZXJzIHRvIHNlbGVjdCB0aGVpcg0Kc2hvd3MsIGJvb2sgYW5kIHBheSBmb3IgdGhlaXIgdGlja2V0cy4gVGhpcyBndWFyYW50ZWVzIHRoZW0gYSB0aWNrZXQgZXZlbiBiZWZvcmUNCnRoZXkgYXJyaXZlIGF0IHRoZSBjaW5lbWEgaGFsbC5Eb3dubG9hZCBjb21wbGV0ZSBDaW5lbWEgdGlja2V0IGJvb2tpZyBwcm9qZWN0IHdpdGggc291cmNlIGNvZGUgaW4gUEhQLmRkAgUPDxYCHwMFClBIUCxNWSBTcWxkZAIHDw8WAh8DBQQ2ODI2ZGQCCQ8PFgIfBAUufi9Qcm9qZWN0L0NpbmVtYS1UaWNrZXQtQm9va2luZy1TeXN0ZW0tUEhQLnJhcmRkAgUPZBYCZg9kFgoCAQ8PFgIfAwUhQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwXfAmhlIEFpcmxpbmUgUmVzZXJ2YXRpb24gU3lzdGVtIChBUlMpIGlzIGEgc29mdHdhcmUgYXBwbGljYXRpb24gdG8gYXNzaXN0IGFuIGFpcmxpbmUgd2l0aCB0cmFuc2FjdGlvbnMgcmVsYXRlZCB0byBtYWtpbmcgdGlja2V0IHJlc2VydmF0aW9ucywgd2hpY2ggaW5jbHVkZXMgYmxvY2tpbmcsIHJlc2VydmluZywgY2FuY2VsaW5nIGFuZCByZXNjaGVkdWxpbmcgdGlja2V0cy5UaGUgc3lzdGVtIHNoYWxsIHJlcXVpcmUgYSB1c2VyIHRvIHJlZ2lzdGVyLCBpbiBvcmRlciB0byBjYXJyeSBvdXQgYW55IHRyYW5zYWN0aW9ucyB3aXRoIGl0IGV4Y2VwdCBmb3IgY2hlY2tpbmcgdGhlIGF2YWlsYWJpbGl0eSBvZiB0aWNrZXRzLmRkAgUPDxYCHwMFCVBIUCxNeVNxbGRkAgcPDxYCHwMFBDQxODlkZAIJDw8WAh8EBR1+L1Byb2plY3QvYm9vdGxpbnQtbWFzdGVyLnppcGRkAgYPZBYCZg9kFgoCAQ8PFgIfAwUiQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFxgNBaXJsaW5lIFJlc2VydmF0aW9uIHN5c3RlbSBpcyBhIHdlYiBiYXNlZCByZXNlcnZhdGlvbiBzeXN0ZW0gIG1hZGUgaW4gamF2YSBwcm9ncmFtbWluZyBsYW5ndWFnZS5BcyBhbGwgd2Uga25vdyxKYXZhIGlzIG9uZSBvZiB0aGUgbW9zdCBwcm9taW5lbnQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UgZm9yIHNvZnR3YXJlIGRldmVsb3BtZW50LlRoaXMgcHJvamVjdCBwcm92aWRlcyBhIGZhY2lsaXR5IHRvIHNlYXJjaCBmb3IgdGhlIGZsaWdodCBhdmFpbGFibGUgYmV0d2VlbiB0d28gc3RhdGlvbixjb21wYXJlIGZhcmUgb2YgdGhlIGRpZmZlcmVudCBmbGlnaHRzLGNvbXBhcmUgdHJhdmVsbGluZyB0aW1lIG9mIHRoZSBmbGlnaHQuSXQgYWxsb3dzIHVzZXIgdG8gbWFrZSBhIHJlc2VydmF0aW9uIG9mICBmbGlnaHQsY2FuY2VsbGF0aW9uIG9mIGZsaWdodCx1cC1ncmFkYXRpb24gb2YgdGlja2V0IGFsc28uZGQCBQ8PFgIfAwUESmF2YWRkAgcPDxYCHwMFBTExNDIxZGQCCQ8PFgIfBAUzfi9Qcm9qZWN0L0FuZHJvaWQgTXVsdGkgVG9vbHMgdjEuMDJiIEZBSVNBTCBKRUUucmFyZGQCBw9kFgJmD2QWCgIBDw8WAh8DBSdEb3dubG9hZCBXZWJzaXRlIENvcGllciBQcm9qZWN0IGluIEpBVkFkZAIDDw8WAh8DBZ4CV2Vic2l0ZSBDb3BpZXIgaXMgYSBhcHBsaWNhdGlvbiB0byBkb3dubG9hZCBjb21wbGV0ZSB3ZWJzaXRlIGZvciBPZmZsaW5lIGJyb3dzaW5nLkl0IGlzIHNpbWlsYXIgdG8gSFRUUkFDSy5Db21wbGV0ZSBzb3VyY2UgY29kZSBpcyB3cml0dGVuIGluIGphdmEgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBhbmQgcmVwb3J0LmF1dGhvciBoYXZlIHdyaXR0ZW4gZXhjZWxsZW50IGphdmEgY29kZSB3aXRoIEphdmEuTmV0IHBhY2thZ2UuR29vZCBhY2FkZW1pYyBwcm9qZWN0IGRldmVsb3BlZCBpbiBqYXZhLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQQ2NTM4ZGQCCQ8PFgIfBAUffi9Qcm9qZWN0L21pbmljb3BpZXItbWFzdGVyLnppcGRkAggPZBYCZg9kFgoCAQ8PFgIfAwUbQ2hhdCBBcHBsaWNhdGlvbiBpbiBBbmRyb2lkZGQCAw8PFgIfAwWdAURvd25sb2FkIENvbXBsZXRlIGNoYXQgYXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIGFuZHJvaWQgZm9yIGZpbmFsIHllYXIgc3R1ZGVudC5UaGlzIGFwcGxpY2F0aW9uIGNhbiB3b3JrIG9uIG1vc3Qgb2YgdGhlIHZlcnNpb24gb2YgYW5kcm9pZCB3aXRob3V0IGFueSBlcnJvci5kZAIFDw8WAh8DBRFBbmRyb2lkLFBIUC5NeVNxbGRkAgcPDxYCHwMFBDUzOTNkZAIJDw8WAh8EBSZ+L1Byb2plY3QvQ2hhdC1BcHBsaWNhdGlvbi1BbmRyb2lkLnJhcmRkAgkPZBYCZg9kFgoCAQ8PFgIfAwUhT25saW5lIFBoYXJtYWN5IE1hbmFnZW1lbnQgaW4gSlNQZGQCAw8PFgIfAwXgAkZyZWUgRG93bmxvYWQgUHJvamVjdCB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlIGluIEpTUCxKYXZhIHdpdGggT3JhY2xlIDEwZyBhcyBhIERhdGFiYXNlLlRoaXMgcHJvamVjdCBpcyBkZXZlbG9wZWQgZm9yIGEgUGhhcm1hY3kgd2hpY2ggd2FudCB0byBtYW5hZ2Ugcm91dGluZSBvcGVyYXRpb24uUGhhcm1hY3kgbWFuYWdlbWVudCBzeXN0ZW0gaXMgZGV2ZWxvcGVkIGluIEphdmEgU2VydmVyIFBhZ2VzIHdpdGggbmV0YmVhbnMgYXMgYSBJREUuIEl0IGhhcyBhIGdvb2QgR1VJIHdpdGggSFRNTCBhbmQgQ1NTLmRvd25sb2FkIGNvbXBsZXRlIHByb2plY3Qgd2l0aCBzb3VyY2UgY29kZSBhbmQgcmVwb3J0IGluIEpTUC5kZAIFDw8WAh8DBR9KYXZhLEpTUCxBSkFYLEhUTUwsQ1NTLE5ldGJlYW5zZGQCBw8PFgIfAwUFMTAyMTZkZAIJDw8WAh8EBSx+L1Byb2plY3QvUGhhcm1hY3ktTWFuYWdlbWVudC1TeXN0ZW0tSlNQLnppcGRkAgoPZBYCZg9kFgoCAQ8PFgIfAwUiUGF5bWVudCBCaWxsaW5nIFN5c3RlbSBpbiBKU1B8SmF2YWRkAgMPDxYCHwMF2gNGcmVlIERvd25sb2FkIFByb2plY3Qgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBpbiBKU1AsSmF2YSB3aXRoIE9yYWNsZSAxMGcgYXMgYSBEYXRhYmFzZS5UaGUgcHJvamVjdCB0aXRsZWQgYXMg4oCcUEFZTUVOVCBCSUxMSU5HIFNZU1RFTSBJTiBKU1Ag4oCcaXMgYSB3ZWIgYmFzZWQgYXBwbGljYXRpb24uIEFuIGluc3RpdHV0ZSAgaGF2ZSAgZGlmZmVyZW50IGJyYW5jaGVzIGF0IGRpZmZlcmVudCBsb2NhdGlvbnMgICB3YW50IHRvIGNvbnRyb2wgYW5kIG1haW50YWluIHRoZSBhY2NvdW50YW50IHNhbGFyeSBhbmQgc3R1ZGVudCBwZXJzb25hbCBhbmQgcGF5bWVudCBkZXRhaWxzLiBzb2Z0d2FyZSBwcm92aWRlcyBmYWNpbGl0eSBmb3IgcmVwb3J0aW5nICAsIG5ldyBzdHVkZW50IGRldGFpbHMsIHBheW1lbnQgZGV0YWlscyAsYW5kIG1vZGlmeSBkZXRhaWxzIG9mIHN0dWRlbnQgYW5kIHNhbGFyeSBvZiB0aGUgYWNjb3VudGFudC5kZAIFDw8WAh8DBR9KYXZhLEpTUCxBSkFYLEhUTUwsQ1NTLE5ldGJlYW5zZGQCBw8PFgIfAwUFMTA0MjhkZAIJDw8WAh8EBSh+L1Byb2plY3QvUGF5bWVudC1CaWxsaW5nIHN5c3RlbS1KU1AuemlwZGQCCw9kFgJmD2QWCgIBDw8WAh8DBSJGYWNlIElkZW50aWZpY2F0aW9uIFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwXsBlRvIGlkZW50aWZ5IGFueSBwZXJzb24gd2UgbmVlZCBzb21lIGlkZW50aWZpY2F0aW9uIHJlZ2FyZGluZyBwZXJzb24sIHdoaWNoIGFyZSBnaXZlbiBieSBleWV3aXRuZXNzLiBJbiBtb3N0IGNhc2VzIHRoZSBxdWFsaXR5IGFuZCByZXNvbHV0aW9uIG9mIHRoZSByZWNvcmRlZCBpbWFnZSBzZWdtZW50cyBpcyBwb29yIGFuZCBoYXJkIHRvIGlkZW50aWZ5IGEgZmFjZS4gVG8gb3ZlcmNvbWUgdGhpcyBzb3J0IG9mIHByb2JsZW0gd2UgYXJlIGRldmVsb3Bpbmcgc29mdHdhcmUuIElkZW50aWZpY2F0aW9uIGNhbiBiZSBkb25lIGluIG1hbnkgd2F5cyBsaWtlIGZpbmdlciBwcmludCwgZXllcywgRE5BIGV0Yy4gT25lIG9mIHRoZSBhcHBsaWNhdGlvbnMgaXMgZmFjZSBpZGVudGlmaWNhdGlvbi4gVGhlIGZhY2UgaXMgb3VyIHByaW1hcnkgZm9jdXMgb2YgYXR0ZW50aW9uIGluIHNvY2lhbCBpbnRlcnMgY291cnNlIHBsYXlpbmcgYSBtYWpvciByb2xlIGluIGNvbnZleWluZyBpZGVudGlmeSBhbmQgZW1vdGlvbi4gQWx0aG91Z2ggdGhlIGFiaWxpdHkgdG8gaW5mZXIgaW50ZWxsaWdlbmNlIG9yIGNoYXJhY3RlciBmcm9tIGZhY2lhbCBhcHBlYXJhbmNlIGlzIHN1c3BlY3QsIHRoZSBodW1hbiBhYmlsaXR5IHRvIHJlY29nbml6ZSBmYWNlIGlzIHJlbWFya2FibGUuVGhpcyBwcm9qZWN0IGlzIGludGVuZGVkIHRvIGlkZW50aWZ5IGEgcGVyc29uIHVzaW5nIHRoZSBpbWFnZXMgcHJldmlvdXNseSB0YWtlbi4gVGhlIGlkZW50aWZpY2F0aW9uIHdpbGwgYmUgZG9uZSBhY2NvcmRpbmcgdGhlIHByZXZpb3VzIGltYWdlcyBvZiBkaWZmZXJlbnQgcGVyc29ucy5Eb3dubG9hZCBGYWNlIERldGVjdGlvbiBzeXN0ZW0gaW4gSmF2YSB3aXRoIHNvdXJjZSBjb2RlLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUFMTA5OTdkZAIJDw8WAh8EBSN+L1Byb2plY3QvRmFjZS1EZXRlY3Rpb24tU3lzdGVtLnppcGRkAgwPZBYCZg9kFgoCAQ8PFgIfAwUvT25saW5lIEUgQmxvZ2dpbmcgUGxhdGZvcm0gRGV2ZWxvcGVkIGluIEFzcC5OZXRkZAIDDw8WAh8DBcQDQmxvZ2dpbmcgaXMgb25lIG9mIHRoZSBDb250ZW50IG1hbmFnZW1lbnQgc3lzdGVtIHdoZXJlIGV2ZXJ5IG9uZSBjYW4gY3JlYXRlIGEgaGlzL2hlciBvd24gQmxvZy5UaGlzIEJsb2cgY2FuIGJlIGNyZWF0ZWQgYWZ0ZXIgc3VjY2Vzc2Z1bCByZWdpc3RyYXRpb24ucmVnaXN0ZXJlZCBVc2VyIGNhbiBFZGl0IG9yIFVwZGF0ZSBhIGJsb2cgb3Igd3JpdGUgbW9yZSBCbG9nLkJsb2cgY2FuIGJlIHJlYWQgYnkgYW55IGFub255bW91cyB1c2VyIHdpdGhvdXQgcmVnaXN0cmF0aW9uLlRoaXMgcHJvamVjdCBpcyBvbmUgb2YgdGhlIGdvb2QgcHJvamVjdCBmb3IgRmluYWwgeWVhciBtYWpvciBwcm9qZWN0LkRvd25sb2FkIGNvbXBsZXRlIHByb2plY3Qgc291cmNlIGNvZGUgaW4gYXNwLm5ldCB3aXRoIE1TIFNxbCBhcyBhIERhdGFiYXNlIGFuZCBDIy5OZXQgYXMgYSBwcm9ncmFtbWluZyBsYW5ndWFnZS5kZAIFDw8WAh8DBSlBc3AuTmV0LE1TIFNxbCxDU1MsSFRNTCxKYXZhU2NyaXB0LEMjLk5ldGRkAgcPDxYCHwMFBDY3NjdkZAIJDw8WAh8EBSh+L1Byb2plY3QvRS1CbG9nZ2luZy1hc3AtbmV0LXByb2plY3QuemlwZGQCDQ9kFgJmD2QWCgIBDw8WAh8DBSVEb2N1bWVudCBtYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0ZGQCAw8PFgIfAwWgA0RpZ2l0YWwgRG9jdW1lbnRzIGFyZSBpbmNyZWFzaW5nIHZlcnkgcmFwaWRseS5UbyBtYW5hZ2UgYW5kIHN0b3JlIHRoZXNlIGRvY3VtZW50cyBlZmZpY2llbnRseSxzb21lIG1hbmFnZW1lbnQgc3lzdGVtIGlzIHJlcXVpcmVkLkRpZ2l0YWwgRG9jdW1lbnQgTWFuYWdlbWVudCBTeXN0ZW0gcHJvdmlkZSBhcmNoaXRlY3R1cmFsIHdheSBvZiBvcmdhbml6aW5nIGFuZCBtYW5hZ2luZyBhIERpZ2l0YWwgRG9jdW1lbnRzLkRvd25sb2FkIHRoaXMgcHJvamVjdCB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlIGluIGFzcC5uZXQgd2l0aCByZXBvcnQgYW5kIGRhdGFiYXNlLlRoaXMgcHJvamVjdCBmb2xsb3dzIE9iamVjdCBPcmllbnRlZCBEZXNpZ24gYW5kIEdvb2QgVXNlciBJbnRlcmZhY2UgZGVzaWduZWQgd2l0aCBIVE1MIGFuZCBDU1MuZGQCBQ8PFgIfAwUiQXNwLk5ldCxNUyBTcWwsQ1NTLEhUTUwsSmF2YVNjcmlwdGRkAgcPDxYCHwMFBDY5OTlkZAIJDw8WAh8EBSR+L1Byb2plY3QvRGlnaXRhbC1Eb2MtTWdtbnQtU3lzbS56aXBkZAIOD2QWAmYPZBYKAgEPDxYCHwMFG0NoYXQgQXBwbGljYXRpb24gaW4gTm9kZSBKc2RkAgMPDxYCHwMF+QFEb3dubG9hZCBjb21wbGV0ZSBwcm9qZWN0IHNvdXJjZSBjb2RlIHdyaXR0ZW4gaW4gc2VydmVyIHNpZGUgSmF2YXNjcmlwdCBOb2RlSnMgYW5kIEV4cHJlc3MuVGhpcyBhcHBsaWNhdGlvbiBkZW1vbnN0cmF0ZSBnb29kIGV4YW1wbGUgb2Ygc29ja2V0IHByb2dyYW1taW5nIGluIG5vZGVKcyBhbmQgRXhwcmVzcy5Eb3dubG9hZCBjb21wbGV0ZSBwcm9qZWN0IHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgYW5kIHJlcG9ydCBmb3IgZnJlZS5kZAIFDw8WAh8DBRpKYXZhc2NyaXB0LE5vZGUgSnMsRXhwcmVzc2RkAgcPDxYCHwMFBDI5ODNkZAIJDw8WAh8EBRl+L1Byb2plY3QvY2hhdC1tYXN0ZXIuemlwZGQCDw9kFgJmD2QWCgIBDw8WAh8DBRlGYWNlYm9vayBpbiBQSFAgYW5kIE15U3FsZGQCAw8PFgIfAwVyRnJlZSBkb3dubG9hZCBTb2NpYWwgTmV0d29ya2luZyBXZWJzaXRlIGluIFBIUCB3aXRoIG15IHNxbCwgVGhpcyBwcm9qZWN0IGZ1bmN0aW9uYWxpdHkgc2FtZSBhcyBmYWNlYm9vayB3ZWJzaXRlLiAgZGQCBQ8PFgIfAwUnUEhQIFNjcmlwdGluZyxIVE1MLENTUyxKYXZhc2NyaXB0LE15U3FsZGQCBw8PFgIfAwUEOTAzNGRkAgkPDxYCHwQFGn4vUHJvamVjdC9Tb2NpYWxOZXRQSFAuemlwZGQCEA9kFgJmD2QWCgIBDw8WAh8DBR9Ib3N0ZWwgTWFuYWdlbWVudCBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwX4AUZyZWUgRG93bmxvYWQgSG9zdGVsIE1hbmFnZW1lbnQgU3lzdGVtIGluIFBIUCwgbXlzcWwgamF2YXNjcmlwdCxjc3MsaHRtbCB3aXRoIHZhcmlvdXMgZnVuY3Rpb25hbGl0eS5XaGljaCBpcyBtb3JlIHVzZXIgZnJpZW5kbHkgYW5kIG1vcmUgR1VJIG9yaWVudGVkLiBXZSBjYW4gaW1wcm92ZSB0aGUgZWZmaWNpZW5jeSBvZiB0aGUgc3lzdGVtLCB0aHVzIG92ZXJjb21lIHRoZSBkcmF3YmFja3Mgb2YgdGhlIGV4aXN0aW5nIHN5c3RlbS4gZGQCBQ8PFgIfAwUfIFBIUCwgbXlzcWwgamF2YXNjcmlwdCxjc3MsaHRtbGRkAgcPDxYCHwMFBDYzNjVkZAIJDw8WAh8EBSZ+L1Byb2plY3QvaG9zdGVsLW1hbmFnZW1lbnQtc3lzdGVtLnppcGRkAhEPZBYCZg9kFgoCAQ8PFgIfAwUeT25saW5lIExpdmUgTWVldGluZyBpbiBBc3AuTmV0ZGQCAw8PFgIfAwXSClRoaXMgcHJvamVjdCBpcyBtYWlubHkgZGV2ZWxvcGVkIGZvciB0aGUgY29tbXVuaWNhdGlvbiBvZiBFbXBsb3llZXMgb2Ygb3JnYW5pemF0aW9uIGxvY2F0ZWQgYXQgZGlmZmVyZW50IGxvY2F0aW9ucy4gVGhlIHByb2plY3QgZW50aXRsZWQg4oCcTGl2ZSBNZWV0aW5nIGluIEFzcC5OZXTigJ0gc2V0IG9mIHBsYXRmb3JtIGZvciB0aGUgcHJvamVjdCBsZWFkZXJzIGFuZCBhZG1pbmlzdHJhdG9yIHRvIHNlbmQgbWVzc2FnZXMgdG8ga2VlcCBjb25zdGFudCBpbnRlcmFjdGlvbiB3aXRoIHRoZSBwcm9ncmFtbWVycy4gSW4gdGhlIHByb3Bvc2VkIHN5c3RlbSBpcyB0aGUgYWRtaW5pc3RyYXRvciBjYW4gc2l0IGF0IGhpcyBzeXN0ZW0gYW5kIGNvbW11bmljYXRlIHdpdGggdGhlIHByb2plY3QgbGVhZGVycywgcHJvZ3JhbW1lcnMgYW5kIGNhbiBhbHNvIG1haW50YWluIHRoZSBsb2dpbiB0aW1lLCBsb2dvdXQgdGltZS4gSGUgY2FuIGNoYXQgYWJvdXQgdGhlIHByb2plY3QgZ29pbmcgb24gd2l0aCBib3RoIHRoZSBwcm9ncmFtbWVycyBhbmQgcHJvamVjdCBsZWFkZXJzLiBUaGlzIHByb2plY3QgYWxzbyBtYWludGFpbnMgb2ZmbGluZSBtZXNzYWdlcy4gVGhlIGFkbWluaXN0cmF0b3Igc2VlcyB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgc3lzdGVtIG9mIHByb2plY3QgbGVhZGVyL3Byb2dyYW1tZXIgaGUgaXMgaW50ZXJlc3RlZCBhbmQgY2hhdCB3aXRoIHRoZSBwZW9wbGUgLlRoZSBwcm9qZWN0IGxlYWRlciBnaXZlcyB0aGUgaW5zdGFudCByZXBvcnQgYWJvdXQgdGhlIHByb2plY3QgdG8gdGhlIGFkbWluaXN0cmF0b3IuIFRocm91Z2ggdGhpcyBDb21tdW5pY2F0aW9uIFN5c3RlbSwgV2hlbmV2ZXIgdXNlciBsb2dzLWluIGludG8gdGhlIHN5c3RlbSB0aGVuIGxvZ2luIHRpbWUgaXMgcmVjb3JkZWQgaW4gdGhlIGFkbWluaXN0cmF0b3LigJlzIHN5c3RlbSBhdXRvbWF0aWNhbGx5LiBUaGlzIHByb2plY3QgbWFrZXMgdGhlIG1vc3Qgb2YgdGhlIHRlZGlvdXMgYW5kIG11bmRhbmUgZGVza3dvcmsgdG8gbWluaW1pemUuIFRoaXMgZmFjaWxpdGF0ZXMgdGhlIHVzZXIgdG8gY29uY2VudHJhdGUgbW9yZSBvbiB0aGUgcHJvamVjdCBhbmQgbGVzcyBvbiB0aGUgbWFuYWdpbmcgb2YgdGhlc2UgdGFza3MuIFRoZSBzb2Z0d2FyZSBpcyBmdWxseSBpbnRlZ3JhdGVkIHdpdGggQ1JNIChDdXN0b21lciBSZWxhdGlvbnNoaXAgTWFuYWdlbWVudCkgYXMgd2VsbCBhcyBDTVMgKENvbnRlbnQgTWFuYWdlbWVudCBTeXN0ZW0pIHNvbHV0aW9uIGFuZCBkZXZlbG9wZWQgaW4gYSBtYW5uZXIgdGhhdCBpcyBlYXNpbHkgbWFuYWdlYWJsZSwgdGltZSBzYXZpbmcgYW5kIHJlbGlldmluZyBvbmUgZnJvbSBtYW51YWwgd29ya3MuIGRkAgUPDxYCHwMFFUFzcC5OZXQsTXMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBTEwOTMwZGQCCQ8PFgIfBAUhfi9Qcm9qZWN0L0xpdmUtTWVldGluZy1Jbi1Bc3AucmFyZGQCEg9kFgJmD2QWCgIBDw8WAh8DBS9PbmxpbmUgUHJvZHVjdGlvbiBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKU1B8SmF2YWRkAgMPDxYCHwMF6ANPbmxpbmUgcHJvZHVjdGlvbiBtYW5hZ2VtZW50IHN5c3RlbSBpcyBhIG9ubGluZSB3ZWIgYXBwbGljYXRpb24gdG8gbWFuYWdlIHRhc2sgb2YgcHJvZHVjdGlvbi5UaGlzIGFwcGxpY2F0aW9uIGlzIHZlcnkgdXNlZnVsIGZvciBjb21wYW5pZXMgd2hpY2ggYXJlIGdldHRpbmcgdGhlaXIgb3JkZXJzIG9mIHByb2R1Y3RzIGFuZCB0aGVuIG1ha2luZyB0aGF0IHBhcnRpY3VsYXIgb3JkZXIuVXNpbmcgdGhpcyBhcHBsaWNhdGlvbix0aGV5IGNhbiBtYW5hZ2UgbWF0ZXJpYWwgcmVxdWlyZWQgb3IgdXNlZCBmb3IgcHJvZHVjdGlvbixjb3N0IG9mIG1hdGVyaWFsLGNvc3Qgb2YgbGFib3VyIHdvcmsuVGhpcyBhcHBsaWNhdGlvbiBpcyB2ZXJ5IHVzZWZ1bCB0byBtYWtlIHRoZWlyIHJvdXRpbmUgdGFzayBhdXRvbWF0ZWQgaW4gSlNQfEphdmEuRG93bmxvYWQgSlNwfEphdmEgc291cmNlIGNvZGUgZm9yIE9ubGluZSBQcm9kdWN0aW9uIE1hbmFnZW1lbnQgU3lzdGVtLmRkAgUPDxYCHwMFCEpTUCxKYXZhZGQCBw8PFgIfAwUFMTEwMDFkZAIJDw8WAh8EBSp+L1Byb2plY3QvUHJvZHVjdGlvbi1NYW5hZ2VtZW50LVN5c2V0bS56aXBkZAITD2QWAmYPZBYKAgEPDxYCHwMFMkludGVsbGlnZW50IE9ubGluZSBDb21tb2RpdHkgdHJhZGluZyBTeXN0ZW0gaW4gQXNwZGQCAw8PFgIfAwXXAlRoaXMgb25saW5lIHdlYiBhcHBsaWNhdGlvbiBpcyBnZW5lcmF0ZWQgdG8gcHJvdmlkZSBpbnRlbGxpZ2VudCB0cmFkaW5nIGZvciBjb21tb2RpdHkgbWFya2V0LlRoaXMgb25saW5lIHdlYiBhcHBsaWNhdGlvbiB3aWxsIHByb3ZpZGUgbGl2ZSByYXRlIG9mIGNvbW1vZGl0eS51c2VyIGNhbiBhbHNvIHB1cmNoYXNlIGFuZCBzZWxsIGNvbW1vZGl0eSBvbmxpbmUuYWNjb3VudCBpcyBtYWludGFpbmVkIGF1dG9tYXRpY2FsbHkuRG93bmxvYWQgT25saW5lIEludGVsbGlnZW50IGNvbW1vZGl0eSB0cmFkaW5nIHN5c3RlbSBpbiBBc3AuTmV0IHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgYW5kIHJlcG9ydC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1zIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ1MzM5ZGQCCQ8PFgIfBAUsfi9Qcm9qZWN0L2ludGVsbGlnZW50LWNvbW1vZGl0eSAtdHJhZGluZy5yYXJkZAIUD2QWAmYPZBYKAgEPDxYCHwMFH09ubGluZSBDb3Vyc2UgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBcMDRGV2ZWxvcGluZyBhbiBJbnRlZ3JhdGVkIENvbGxhZ2UgTWFuYWdlbWVudCBTeXN0ZW0gaW5pdGlhdGl2ZSBpcyBhIHR5cGljYWxseSBtdWNoIGxhcmdlciBlbmRlYXZvciB0aGFuIHRoYXQgb2YgYW4gaW5zdHJ1Y3Rvci1sZWQgdHJhaW5pbmcgKElMVCkgcHJvZ3JhbS4gQ29uc2lkZXIgdGhlIGluY3JlYXNlZCBleHBlbnNlcywgbnVtYmVyIG9mIHBlb3BsZSBpbnZvbHZlZCwgZGV2ZWxvcG1lbnQgdGltZSwgdGVjaG5vbG9naWNhbCByZXF1aXJlbWVudHMsIGFuZCBkZWxpdmVyeSBvcHRpb25zLkRvd25sb2FkIE9ubGluZSBDb3Vyc2UgbWFuYWdlbWVudCBzeXN0ZW0gd2l0aCBhc3AubmV0LlRoaXMgcHJvamVjdCBpbmNsdWRlcyBEYXRhYmFzZSBGaWxlcyBpbiBNUyBTcWwsUHJvamVjdCBTb3VyY2UgY29kZSBpbiBBc3AuTmV0IGFuZCBSZXBvcnQgYW5kIFByZXNlbnRhdGlvbiBvZiBQcm9qZWN0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTXMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDk4ODFkZAIJDw8WAh8EBSZ+L1Byb2plY3QvQ291cnNlLU1hbmFnZW1lbnQtU3lzdGVtLnJhcmRkAhUPZBYCZg9kFgoCAQ8PFgIfAwUjT2ZmaWNlIE1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBe8CVGhpcyBpcyBhbiBpbnRyYW5ldCB3ZWIgYXBwbGljYXRpb24gdXNlZCB0byBhdXRvbWF0ZSB0YXNrcyByZWxhdGVkIHRvIGEgdHlwaWNhbCBmcm9udC1vZmZpY2UgZGVzayBvZiB0cmFpbmluZyBjZW50cmUuRG93bmxvYWQgQXNwLk5ldCBQcm9qZWN0IG9uIE9mZmljZSBNYW5hZ2VtZW50IFN5c3RlbSB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlLlRoaXMgYWxsb3dzIHVzZXIgdG8gbG9nIGluIGFuZCBhZGQgZGV0YWlscyBvZiBiYXRjaGVzLCBzdHVkZW50cyBhbmQgcGF5bWVudHMuIEl0IGFsc28gcHJvdmlkZXMgc2VhcmNoIG9mIHN0dWRlbnRzLCBwYXltZW50cyByZXBvcnQsIGluZm9ybWF0aW9uIGFib3V0IGJhdGNoZXMgYW5kIHN0dWRlbnRzLmRkAgUPDxYCHwMFDkFzcC5OZXQsTXMgU3FsZGQCBw8PFgIfAwUEODY3NGRkAgkPDxYCHwQFJn4vUHJvamVjdC9PZmZpY2UtTWFuYWdlbWVudC1TeXN0ZW0uemlwZGQCFg9kFgJmD2QWCgIBDw8WAh8DBRhHRU8gU1BBVElBTCBXRUIgU09MVVRJT05kZAIDDw8WAh8DBZ0GTG9jYWwgYm9kaWVzIGxpa2UgbXVuaWNpcGFsaXRpZXMgbmVlZCBjb2xsZWN0IGRpZmZlcmVudCBraW5kIG9mIHRheGVzIGZyb20gdGhlIGNpdGl6ZW5zLiAgRXZlcnkgY2l0aXplbiBuZWVkIHRvIHBheSBXYXRlciBCaWxscyBhbmQgRWxlY3RyaWNpdHkgQmlsbHMgdG8gdGhlIHBhcnRpY3VsYXIgYXV0aG9yaXRpZXMuICBBY3R1YWxseSBhIGNpdGl6ZW4gd2FudCB0byBwYXkgaGlzIG11bmljaXBhbCB0YXggbWVhbnMgaGUgc2hvdWxkIGdvIHRvIG11bmljaXBhbCBvZmZpY2UgYW5kIGNvbGxlY3QgdGhlIG5lY2Vzc2FyeSBiaWxsLCBwYXkgdGhlcmUgb25seS4gIFNhbWUgYXMgd2F0ZXIgYW5kIGVsZWN0cmljaXR5IGJpbGxzLiAgICBUaGlzIGlzIG5vdCBhbiBlYXN5IGpvYiB0byBnZXQgYWxsIHRoZXNlIHRheCBpbmZvcm1hdGlvbiBpbiBkaWZmZXJlbnQgYXV0aG9yaXRpZXMgbm93IGRheXMuCUZvciB0aGF0IHB1cnBvc2Ugd2UgYXJlIGRldmVsb3BpbmcgdGhpcyBhcHBsaWNhdGlvbiwgd2hpY2ggY2FuIGNvbGxlY3QgdGhlIHRheCBpbmZvcm1hdGlvbiBmcm9tIGRpZmZlcmVudCBhdXRob3JpdGllcyBiYXNlZCBvbiB0aGUgaG91c2Ugbm/igJlzIGFuZCBvd25lciBuYW1lIGJ5IHVzaW5nIFdlYiBTZXJ2aWNlcyBhbmQgc3RvcmVzIHRoZSBkYXRhIGluIG91ciBvd24gZGF0YWJhc2UuICBGb3IgZ2V0dGluZyB0aGUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRheGVzIGNpdGl6ZW5zIG5lZWQgdG8gcmVnaXN0ZXIgZmlyc3QuRG93bmxvYWQgTGF0ZXN0IEFzcC5OZXQgUHJvamVjdCBmb3IgRmluYWwgeWVhci5kZAIFDw8WAh8DBQ5Bc3AuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBDM5NzRkZAIJDw8WAh8EBR1+L1Byb2plY3QvZ0VPLXNQQVRJQUwtd0VCLnppcGRkAhcPZBYCZg9kFgoCAQ8PFgIfAwUZVG91cmlzbSBNYW5hZ2VtZW50IFN5c3RlbWRkAgMPDxYCHwMFigNBIFRvdXJpc20gTWFuYWdlbWVudCBTeXN0ZW0gaXMgYSB3ZWIgcHJvamVjdCB3aGljaCBleHBsYWlucyBhYm91dCBkZXZlbG9waW5nIGFuIEFzcC5OZXQgQXBwbGljYXRpb24gaW4gbGF5ZXJlZCBhcmNoaXRlY3R1cmUuIFRoaXMgYXBwbGljYXRpb24gaGFzIGFsbCBjb2Rpbmcgc3RhbmRhcmRzIGluIHBsYWNlLiBUaGlzIHByb2plY3QgaXMgZGV2ZWxvcGVkIG9ubHkgZm9yIGZyZXNoZXJzIGFuZCBqdW5pb3IgZGV2ZWxvcGVycy4gSXQgaGFzIE9iamVjdCBPcmllbnRlZCBQcm9ncmFtbWluZyB3aGljaCBoZWxwcyBGcmVzaGVycyBhbmQgSnVuaW9yIGRldmVsb3BlcnMgdG8gZWFzaWx5IHVuZGVyc3RhbmQgaG93IHByb2plY3Qgd2lsbCBiZSBkZXZlbG9wZWQgYW55IHNvZnR3YXJlIGNvbXBhbnkuZGQCBQ8PFgIfAwUOQXNwLk5ldCxNcyBTcWxkZAIHDw8WAh8DBQUxMDgzNWRkAgkPDxYCHwQFK34vUHJvamVjdC9Ub3VyaXNtLU1hbmFnZW1lbnQtU3lzdGVtLUFzcC5yYXJkZAIYD2QWAmYPZBYKAgEPDxYCHwMFJk5ldHdvcmsgTG9hZCBCYWxhbmNpbmcgcHJvamVjdCBpbiBKYXZhZGQCAw8PFgIfAwX3AU5ldHdvcmsgTG9hZCBCYWxhbmNpbmcgc3lzdGVtIHByb2plY3QgaXMgYSBqYXZhIHByb2plY3QgZm9yIGNvbXB1dGVyIHNjaWVuY2UgZmluYWwgeWVhciBzdHVkZW50cyB3aG8gYXJlIGludGVyZXN0ZWQgaW4gZGV2ZWxvcGluZyBqYXZhIGJhc2VkIG5ldHdvcmsgcmVsYXRlZCBwcm9qZWN0LnlvdSBjYW4gZG93bmxvYWQgTmV0d29yayBMb2FkIEJhbGFuY2luZyBwcm9qZWN0IHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgaW4gSmF2YS5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBDg5NThkZAIJDw8WAh8EBSN+L1Byb2plY3QvTmV0d29yay1Mb2FkLUJhbC1KYXZhLnppcGRkAhkPZBYCZg9kFgoCAQ8PFgIfAwUiRmFjZSBEZXRlY3Rpb24gU3lzdGVtIEZvciBQcmlzb25lcmRkAgMPDxYCHwMFvwVGYWNlIGRldGVjdGlvbiBzeXN0ZW0gZm9yIHByaXNvbmVyIGlzIGEgamF2YSBwcm9qZWN0LlRoaXMgc29mdHdhcmUgYXBwbGljYXRpb24gd2hpY2ggaXMgdXNlZCB0byBpZGVudGlmeSBjcmltaW5hbCBmYWNlcyBiYXNlZCBvbiBpbWFnZSBzbGljZXMgb2YgZXllcywgbGlwcywgbm9zZSBhbmQgaGFpcnPigKZldGMuIFRoaXMgcHJvamVjdCByZXBvcnQgY292ZXJzIHN5c3RlbSBhbmFseXNpcywgZmVhc2liaWxpdHkgcmVwb3J0LCBoYXJkd2FyZSBhbmQgc29mdHdhcmUgcmVxdWlyZW1lbnQsIHN5c3RlbSBkZXNpZ24sIHNhbXBsZSBjb2RpbmcgYW5kIHRlc3RpbmcgdGVjaG5pcXVlcy5JbiBleGlzdGluZyBzeXN0ZW0gY3JpbWluYWwgaW5mb3JtYXRpb24gaXMgc3RvcmVkIGluIGZpbGUgZm9ybWF0IHdpdGggb3V0ZGF0ZWQgaW1hZ2VzIGFuZCBsb3cgcXVhbGl0eSBpbWFnZXMuIFVzaW5nIHRoaXMgaW5mb3JtYXRpb24gaXQgaXMgbm90IHBvc3NpYmxlIGZvciBleWUgd2l0bmVzcyB0byBndWVzcyB0aGUgY3JpbWluYWwsIHNvIHRoZXJlIGlzIG5lZWQgdG8gZGV2ZWxvcCBhIGJldHRlciBtZXRob2QgZm9yIGlkZW50aWZ5aW5nIGNyaW1pbmFscyBsaWtlIGZpbmdlciBwcmludCwgRE5B4oCmRXRjLiBBbW9uZyBhbGwgdGhlc2UgbWV0aG9kcyBmYWNlIGRldGVjdGlvbiBtZXRob2QgaXMgY29zdCBlZmZlY3RpdmUgYW5kIG1vcmUgYWNjdXJhdGUuZGQCBQ8PFgIfAwUISmF2YSxKU1BkZAIHDw8WAh8DBQUxMDkxOGRkAgkPDxYCHwQFIX4vUHJvamVjdC9GYWNlLURldGVjdGlvbi1qYXZhLnppcGRkAhoPZBYCZg9kFgoCAQ8PFgIfAwUXSG90ZWwgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBYkBRnJlZSBEb3dubG9hZCBIb3RlbCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBDIy5OZXQgd2l0aCBTcWwgRGF0YWJhc2UgYW5kIGFsc28gZnJlZSBkb3dubG9hZCBIb3RlbCBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0IHdpdGggU291cmNlIGNvZGVkZAIFDw8WAh8DBQZWQi5OZXRkZAIHDw8WAh8DBQUyNDQ5OWRkAgkPDxYCHwQFJX4vUHJvamVjdC9Ib3RlbF9NYW5hZ2VtZW50X1N5c3RlbS5yYXJkZAIbD2QWAmYPZBYKAgEPDxYCHwMFIlByb2plY3QgVHJhY2tpbmcgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBbwEVGhlIFByb2plY3QgZW50aXRsZWQg4oCcUHJvamVjdCBUcmFja2luZyBTeXN0ZW3igJ0gZGVhbHMgd2l0aCB0aGUgdmFyaW91cyBsZXZlbHMgb2YgcHJvamVjdCBkZXZlbG9wbWVudCBhbmQgd2lsbCBhY2NvdW50IGZvciB0aW1lIHVzZWQgaW4gYW5hbHlzaXMsIGRlc2lnbiwgcHJvZ3JhbW1pbmcsIHRlc3RpbmcgYW5kIHZlcmlmaWNhdGlvbiBldGMuVGhpcyBwcm9qZWN0IGRlYWxzIHdpdGggZml2ZSBtb2R1bGVzIOKAkyBDbGllbnQsIEJ1c2luZXNzIGRldmVsb3BtZW50IG9mZmljZXIgKEJETyksIERldmVsb3BlciwgSHVtYW4gUmVzb3VyY2UgTWFuYWdlciAoSFIpLCBQcm9qZWN0IG1hbmFnZXIgKFBNKS4gICAgICAgVGhlIHByb2R1Y3Qgd2lsbCBhc3Npc3QgdGhlIG9yZ2FuaXphdGlvbiBpbiBtYWludGFpbmluZyByZWNvcmQgb2YgZXZlcnkgcHJvamVjdCBpdCB1bmRlcnRha2VzLiBBbGwgdGhlIGluZm9ybWF0aW9uIHJlbGV2YW50IHRvIHRoZSBwcm9qZWN0cyBsaWtlIHNpemUsIHRpbWUsIGVmZm9ydCBhbmQgZGVwYXJ0bWVudHMgaW52b2x2ZWQsIGV0YyBpcyBtYWludGFpbmVkIGJ5IHRoaXMgdG9vbC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ1MjgwZGQCCQ8PFgIfBAUpfi9Qcm9qZWN0L3Byb2plY3QtdHJhY2tpbmctc3lzdGVtLWFzcC56aXBkZAIcD2QWAmYPZBYKAgEPDxYCHwMFJENvbnRlbnQgTWFuYWdlbWVudCBTeXN0ZW0gaW4gQXNwLk5ldGRkAgMPDxYCHwMF1QJDTVMtQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSBpcyBhIHdlYiBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gQXNwLk5ldCB3aGljaCBtYWlubHkgcHJvdmlkZSBhIEZhY2lsaXR5IG9mIHB1Ymxpc2hpbmcsZWRpdGluZyBhbmQgbW9kaWZ5aW5nIGNvbnRlbnQuY29udGVudCBtYW5hZ2VtZW50IHN5c3RlbXMgaXMgdG8gc3RvcmUgYW5kIG9yZ2FuaXplIGZpbGVzLCBhbmQgcHJvdmlkZSB2ZXJzaW9uLWNvbnRyb2xsZWQgYWNjZXNzIHRvIHRoZWlyIGRhdGEuRG93bmxvYWQgQ29tcGxldGUgc291cmNlIGNvZGUgaW4gQXNwLk5ldCBGb3IgQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDQ2MDdkZAIJDw8WAh8EBSt+L1Byb2plY3QvQ29udGVudC1NYW5hZ2VtZW50LVN5c3RlbS1Bc3AuemlwZGQCHQ9kFgJmD2QWCgIBDw8WAh8DBR5PbmxpbmUgU2hvcHBpbmcgUHJvamVjdCBpbiBQSFBkZAIDDw8WAh8DBTdGcmVlIERvd25sb2FkIE9ubGluZSBTaG9wcGluZyBQcm9qZWN0IGluIFBocCB3aXRoIE15c3FsZGQCBQ8PFgIfAwUJUEhQLE15c3FsZGQCBw8PFgIfAwUFMjc5MDZkZAIJDw8WAh8EBRZ+L1Byb2plY3QvU2hvcHBpbmcucmFyZGQCHg9kFgJmD2QWCgIBDw8WAh8DBSRBSVJMSU5FIFJFU0VSVkFUSU9OIFNZU1RFTSBJTiBWQi5ORVRkZAIDDw8WAh8DBZEBVGhpcyBhcHBsaWNhdGlvbiBpcyBhIFdpbmRvd3MgQXBwbGljYXRpb24gRGV2ZWxvcGVkIGluIFZiLm5ldC5Eb3dubG9hZCBBaXJsaW5lIFJlc2VydmF0aW9uIHN5c3RlbSBpbiBWYi5uZXQgd2l0aCBzb3VyY2UgY29kZSxEYXRhYmFzZSBhbmQgUmVwb3J0LmRkAgUPDxYCHwMFEFZiLk5ldCxNUyBBY2Nlc3NkZAIHDw8WAh8DBQUyMjc0NGRkAgkPDxYCHwQFKH4vUHJvamVjdC9BaXJsaW5lX1Jlc2VydmF0aW9uX1N5c3RlbS5yYXJkZAIfD2QWAmYPZBYKAgEPDxYCHwMFJkZhY2UgRGV0ZWN0aW9uIGFuZCBDb21wYXJpc2lvbiBpbiAuTmV0ZGQCAw8PFgIfAwXlAURvd25sb2FkIGEgRmFjZSBkZXRlY3Rpb24taW1hZ2UgcHJvY2Vzc2luZyBwcm9qZWN0IGluIC5OZXQgd2l0aCBzb3VyY2UgY29kZS5JbiB0aGlzIHByb2plY3QsRmFjZSBhcmUgRGV0ZWN0ZWQgZnJvbSBpbWFnZS55b3UgY2FuIGFsc28gY29tcGFyZSB0d28gZmFjZXMgdG8gZmluZCBhIHNpbWlsYXJpdGllcy5UaGlzIHByb2plY3QgY2FuIGJlIHVzZWQgZm9yIGZhY2UgYmFzZWQgTG9nLUluIFN5c3RlbS5kZAIFDw8WAh8DBQ5DIy5OZXQsQXNwLk5ldGRkAgcPDxYCHwMFBDg3ODlkZAIJDw8WAh8EBR5+L1Byb2plY3QvRmFjZS1EZXRlY3Rpb24tYy5yYXJkZAIgD2QWAmYPZBYKAgEPDxYCHwMFME9ubGluZSBTcGVlZCBUZXN0IFNjcmlwdCBpbiBQSFAgYW5kIEFjdGlvblNjcmlwdGRkAgMPDxYCHwMFuwFEb3dubG9hZCBPbmxpbmUgaW50ZXJuZXQgc3BlZWQgdGVzdCBwcm9ncmFtIGRldmVsb3BlZCBpbiBBY3Rpb24gc2NyaXB0KEZsYXNoKSBhbmQgUEhQLlJlYWwtdGltZSBQaW5nIEFuYWx5c2lzLFVwbG9hZCBTcGVlZCBBbmFseXNpcyBhbmQgRG93bmxvYWQgU3BlZWQgQW5hbHlzaXMgZm9yIHlvdXIgSW50ZXJuZXQgUHJvdmlkZXIuZGQCBQ8PFgIfAwUQUEhQLEFjdGlvblNjcmlwdGRkAgcPDxYCHwMFBDU3MzhkZAIJDw8WAh8EBSB+L1Byb2plY3QvU3BlZWQtVGVzdC1FZ2dyb29tLnppcGRkAiEPZBYCZg9kFgoCAQ8PFgIfAwUeT25saW5lIE1vYmlsZSBSZWNoYXJnZSBQcm9qZWN0ZGQCAw8PFgIfAwW/A1RoaXMgcHJvamVjdCBpcyBteSBlZmZvcnQgZm9yIE9ubGluZSBNb2JpbGUgUmVjaGFyZ2Ugb2YgbW9iaWxlLiBUaGlzIHByb2plY3QgdXNlZnVsIGZvciBvbmxpbmUgcmVjaGFyZ2luZyBvZiBtb2JpbGUuIFRoaXMgU3lzdGVtIHByb3ZpZGVzIHJlY2hhcmdlIG9mIG1hbnkgbW9iaWxlIGNvbXBhbmllcyBhcyB3ZWxsIGFzIGFsbCBraW5kIG9mIHJlY2hhcmdlIGFyZSBwb3NzaWJsZS4gVGhpcyBTeXN0ZW0gd2lsbCBwcm92aWRlIGZhY2lsaXR5IGZvciBjdXN0b21lciB0byByZWNoYXJnZSBtb2JpbGUgYXQgYW55dGltZSBmcm9tIGFueXdoZXJlLiBUaGlzIFN5c3RlbSBrZWVwcyB0aGUgaGlzdG9yeSBvZiB0aGUgcGFzdCByZWNoYXJnZXMuIFRoZSB1c2VyIGhhdmUgdG8gcmVnaXN0ZXIgaGltc2VsZi5Eb3dubG9hZCBPbmxpbmUgTW9iaWxlIFJlY2hhcmdlIFN5c3RlbSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsQyMuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBDgxODNkZAIJDw8WAh8EBSx+L1Byb2plY3QvT25saW5lLU1vYmlsZS1SZWNoYXJnZS1TeXN0ZW0uZG9jeGRkAiIPZBYCZg9kFgoCAQ8PFgIfAwUjUmVhbCBUaW1lIE9ubGluZSBFeGFtaW5hdGlvbiBTeXN0ZW1kZAIDDw8WAh8DBaEBRG93bmxvYWQgUmVhbC10aW1lIE9ubGluZSBFeGFtaW5hdGlvbiBzeXN0ZW0gcHJvamVjdCBpbiBBc3AuTmV0IHdpdGggc291cmNlIGNvZGUuSW4gdGhpcyBTeXN0ZW0sV2UgaW1wbGVtZW50ZWQgVGltZXIgdG8gZ2l2ZSByZWFsIHRpbWUgYmFzZWQgZXhhbWluYXRpb24gc3lzdGVtLiBkZAIFDw8WAh8DBRVBc3AuTmV0LEMjLk5ldCxNcyBTcWxkZAIHDw8WAh8DBQQ3NzUzZGQCCQ8PFgIfBAUwfi9Qcm9qZWN0L1JlYWx0aW1lLU9ubGluZS1FeGFtaW5hdGlvbi1TeXN0ZW0ucmFyZGQCIw9kFgJmD2QWCgIBDw8WAh8DBSBPbmxpbmUgQ2xhc3NpZmllZCBQcm9qZWN0IGluIEFzcGRkAgMPDxYCHwMF4gNPbmxpbmUgQ2xhc3NpZmllZCBQb3J0YWwgaXMgYXZhaWxhYmxlIHRvIHNlcnZlIGFzIHlvdXIgb25saW5lIG1hcmtldHBsYWNlLCB3aGljaCBnaXZlcyBmb2xsb3dpbmcgYmVuZWZpdHM6T25saW5lIENsYXNzaWZpZWRzIG9mZmVyIHNpbXBsZSBzb2x1dGlvbnMgdG8geW91ciBjbGFzc2lmaWVkIGFkdmVydGlzaW5nIG5lZWRzLlByb21vdGUgeW91ciBwcm9kdWN0LCBjb21wYW55IG9yIHNlcnZpY2UgdG8gYSB2YXN0IGF1ZGllbmNlLkJ1aWxkIGNvbnNpZGVyYXRpb24sIGF3YXJlbmVzcywgYW5kIGJ1eWVyIHJlc3BvbnNlLkN1c3RvbWl6ZSBhZHMgdG8gZml0IGluZGl2aWR1YWwgb3IgY29tcGFueSBuZWVkcy5Db252ZW5pZW50IGFuZCBlYXN5IHRvIHVzZS5Eb3dubG9hZCBPbmxpbmUgQ2xhc3NpZmllZCBwcm9qZWN0IGluIEFzcC5OZXQgd2l0aCBTb3VyY2UgY29kZSxSZXBvcnQuQ2xhc3NpZmllZCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsQyMuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBDMxMzBkZAIJDw8WAh8EBTN+L1Byb2plY3QvT25saW5lLUNsYXNzaWZpZWQtUHJvamVjdC1Tb3VyY2UtQ29kZS5yYXJkZAIkD2QWAmYPZBYKAgEPDxYCHwMFJE9ubGluZSBHbG9iYWwgTWFpbGluZyBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMF7wRQcm9qZWN0IERlc2NyaXB0aW9uOiAgRSBXZWIgTWFpbCBTeXN0ZW0gcHJvamVjdCB3YXMgZGV2ZWxvcGVkIGZvciBmaW5hbCB5ZWFyIEJ0ZWNoIFN0dWRlbnRzIGFuZCBjb2RlZCB3aXRoIEphdmEgUHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuIEphdmEgcHJvdmlkZWQgd29uZGVyZnVsIG9wdGlvbnMgdG8gZGVzaWduIHdlYiBiYXNlZCBhcHBsaWNhdGlvbnMgYW5kIHRoaXMgbWFpbCBzeXN0ZW0gcHJvdmlkZXMgc2ltcGxlIGFuZCBkeW5hbWljIHdlYiBtYWlsaW5nIG9wdGlvbnMgbGlrZSBzZW5kIHRleHQgbWFpbHMsIG1lZGlhIGZpbGVzIHVzaW5nIFNNVFAsIElNQVAgcHJvdG9jb2wgc2VydmVycy4gSmF2YSBtYWlsIHdlYiBzZXJ2ZXJzIGFuZCBNb3ppbGxhIHdlYiBicm93c2Vycy4gVXNlciBoYXMgdG8gbG9naW4gd2l0aCBoaXMvaGVyIGNyZWRlbnRpYWxzIGFuZCBzZW5kIG1haWxzIHRvIG90aGVycyBieSB1c2luZyBjb21wb3NlIGJ1dHRvbiwgc2VlIHRoZSBtYWlscyByZWNlaXZlZCBmcm9tIG90aGVycyBpbiBJbmJveCBmb2xkZXIsIGFuZCBvdGhlciBvcHRpb25zIGxpa2UgZHJhZnQsIHNlbmQgbWFpbHMsIGV0Yy5Eb3dubG9hZCBFbWFpbCBTeXN0ZW0gaW4gSmF2YSB3aXRoIFNvdXJjZSBjb2RlLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUEODI5NGRkAgkPDxYCHwQFIX4vUHJvamVjdC9HbG9iYWwtRW1haWwtU3lzdGVtLnppcGRkAiUPZBYCZg9kFgoCAQ8PFgIfAwUmT25saW5lIEdvb2RzIFRyYWRpbmcgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBb4CVGhlIHByb3Bvc2VkIHN5c3RlbSBpcyBhIHdlYiBiYXNlZCBhcHBsaWNhdGlvbiB3aGljaCBhbGxvd3Mgb25lIHRvIHBsYWNlIG9yZGVycyBvbmxpbmUuIFRoZSBzeXN0ZW0gYWxsb3dzIGZhc3QgcHJvY2Vzc2luZyBvZiBvcmRlcnMuIFN5c3RlbSBhbGxvd3MgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIGJ1eWVycyBhbmQgc3VwcGxpZXJzLkRvd25sb2FkIEFTUC5OZXQgUHJvamVjdCB3aXRoIFNvdXJjZSBjb2RlLEZyZWUgRG93bmxvYWQgQ29tcGxldGUgcHJvamVjdCB3aXRoIERhdGFiYXNlIERlc2lnbixTb3VyY2UgY29kZSBhbmQgUmVwb3J0IGluIEFzcC5OZXQuZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTXMgU3FsZGQCBw8PFgIfAwUENTQyOGRkAgkPDxYCHwQFKX4vUHJvamVjdC9Hb29kcy1NYW5hZ2VtZW50LVN5c3RlbS1Bc3AucmFyZGQCJg9kFgJmD2QWCgIBDw8WAh8DBSpPbmxpbmUgQXR0ZW5kYW5jZSBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKU1BkZAIDDw8WAh8DBZ0BRG93bmxvYWQgT25saW5lIGF0dGVuZGFuY2Ugc3lzdGVtIGluIGpzcC5UaGlzIGFwcGxpY2F0aW9uIGhlbHBzIGZhY3VsdHkgdG8gZmlsbCBhbmQgYW5hbHl6ZSBhdHRlbmRhbmNlIG9ubGluZS5Eb3dubG9hZCBDb21wbGV0ZSBzb3VyY2UgY29kZSBhdmFpbGFibGUgaW4gSlNQLmRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUFMTc5MzdkZAIJDw8WAh8EBSt+L1Byb2plY3QvT25saW5lLUF0dGVuZGFuY2UtU3lzdGVtLUphdmEuemlwZGQCJw9kFgJmD2QWCgIBDw8WAh8DBSdBc3NpZ25tZW50IE1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBcAEVGhlIG1haW4gcHVycG9zZSBvZiBBc3NpZ25tZW50IG1hbmFnZW1lbnQgc29mdHdhcmUgaXMgdG8gYXV0b21hdGUgdGhlIGFzc2lnbm1lbnQgcHJvY2VzcyBvZiB3b3JrLiBVc2luZyB0aGlzIG9ubGluZSB3ZWIgYXBwbGljYXRpb24gbWFkZSBpbiBBc3AuTmV0ICBhbiBlbXBsb3llZSBjYW4gcGVyZm9ybSBhc3NpZ25tZW50IHJlbGF0ZWQgd29yayB0aG91Z2ggb25saW5lLiAgVGhpcyBPbmxpbmUgV2ViIEFwcGxpY2F0aW9uICB3aWxsIGJlIHVzZWQgYnkgdGhlIGVtcGxveWVlcyBvZiB0aGUgQ29tcGFueSAgYXQgdGhlIHRpbWUgb2YgdGhlaXIgYXNzaWduaW5nIG9mIHdvcmsgYW5kIHRoZXJlYWZ0ZXIuIEFNUyAgaXMgZGVzaWduZWQgdG8gbWFuYWdlLCBhc3NpZ25pbmcgb2Ygd29yayBwcm9jZXNzIGVudGlyZWx5IG9ubGluZSAuSXQgaXMgZmxleGlibGUgZW5vdWdoIHRvIGNvLW9wZXJhdGUgYW55IGNoYW5nZXMgb3IgZW5oYW5jZW1lbnRzIG1hZGUgbGF0ZXIgd2l0aGluIHRoZSBhcHBsaWNhdGlvbi5Eb3dubG9hZCBTb3VyY2UgY29kZSBpbiBBc3AuTmV0IG9uIEFzc2lnbm1lbnQgTWFuYWdlbWVudCBTeXN0ZW0uZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTXMgU3FsZGQCBw8PFgIfAwUENDE1NWRkAgkPDxYCHwQFKn4vUHJvamVjdC9Bc3NpZ25tZW50LU1hbmFnZW1lbnQtU3lzdGVtLnJhcmRkAigPZBYCZg9kFgoCAQ8PFgIfAwUKQ2hhdCByb29tIGRkAgMPDxYCHwMFNEZyZWUgRG93bmxvYWQgQ2hhdCBSb29tIFByb2plY3QgSW4gUGhwIFdpdGggTXkgc3FsICBkZAIFDw8WAh8DBQlQSFAsTXlTcWxkZAIHDw8WAh8DBQUxMzQ2MWRkAgkPDxYCHwQFFn4vUHJvamVjdC9jaC1yby1wci56aXBkZAIpD2QWAmYPZBYKAgEPDxYCHwMFJU9ubGluZSBKb2IgUG9ydGFsIFByb2plY3QgaW4gSmF2YSxKU1BkZAIDDw8WAh8DBbwESW4gdGhlIHByb3Bvc2VkIHN5c3RlbSB3ZSBwcm9wb3NlIHRvIGNvbXB1dGVyaXplIHRoZSBwbGFjZW1lbnQgYWN0aXZpdGllcy4gSW4gdGhlIGV4aXN0aW5nIHN5c3RlbSwgYWxsIGRhdGEgcHJvY2Vzc2luZyBpcyBkb25lIG1hbnVhbGx5LiBXaGVuIHRoZXJlIGFyZSBhIGxvdCBvZiBpc3N1ZXMgc3VjaCBhcyByZXRyaWV2YWwgYW5kIHN0b3JhZ2Ugb2YgdGhlIGluZm9ybWF0aW9uIGFuZCBrZWVwaW5nIHRyYWNrIG9mIHRoZW0gYmVjb21lcyBhIHRlZGlvdXMgdGFzay4gQnkgaW1wbGVtZW50aW5nIGEgY29tcHV0ZXJpemVkIHN5c3RlbSwgdGhlIGxpbWl0YXRpb24gaW4gdGhlIHByZXNlbnQgc3lzdGVtIHdpbGwgYmUgcmVkdWNlZC4gTWFucG93ZXIgY2FuIGJlIHJlZHVjZWQgdG8gYSBncmVhdCBleHRlbnQgYW5kIGVmZmljaWVuY3kgYW5kIGFjY3VyYWN5IGNhbiBiZSBpbmNyZWFzZWQgdG8gbWFuaWZvbGQuIE1vcmUgb3ZlciBjb25zdW1wdGlvbiBvZiB0aW1lIGNhbiBiZSByZWR1Y2VkIHRvIGZhciBncmVhdGVyIGV4dGVuZCBieSB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIHByb3Bvc2VkIHN5c3RlbS5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBTEwMDQzZGQCCQ8PFgIfBAUxfi9Qcm9qZWN0L09ubGluZS1Kb2ItUG9ydGFsLUphdmEtUHJvamVjdC1jb2RlLnJhcmRkAioPZBYCZg9kFgoCAQ8PFgIfAwUiSG9zcGl0YWwgTWFuYWdlbWVudCBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFnQVIb3NwaXRhbCBNYW5hZ2VtZW50IFN5c3RlbSAgaXMgYSBjb21wdXRlcml6ZWQgbWFuYWdlbWVudCBzeXN0ZW0gcHJvamVjdCBkZXZlbG9wZWQgaW4gamF2YSBmb3IgbWFraW5nIGFsbCB0YXNrIG9mIGhvc3BpdGFsIGF1dG9tYXRlZC4gVGhpcyBtYW5hZ2VtZW50IHN5c3RlbSBoYXMgYmVlbiBkZXZlbG9wZWQgdG8gYnVpbGQgYSBtYW5hZ2VtZW50IHN5c3RlbSB0byBtYW5hZ2UgRW1wbG95ZWVzLCBEb2N0b3JzIChjb25zdWx0YW50cyksIE51cnNlcywgUGF0aWVudHMsIEJpbGxzLCBhbmQgQ29tcGxhaW5zIGV0Yy4gVGhpcyBzeXN0ZW0gYWxzbyBrZWVwcyB0aGUgcmVjb3JkcyBvZiBoYXJkd2FyZSBhc3NldHMgYmVzaWRlcyBzb2Z0d2FyZSBvZiB0aGlzIG9yZ2FuaXphdGlvbi4gVGhlIHByb3Bvc2VkIHN5c3RlbSB3aWxsIGtlZXAgYSB0cmFjayBvZiBFbXBsb3llZXMsIERvY3RvcnMsIFBhdGllbnRzLCBBY2NvdW50cyBhbmQgZ2VuZXJhdGlvbiBvZiByZXBvcnQgcmVnYXJkaW5nIHRoZSBwcmVzZW50IHN0YXR1cy4gVGhpcyBwcm9qZWN0IGhhcyBHVUkgYmFzZWQgaW50ZXJmYWNlICB0aGF0IHdpbGwgaGVscCBpbiBzdG9yaW5nLCB1cGRhdGluZyBhbmQgcmV0cmlldmluZyB0aGUgRGF0YSAgdGhyb3VnaCB2YXJpb3VzIHVzZXItZnJpZW5kbHkgbWVudS1kcml2ZW4gZGVzaWducy5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUFMjIzMTJkZAIJDw8WAh8EBSh+L1Byb2plY3QvSG9zcGl0YWwtbWFuYWdlbWVudC1zeXN0ZW0ucmFyZGQCKw9kFgJmD2QWCgIBDw8WAh8DBR5QYWNrZXQgU25pZmZlciBQcm9qZWN0IGluIEphdmFkZAIDDw8WAh8DBYoCUGFja2V0IFNuaWZmZXIgcHJvamVjdCBpcyBhIG5ldHdvcmsgdXRpbGl0eSBzb2Z0d2FyZSB3aGljaCBjYW4gYmUgdXNlZCB0byB0cmFjZSBwYWNrZXQuTGF0ZXN0IE5ldHdvcmtpbmcgcHJvamVjdCBkZXZlbG9wZWQgaW4gamF2YSBmb3Igc3R1ZGVudC5UaGlzIHNvZnR3YXJlIGNhbiB0cmFjZSBuZXR3b3JrIHBhY2tldCBtdWNoIG1vcmUgbGlrZSBzbmlmZmVyLHNuaWZmaW5nIGRvZy5Eb3dubG9hZCBjb21wbGV0ZSBzb3VyY2UgY29kZSBhdmFpbGFibGUgaW4gamF2YS5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUENTI3MGRkAgkPDxYCHwQFKX4vUHJvamVjdC9QYWNrZXQtU25pZmZlci1Qcm9qZWN0LUphdmEuemlwZGQCLA9kFgJmD2QWCgIBDw8WAh8DBStPbmxpbmUgQ29udGVudCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBBc3AuTmV0ZGQCAw8PFgIfAwXlAiBNb2JpbGUgQ01TIG9yIENvbnRlbnQgbWFuYWdlbWVudCBzeXN0ZW0gcHJvamVjdCBpcyBhIG1hc3RlcuKAmXMgcHJvamVjdCBkZXZlbG9wZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIEFzcC5OZXQgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuIFRoaXMgc29mdHdhcmUgaXMgdXNlZCB0byBhZGQgcHJvZHVjdHMsIGJ1eSBwcm9kdWN0cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBtb2JpbGUgc3RvcmVzIHVzaW5nIG1vYmlsZSBwaG9uZS5Eb3dubG9hZCBDb250ZW50IG1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXQsT25saW5lIENvbnRlbnQgbWFuYWdlbWVudCBTeXN0ZW0gaW4gQyMuTmV0LmRkAgUPDxYCHwMFDkFzcC5OZXQsQyMuTmV0ZGQCBw8PFgIfAwUENDE4MmRkAgkPDxYCHwQFL34vUHJvamVjdC9Db250ZW50LU1hbmFnZW1lbnQtU3lzdGVtLUFzcC1OZXQuemlwZGQCLQ9kFgJmD2QWCgIBDw8WAh8DBSBJbWFnZSBFbmNyeXB0aW9uIFByb2plY3QgaW4gSmF2YWRkAgMPDxYCHwMFuANBbHRob3VnaCB0aGVyZSBhcmUgbWFueSBpbWFnZSBlbmNyeXB0aW9uIHRlY2huaXF1ZXMgbm9uZSBvZiB0aGVtIGFyZSBzdWl0YWJsZSBmb3IgdGhlIG5ldHdvcmtpbmcgc3lzdGVtcy4gU28gdGhlIG1haW4gc2NvcGUgb2Ygb3VyIHByb2plY3Qgd2FzIHRvIHByb3ZpZGUgc2VjdXJpdHkgZm9yIHRoZSBpbWFnZXMgaW4gdGhlIG5ldHdvcmtpbmcgc3lzdGVtcy4gT3VyIHByb2plY3QgcHJvdmlkZXMgc2FmZSB3YXlzIG9mIG1lYW5zIHRvIHRyYW5zZmVyIGltYWdlcyBiZXR3ZWVuIHRoZSBuZXR3b3JraW5nIHN5c3RlbXMgY29uZmlkZW50aWFsbHkuRG93bmxvYWQgRW5jcnlwdGlvbiBvZiBJbWFnZSBBcHBsaWNhdGlvbiB3aXRoIHNvdXJjZSBjb2RlIGluIEphdmEuRnVsbCBTb3VyY2UgY29kZSB3aXRoIERvY3VtZW50YXRpb24gb2YgSW1hZ2UgRW5jcnlwdGlvbiBpbiBKYXZhLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQUxMjI4MGRkAgkPDxYCHwQFJn4vUHJvamVjdC9JbWFnZS1FbmNyeXB0aW9uLWluIEphdmEucmFyZGQCLg9kFgJmD2QWCgIBDw8WAh8DBR5PbmxpbmUgTGVhcm5pbmcgU3lzdGVtIGluIEphdmFkZAIDDw8WAh8DBaMDT25saW5lIENvdXJzZSBQb3J0YWwgd29ya3MgdG8gaW1wbGVtZW50ICYgcnVuIHRoZSBlLWVkdWNhdGlvbi9lLWxlYXJuaW5nIGluaXRpYXRpdmVzIG9mIGFuIG9yZ2FuaXphdGlvbi5CYXNlZCBvbiBkaWZmZXJlbnQgbmVlZHMgb2YgZWR1Y2F0aW9uYWwgaW5zdGl0dXRpb25zIE9ubGluZSBjb3Vyc2UgUG9ydGFsIHByb3ZpZGVzIGEgc2VnbWVudCBzcGVjaWZpYyBlLWxlYXJuaW5nICYgZGlzdGFuY2UgZWR1Y2F0aW9uIHBsYXRmb3JtIGZvciBhIENhbXB1cy5UaGUgZm9jdXMgb2YgT25saW5lIGNvdXJzZSBQb3J0YWwgaXMgdG8gaGF2ZSBhbiBlLWxlYXJuaW5nIHBsYXRmb3JtIHRoYXQgaXMgc2VnbWVudCBzcGVjaWZpYywgY29udmVuaWVudGx5IHNjYWxhYmxlIHRvIGNoYW5naW5nIG5lZWRzIGFuZCBpcyBxdWljayB0byBpbXBsZW1lbnRkZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBDk3OTVkZAIJDw8WAh8EBR1+L1Byb2plY3QvT25saW5lIExlYXJuaW5nLnJhcmRkAi8PZBYCZg9kFgoCAQ8PFgIfAwUsT25saW5lIExpYnJhcnkgTWFuYWdlbWVuICBTeXN0ZW0gaW4gSlNQLEphdmFkZAIDDw8WAh8DBYYCT25saW5lIExpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW0gaW4gSmF2YSBpcyBhIHdlYiBhcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gSlNQLkRvd25sb2FkIHNvdXJjZSBjb2RlIGZvciBPbmxpbmUgTGlicmFyeSAgTWFuYWdlbWVudCBzeXN0ZW0uRnJlZSBzb3VyY2UgY29kZSBhdmFpbGFibGUgaW4gSmF2YSBmb29yIE9ubGluZSBMaWJyYXJ5IE1hbmFnZW1lbnQgU3lzdGVtLkZ1bGwgcHJvamVjdCBpbiBKU1AgZm9yIExpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW0uIGRkAgUPDxYCHwMFCEphdmEsSlNQZGQCBw8PFgIfAwUEOTkzNGRkAgkPDxYCHwQFHH4vUHJvamVjdC9vbmxpbmUtbGlicmFyeS56aXBkZAIwD2QWAmYPZBYKAgEPDxYCHwMFI09ubGluZSBTaG9wcGluZyBXZWJzaXRlIGluIEpTUCxKYXZhZGQCAw8PFgIfAwXUAURvd25sb2FkIG9ubGluZSBTaG9wcGluZyB3ZWJzaXRlIGluIEphdmEgU2VydmVyIFBhZ2VzLk9ubGluZSBzaG9wcGluZyBjYXJ0IGluIGphdmEgaXMgYSBmcmVlIHNvdXJjZSBjb2RlIGZvciBmaW5hbCB5ZWFyIHByb2plY3QgZGV2ZWxvcGVkIHdpdGggRGF0YWJhc2UuRG93bmxvYWQgT25saW5lIFNob3BwaW5nIHdlYnNpdGUoRS1Db21tZXJjZSBXZWJzaXRlKWluIGphdmEuZGQCBQ8PFgIfAwUISmF2YSxKU1BkZAIHDw8WAh8DBQUxMzg0NWRkAgkPDxYCHwQFHH4vUHJvamVjdC9vbmxpbmUtc2hvcGluZy56aXBkZAIxD2QWAmYPZBYKAgEPDxYCHwMFHk9ubGluZSBTaG9wcGluZyBXZWJzaXRlIGluIEpTUGRkAgMPDxYCHwMF2wFFLWNvbW1lcmNlIGlzIGEgcG9wdWxhciBwcm9qZWN0IGFtb25nIHN0dWRlbnQuRG93bmxvYWQgb25saW5lIFNob3BwaW5nIHdlYnNpdGUgaW4gSmF2YS5PbmxpbmUgc2hvcHBpbmcgY2FydCBpbiBqYXZhIGlzIGEgZnJlZSBzb3VyY2UgY29kZSBmb3IgZmluYWwgeWVhciBwcm9qZWN0IGRldmVsb3BlZCBpbiBqYXZhLkRvd25sb2FkIE9ubGluZSBTaG9wcGluZ3dlYnNpdGUgaW4gamF2YS5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBDc1NThkZAIJDw8WAh8EBSJ+L1Byb2plY3QvT25saW5lU2hvcHBpbmdTeXN0ZW0uemlwZGQCMg9kFgJmD2QWCgIBDw8WAh8DBSJPbmxpbmUgQ2hhdCBBcHBsaWNhdGlvbiBpbiBBc3AuTmV0ZGQCAw8PFgIfAwX4AU9ubGluZSBjaGF0dGluZyBpcyBvbmUgb2YgdGhlIHBvcHVsYXIgbWV0aG9kIGFtb25nIHBlb3BsZSBmb3IgY29tbXVuaWNhdGlvbi5Eb3dubG9hZCBDb21wbGV0ZSBzb3VyY2UgY29kZSBGb3Igb25saW5lIGNoYXQgYXBwbGljYXRpb24sQ2hhdCBhcHBsaWNhdGlvbiB3aXRoIHNvdXJjZSBjb2RlLE9ubGluZSBDaGF0IGFwcGxpY2F0aW9uIGluIEFzcC5OZXQuRnJlZSBTb3VyY2UgY29kZSBmb3Igb25saW5lIENoYXQgQXBwbGljYXRpb24uZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTXMgU3FsZGQCBw8PFgIfAwUEODU1N2RkAgkPDxYCHwQFGH4vUHJvamVjdC9TaW1wbGVDaGF0LnJhcmRkAjMPZBYCZg9kFgoCAQ8PFgIfAwUwU3R1ZGVudCBBdHRlbmRhbmNlIFRyYWNrZXIgU3lzdGVtIFByb2plY3QgaW4gUEhQZGQCAw8PFgIfAwWQAk9ubGluZSBBdHRlbmRhbmNlIFN5c3RlbSBpbiBQSFAgaXMgYSBXZWIgYXBwbGljYXRpb24gdG8gcGVyZm9ybSBtb3N0IGNvbXBsZXggdGFzayBvZiBhdHRlbmRhbmNlIGFuYWx5c2lzLlRoaXMgd2ViIGFwcGxpY2F0aW9uIGlzIHZlcnkgaGVscGZ1bCBpbiBtYWludGFpbmluZyBzdHVkZW50IGF0dGFuZGFuY2UgYW5kIGdlbmVyYXRpbmcgdmFyaW91cyBhbmFseXNpcyByZXBvcnQgcXVpY2tseS5WZXJ5IGhlbHBmdWwgYXBwbGljYXRpb24gZm9yIHNjaG9vbCBhbmQgY29sbGVnZXMuZGQCBQ8PFgIfAwUJUEhQLE15U3FsZGQCBw8PFgIfAwUFMjI0OTJkZAIJDw8WAh8EBRZ+L1Byb2plY3QvYXQtdHItc3kuemlwZGQCNA9kFgJmD2QWCgIBDw8WAh8DBSJPbmxpbmUgUXVpeiBTeXN0ZW0gUHJvamVjdCBpbiBKYXZhZGQCAw8PFgIfAwWKAUZyZWUgRG93bmxvYWQgT25saW5lIFF1aXogU3lzdGVtIFByb2plY3QgaW4gSmF2YSBvciBPbmxpbmUgRXhhbSBTeXN0ZW0gUHJvamVjdCBpbiBKYXZhICBGb3IgQmNhLE1jYSxEaXBsb21hIENvbXB1dGVyIEVuZ2luZWVyaW5nIFN0dWRlbnRzIGRkAgUPDxYCHwMFEUphdmEsRWNsaXBzZSxKMmVlZGQCBw8PFgIfAwUFMTIxMjBkZAIJDw8WAh8EBRZ+L1Byb2plY3QvamEtcXUtYXAuemlwZGQCNQ9kFgJmD2QWCgIBDw8WAh8DBRZEYXRhIExlYWthZ2UgRGV0ZWN0aW9uZGQCAw8PFgIfAwVDRmluZCBhIERhdGEgTGVha2FnZSBpbiB5b3VyIGRhdGFiYXNlIGJ5IHVzaW5nIHRoaXMgc21hcnQgdGVjaG5pcXVlLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQQ4NDcxZGQCCQ8PFgIfBAUjfi9VcGxvYWQvRGF0YV9MZWFrYWdlX0RldGVjdGlvbi5wZGZkZAI2D2QWAmYPZBYKAgEPDxYCHwMFJ0EgY29kZSBGb3IgR2VuZXJhdGluZyAyIERpbWVuc2lvbiBHcmFwaGRkAgMPDxYCHwMFa0dlbmVyYXRpbmcgYSBHcmFwaCBpbiBEb3RuZXQgaXMgc29tZSB3aGF0IHRyaWNreS5UaGlzIENvZGUgRXhwbGFpbiBjb21wbGV0ZSBleGFtcGxlIG9mIEdlbmVyYXRpbmcgMkQgR3JhcGguZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDk3NDJkZAIJDw8WAh8EBRZ+L1Byb2plY3QvMkQgR3JhcGgucmFyZGQCNw9kFgJmD2QWCgIBDw8WAh8DBR9PbmxpbmUgQ2xpbmljIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwViRnJlZSBkb3dubG9hZCBQcm9qZWN0IE9ubGluZSBDbGluaWMgTWFuYWdlbWVudCBTeXN0ZW0gaW4gUGhwIHdpdGggbXkgc3FsIHdpdGggY29tcGxldGUgc291cmNlIGNvZGVkZAIFDw8WAh8DBQNQSFBkZAIHDw8WAh8DBQUzMDg5M2RkAgkPDxYCHwQFGn4vUHJvamVjdC9jbGluaWNvc2lnaHQucmFyZGQCOA9kFgJmD2QWCgIBDw8WAh8DBRZTdWRva3UgR2FtZSBvbiBBbmRyb2lkZGQCAw8PFgIfAwX0AU9uZSBvZiB0aGUgTW9zdCBwb3B1bGFyIGdhbWUgb2YgdGhlIHdvcmxkIFN1ZG9rdSBpcyBhdmFpbGFibGUgb24gbW9zdCBvZiB0aGUgbW9iaWxlIHBsYXRmb3JtLkFuZHJvaWQgbWFya2V0IGlzIGdhaW5pbmcgbW9zdCBwb3B1bGFyaXR5LG1ham9yIGFwcGxpY2F0aW9ucyBhcmUgYXZhaWxhYmxlIG9uIHBsYXlzdG9yZS5TVURPS1Ugb24gYW5kcm9pZCBpcyBhdmFpbGFibGUgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZSBoZXJlLiBkZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUENTYxM2RkAgkPDxYCHwQFH34vUHJvamVjdC9TdWRva3Ugb24gQW5kcm9pZC56aXBkZAI5D2QWAmYPZBYKAgEPDxYCHwMFIUFuZHJvaWQgUHJvamVjdCBmb3IgQm91bmNpbmcgQmFsbGRkAgMPDxYCHwMFowJBbmRyb2lkIGdhbWUgb24gYm91bmNpbmcgYmFsbCB3aXRoIHNvdXJjZSBjb2RlIGlzIGF2YWlsYWJsZSBmb3IgZnJlZSBkb3dubG9hZCBvbiBlbmdncm9vbS5jb20uIFRoaXMgcHJvamVjdCBpcyB1c2VmdWwgYXMgcmVmZXJlbmNlIGZvciBjb21wdXRlciBzY2llbmNlIHN0dWRlbnRzIHdobyBhcmUgbG9va2luZyBmb3IgYW5kcm9pZCBnYW1pbmcgcHJvamVjdHMgZm9yIGZyZWUgZG93bmxvYWQuIFN0dWRlbnRzIGNhbiB1c2UgdGhpcyBwcm9qZWN0IGFzIG1pbmkgcHJvamVjdCBvciBmaW5hbCB5ZWFyIHByb2plY3RkZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUENDc5MWRkAgkPDxYCHwQFL34vUHJvamVjdC9Cb3VuY2luZ0JhbGwtQW5kcm9pZC1FbmdnUm9vbS5Db20ucmFyZGQCOg9kFgJmD2QWCgIBDw8WAh8DBSFFeGFtLVNjaGVkdWxlciBQcm9qZWN0IEluIEFzcC5uZXRkZAIDDw8WAh8DBV9GcmVlIERvd25sb2FkIFByb2plY3QgRXhhbSBTY2hlZHVsZXIgIGluIGFzcC5uZXQgd2l0aCBzcWwgc2VydmVyIDIwMDUgd2l0aCBjb21wbGV0ZSBzb3VyY2UgY29kZWRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxNzgwOWRkAgkPDxYCHwQFHH4vUHJvamVjdC9FeGFtLVNjaGVkdWxlci5yYXJkZAI7D2QWAmYPZBYKAgEPDxYCHwMFHlN0b2NrIE1hbmFnZW1lbnQgU3lzdGVtIEluIFBocGRkAgMPDxYCHwMFWUZyZWUgRG93bmxvYWQgUHJvamVjdCBTdG9jayBNYW5hZ2VtZW50IFN5c3RlbSBpbiBwaHAgYW5kIG15c3FsIHdpdGggY29tcGxldGUgc291cmNlIGNvZGUgZGQCBQ8PFgIfAwUDUEhQZGQCBw8PFgIfAwUFMjA2MjZkZAIJDw8WAh8EBR1+L1Byb2plY3QvSW52ZXN0aW5nIFN0b2NrLnppcGRkAjwPZBYCZg9kFgoCAQ8PFgIfAwUoT25saW5lIFJlc2VydmF0aW9uIGZvciBSZW50LWEtQ2FyIGluIFBIcGRkAgMPDxYCHwMFZEZyZWUgRG93bmxvYWQgUHJvamVjdCBPbmxpbmUgUmVzZXJ2YXRpb24gZm9yIFJlbnQgYSBDYXIgaW4gUGhwIGFuZCBNeSBzcWwgd2l0aCBjb21wbGV0ZSBTb3VyY2UgQ29kZS5kZAIFDw8WAh8DBQNQSFBkZAIHDw8WAh8DBQUxNTM0MWRkAgkPDxYCHwQFGH4vUHJvamVjdC9SZW50LWEtQ2FyLnppcGRkAj0PZBYCZg9kFgoCAQ8PFgIfAwUnQmFuayBBY2NvdW50IFRyYWNrZXIgUHJvamVjdCBpbiBBbmRyb2lkZGQCAw8PFgIfAwWaAUl0IGhlbHBzIFVzZXIgb2YgYW5kcm9pZCBtb2JpbGVzIHRvIGtub3cgYWJvdXQgYmFuayBiYWxhbmNlcyAgaW4gZGlmZmVyZW50IGJhbmtzIGFuZCB0aGVyZSB0cmFuc2FjdGlvbnMgaW5mb3JtYXRpb24uUHJldHR5IEdvb2QgVUkgZGV2ZWxvcGVkIHdpdGggQW5kcm9pZC5kZAIFDw8WAh8DBQdBbmRyb2lkZGQCBw8PFgIfAwUENTkzM2RkAgkPDxYCHwQFMH4vUHJvamVjdC9BY2NvdW50VHJhY2tlckFuZHJvaWQtRW5nZ1Jvb20uQ29tLnJhcmRkAj4PZBYCZg9kFgoCAQ8PFgIfAwUvTmV0d29yayBNb25pdG9yaW5nIGFuZCBSZW1vdGUgRGVza3RvcCBpbiBDIy5OZXRkZAIDDw8WAh8DBekBVHdvIE1vZHVsZXM6b25lIGlzIGNsaWVudCBtb2RlbCBhbmQgb3RoZXIgb25lIGlzIHNlcnZlciBtb2RlbC4gTmV0d29yayBtb25pdG9yaW5nIHN5c3RlbSBwcm9qZWN0IGlzIGludGVncmF0ZWQgd2l0aCBSZW1vdGUgZGVza3RvcCBtb25pdG9yaW5nIHN5c3RlbS5XZSBwcm92aWRlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gb2YgUHJvamVjdCB3aXRoIFNvdXJjZSBjb2RlIG9mIENsaWVudCBhbmQgU2VydmVyLi5kZAIFDw8WAh8DBQZDIy5OZXRkZAIHDw8WAh8DBQUxMzkwNmRkAgkPDxYCHwQFEX4vUHJvamVjdC9OTVMucmFyZGQCPw9kFgJmD2QWCgIBDw8WAh8DBRhSYXRpbmcgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBVtGcmVlIERvd25sb2FkIFByb2plY3QgUmF0aW5nIFN5c3RlbSBpbiBBc3AubmV0LEphdmEgU2NyaXB0LEFqYXggd2l0aCBjb21wbGV0ZSBTb3VyY2UgQ29kZS4gZGQCBQ8PFgIfAwUHQXNwLm5ldGRkAgcPDxYCHwMFBTEwMzkyZGQCCQ8PFgIfBAUUfi9Qcm9qZWN0L1JhdGluZy5yYXJkZAJAD2QWAmYPZBYKAgEPDxYCHwMFGkJ1cyBUaWNrZXQgQm9va2luZyBTeXN0ZW0gZGQCAw8PFgIfAwVrRnJlZSBEb3dubG9hZCBQcm9qZWN0ICBCdXMgVGlja2V0IEJvb2tpbmcgc3lzdGVtIGluIGFzcC5uZXQuIEluIHRoaXMgUHJvamVjdCBpbmNsdWRlIHdpdGggcmVwb3J0LERhdGFiYXNlLiBkZAIFDw8WAh8DBQpBc3AuTmV0LEMjZGQCBw8PFgIfAwUFMzQwNDRkZAIJDw8WAh8EBRx+L1Byb2plY3QvVGlja2V0X0Jvb2tpbmcucmFyZGQCQQ9kFgJmD2QWCgIBDw8WAh8DBRlDb25zdW1lciBDb21wbGFpbiBTeXN0ZW0gZGQCAw8PFgIfAwV/RnJlZSBEb3dubG9hZCBQcm9qZWN0IENvbnN1bWVyIENvbXBsYWluIFN5c3RlbSAgUHJvamVjdCBtYWRlIGluIEFzcC5OZXQgd2l0aCBDIy4gRnJlZSBEb3dubG9hZCBQcm9qZWN0IHdpdGggZG93bmxvYWQgZGF0YWJhc2UgIGRkAgUPDxYCHwMFCkFzcC5OZXQsQyNkZAIHDw8WAh8DBQUxMDg2MmRkAgkPDxYCHwQFIX4vUHJvamVjdC9jb25zdW1lci1jb21wbGFpbnRzLnJhcmRkAkIPZBYCZg9kFgoCAQ8PFgIfAwUkQ29zbWV0aWMgSW52ZW50b3J5IE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVQVGhpcyBXaW5kb3cgYmFzZWQgYXBwbGljYXRpb24gZGV2ZWxvcGVkIGZvciBDb3NtZXRpYyBzaG9wIHRvIGF1dG9tYXRlIGEgcHJvY2Vzcy5kZAIFDw8WAh8DBQ1DIy5OZXQsTXMgU1FMZGQCBw8PFgIfAwUFMTA0OTdkZAIJDw8WAh8EBRZ+L1Byb2plY3QvQ29zbWV0aWMucmFyZGQCQw9kFgJmD2QWCgIBDw8WAh8DBSNXZWJzaXRlIGZvciAgR2VuZXJhdGluZyBQaG90byBBbGJ1bWRkAgMPDxYCHwMFgwFUaGlzIFdlYiBBcHBsaWNhdGlvbiB3aWxsIGdlbmVyYXRlIGF1dG9tYXRpYyBzbGlkZXNob3cgb2YgdGhlIHVzZXIgIHBob3RvLlVzZXIgY2FuIHVwbG9hZCBwaG90b3MgYW5kIGNyZWF0ZSBjdXN0b21pemVkIHBob3RvIGFsYnVtLmRkAgUPDxYCHwMFDkFzcC5OZXQsTVMgU3FsZGQCBw8PFgIfAwUFMTc4OTNkZAIJDw8WAh8EBRh+L1Byb2plY3QvUGhvdG9BbGJ1bS5yYXJkZAJED2QWAmYPZBYKAgEPDxYCHwMFIFdlYnNpdGUgYWJvdXQgRGFuY2VzIGFuZCBEYW5jZXJzZGQCAw8PFgIfAwVVU2ltcGxlIE1pbmkgcHJvamVjdCBkZXZlbG9wZWQgaW4gSHRtbCB0byBwdXQgSGFuZHMgb24gSFRNTC9QSFAsQ1NTIGFuZCBXZWIgRGVzaWduaW5nLmRkAgUPDxYCHwMFCVBIUCxNeVNxbGRkAgcPDxYCHwMFBDk5OThkZAIJDw8WAh8EBSR+L1Byb2plY3QvRGFuY2VTaXRlLUVuZ2dSb29tLkNvbS5yYXJkZAJFD2QWAmYPZBYKAgEPDxYCHwMFJm9ubGluZSBFYm9vayBSZXZpZXcgV2Vic2l0ZSBpbiBBc3AubmV0ZGQCAw8PFgIfAwWDAVdlYnNpdGUgZm9yIFJldmlld2luZyBhIEJvb2suVXNlciBjYW4gUmV2aWV3IG9uIGFueSBib29rIHdoaWNoIGNhbiBiZSB2aWV3ZWQgYnkgb3RoZXIgdXNlcnMuRnJvbnQgRW5kIGlzIEFzcC5OZXQsQyMuTmV0IGFuZCBNUyBTUUwuZGQCBQ8PFgIfAwUVQXNwLk5ldCxDIy5OZXQsTVMgU1FMZGQCBw8PFgIfAwUFMTI1OTdkZAIJDw8WAh8EBSN+L1Byb2plY3QvT25saW5lIEVib29rIFNob3BwaW5nLnJhcmRkAkYPZBYCZg9kFgoCAQ8PFgIfAwUaT25saW5lIFNoYXJlIFBvcnRhbCBpbiBKU1BkZAIDDw8WAh8DBXVXZWIgQXBwbGljYXRpb24gcHJvamVjdCBpbiBKYXZhLEpTUCBmb3Igdmlld2luZyBsaXZlIFNoYXJlIHJhdGVzLkNvbXBsZXRlIHByb2plY3Qgd2l0aCBTb3VyY2UgY29kZSBhbmQgUmVwb3J0IGluIEpTUC5kZAIFDw8WAh8DBQ9KU1AuSmF2YSxPcmFjbGVkZAIHDw8WAh8DBQUxMjE2MGRkAgkPDxYCHwQFIX4vUHJvamVjdC9PbmxpbmUgU2hhcmUgUG9ydGFsLnJhcmRkAkcPZBYCZg9kFgoCAQ8PFgIfAwUfU2VyaWFsIFBvcnQgSW50ZXJmYWNlIGluIFZiLk5ldGRkAgMPDxYCHwMFaVVzaW5nIFZiLk5ldCB0byBjb25uZWN0IHdpdGggYSBTZXJpYWwgcG9ydCBvZiBDb21wdXRlciBhbmQgT3BlcmF0ZSBhbnkgQ29tcGF0aWJsZSBEZXZpY2VzIHRvIFNlcmlhbCBQb3J0LmRkAgUPDxYCHwMFBlZiLk5ldGRkAgcPDxYCHwMFBTE3OTU1ZGQCCQ8PFgIfBAUhfi9Qcm9qZWN0L1NlcmlhbFBvcnRJbnRlcmZhY2UuemlwZGQCSA9kFgJmD2QWCgIBDw8WAh8DBSVPbmxpbmUgU29jaWFsIE5ldHdvcmtpbmctRnJpZW5kcyBDbHViZGQCAw8PFgIfAwU0b25saW5lIFNvY2lhbCBuZXR3b3JraW5nIFNpdGUgZGV2ZWxvcGVkIGluIEpTUCxKYXZhLmRkAgUPDxYCHwMFD0phdmEsSlNQLFN0cnV0c2RkAgcPDxYCHwMFBTE5MDQ3ZGQCCQ8PFgIfBAUafi9Qcm9qZWN0L0ZSSUVORFNfQ0xVQi5yYXJkZAJJD2QWAmYPZBYKAgEPDxYCHwMFI09ubGluZSBUaWNrZXQgQm9va2luZyBTeXN0ZW0gaW4gSlNQZGQCAw8PFgIfAwVpT25saW5lIFRpY2tldCBvciBSZXNlcnZhdGlvbiBzeXN0ZW0gaXMgdmVyeSBwb3B1bGFyIHRvZGF5LldlYiBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgaW4gSmF2YSxBZHZhbmNlIEphdmEuZGQCBQ8PFgIfAwUOSmF2YSxKU1AsTXlTcWxkZAIHDw8WAh8DBQUxODM4N2RkAgkPDxYCHwQFNH4vUHJvamVjdC9PbmxpbmUgUmVzZXJ2YXRpb24gaW4gSlNQLUVuZ2dSb29tLkNvbS5yYXJkZAJKD2QWAmYPZBYKAgEPDxYCHwMFIE9ubGluZSBFeGFtaW5hdGlvbiBTeXN0ZW0gaW4gU0FQZGQCAw8PFgIfAwVYQW4gT25saW5lIFN5c3RlbSBEZXZlbG9wZWQgaW4gU0FQIHdpdGggQUJBUCBmb3IgaW1wbGVtZW50YXRpb24gb2YgUHJvbW90aW9uIEV4YW1pbmF0aW9uLmRkAgUPDxYCHwMFDUpBVkEsU0FQLEFCQVBkZAIHDw8WAh8DBQQ3ODM3ZGQCCQ8PFgIfBAUTfi9Qcm9qZWN0LzIgKDEpLmRvY2RkAksPZBYCZg9kFgoCAQ8PFgIfAwUrQ29tcHJlaGVuc2l2ZSBUcmFpbmluZyBhbmQgUGxhY2VtZW50IGluIEpTUGRkAgMPDxYCHwMFZVRoZSB3ZWIgZW5hYmxlZCBpbmZvcm1hdGlvbiBtYW5hZ2VtZW50IHN5c3RlbSBkZXNpZ25lZCB0byBhdXRvbWF0ZSB0aGUgZW50aXJlIG9wZXJhdGlvbnMgb2YgYSBtb2Rlcm4uZGQCBQ8PFgIfAwUISmF2YSxKU1BkZAIHDw8WAh8DBQQ2Nzg2ZGQCCQ8PFgIfBAUXfi9Qcm9qZWN0L1BsYWNlbWVudC5kb2NkZAJMD2QWAmYPZBYKAgEPDxYCHwMFHExvYW4gQXBwcm92YWwgU3lzdGVtIGluIEphdmFkZAIDDw8WAh8DBU5UaGlzIGlzIGEgU3lzdGVtIERldmVsb3BlZCBmb3IgTG9hbiBBcHByb3ZhbCBQcm9jZXNzIGluIEJhbmsuTWFkZSBpbiBKYXZhLEpTUC5kZAIFDw8WAh8DBQhKYXZhLEpTUGRkAgcPDxYCHwMFBTE2NDgzZGQCCQ8PFgIfBAU2fi9Qcm9qZWN0L0xvYW4gQXBwcm92YWwgU3lzdGVtIGluIEpTUC1FbmdnUm9vbS5jb20ucmFyZGQCTQ9kFgJmD2QWCgIBDw8WAh8DBR1IZWFsdGggQ2VudGVyIFByb2plY3QgaW4gSmF2YWRkAgMPDxYCHwMFZVRoZSBtYWluIGludGVudGlvbiBvZiBpbnRyb2R1Y2luZyB0aGlzIHN5c3RlbSBpcyB0byByZWR1Y2UgdGhlIG1hbnVhbCB3b3JrIGF0IEhlYWx0aCBjZW50ZXIgY291bnRlcnMuZGQCBQ8PFgIfAwUKSmF2YSxNeVNxbGRkAgcPDxYCHwMFBTI0NTg3ZGQCCQ8PFgIfBAU3fi9Qcm9qZWN0L0hlYWx0aENhcmUgTWFuYWdlbWVudCBTeXN0ZW0tRW5nZ3Jvb20uQ29tLnppcGRkAk4PZBYCZg9kFgoCAQ8PFgIfAwUaSG9zcGl0YWwgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBTxGcmVlIERvd25sb2FkIHByb2plY3QgSG9zcGl0YWwgTWFuYWdlbWVudCBTeXN0ZW0gaW4gdmIubmV0DQpkZAIFDw8WAh8DBQZWYi5OZXRkZAIHDw8WAh8DBQU0ODI4MGRkAgkPDxYCHwQFJH4vUHJvamVjdC9Ib3NwaXRhbF9NMjIxMDc5OTUyMDExLnppcGRkAk8PZBYCZg9kFgoCAQ8PFgIfAwUXT25saW5lIEJ1ZGdldCBBbmFseXNpcyBkZAIDDw8WAh8DBU1GcmVlIERvd25sb2FkIFByb2plY3QgT25saW5lIEJ1ZGdldCBBbmFseXNpcyAgaW4gQXNwLm5ldCB3aXRoIHNxbCBTZXJ2ZXIgMjAwNWRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQQ5MTkxZGQCCQ8PFgIfBAUcfi9Qcm9qZWN0L0J1ZGdldEFuYWx5c2lzLnppcGRkAlAPZBYCZg9kFgoCAQ8PFgIfAwUfT25saW5lIEhvdGVsIFJlc2VydmF0aW9uIFN5c3RlbWRkAgMPDxYCHwMFQ0ZyZWUgRG93bmxvYWQgUHJvamVjdCBPbmxpbmUgUmVzZXJ2YXRpb24gU3lzdGVtIGluIFBocCB3aXRoIE15IFNxbC5kZAIFDw8WAh8DBQNQaHBkZAIHDw8WAh8DBQUxODk3NGRkAgkPDxYCHwQFLH4vUHJvamVjdC9Ib3RlbF9SZXNlcnZhdGlvbl9TeXN0ZW1fdjIuMzUucmFyZGQCUQ9kFgJmD2QWCgIBDw8WAh8DBStPbmxpbmUgQWlyIFRpY2tldCBCb29raW5nIFN5c3RlbSBpbiBBc3AubmV0ZGQCAw8PFgIfAwVCRnJlZSBEb3dubG9hZCBQcm9qZWN0IE9ubGluZSBBaXIgVGlja2V0IEJvb2tpbmcgU3lzdGVtIGluIEFzcC5uZXQuZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBTE4NzQ5ZGQCCQ8PFgIfBAUYfi9Qcm9qZWN0L2FpciB0aWNrZXQucmFyZGQCUg9kFgJmD2QWCgIBDw8WAh8DBSxPbmxpbmUgRXhhbWluYXRpb24gU3lzdGVtIFByb2plY3QgaW4gQXNwLm5ldGRkAgMPDxYCHwMFQkZyZWUgRG93bmxvYWQgUHJvamVjdCBPbmxpbmUgRXhhbWluYXRpb24gU3lzdGVtIFByb2plY3QgaW4gQXNwLm5ldGRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUyMjYxOGRkAgkPDxYCHwQFF34vUHJvamVjdC9XZWJTaXRlMTIucmFyZGQCUw9kFgJmD2QWCgIBDw8WAh8DBRxEaWdpdGFsIFBob3RvIEdhbGxlcnkgU3lzdGVtZGQCAw8PFgIfAwVYRnJlZSBEb3dubG9hZCBQcm9qZWN0IERpZ2l0YWwgUGhvdG8gR2FsbGVyeSBTeXN0ZW0gaW4gQXNwLk5ldCBXaXRoIENvbXBsZXRlIFNvdXJjZSBDb2RlLmRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxNDk4NWRkAgkPDxYCHwQFJX4vUHJvamVjdC9EaWdpdGFsX1BvcnRpY29fUHJvamVjdC5yYXJkZAJUD2QWAmYPZBYKAgEPDxYCHwMFG0NvbGxlZ2UgSW5mb3JtYXRpb24gU3lzdGVtIGRkAgMPDxYCHwMFWEZyZWUgRG93bmxvYWQgUHJvamVjdCBDb2xsZWdlIEluZm9ybWF0aW9uICBTeXN0ZW0gaW4gYXNwLm5ldCBXaXRoIFNvdXJjZSBDb2RlIGFuZCBSZXBvcnRkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUFMjQ4NDZkZAIJDw8WAh8EBSF+L1Byb2plY3QvQ29sbGVnZV9JbmZvcm1hdGlvbi5yYXJkZAJVD2QWAmYPZBYKAgEPDxYCHwMFJkpld2VsbGVyeSBNYW5hZ2VtZW50IFN5c3RlbSBpbiBhc3AubmV0ZGQCAw8PFgIfAwU8RnJlZSBEb3dubG9hZCBQcm9qZWN0IEpld2VsbGVyeSBNYW5hZ2VtZW50IFN5c3RlbSBpbiBhc3AubmV0ZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBTE0OTI0ZGQCCQ8PFgIfBAUmfi9Qcm9qZWN0L2pldmxsYXJ5c2hvcCBJbiBFbmdnUm9vbS56aXBkZAJWD2QWAmYPZBYKAgEPDxYCHwMFJlRpbWUgU2ltdWxhdGlvbiBTeXN0ZW0gUHJvamVjdCBpbiBKYXZhZGQCAw8PFgIfAwWAAUZyZWUgRG93bmxvYWQgUHJvamVjdCBpbiBKYXZhLUpTUFRpbWUgU2ltdWxhdGlvbiBTeXN0ZW0uQSBUaW1lIFNpbXVsYXRpb24gU3lzdGVtIGlzIGEgdW5pcXVlIHByb2plY3QgZm9yIFRpbWUgTWFuYWdlbWVudCBTeXN0ZW0uZGQCBQ8PFgIfAwUPSmF2YS1KU1AsT3JhY2xlZGQCBw8PFgIfAwUFMTA2NjFkZAIJDw8WAh8EBRh+L1Byb2plY3QvdHNzRHJvcGJveC5yYXJkZAJXD2QWAmYPZBYKAgEPDxYCHwMFIkV2ZW50IE1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXRkZAIDDw8WAh8DBWdBIFByb2Zlc3Npb25hbCBDb2RlIHdyaXR0ZW4gZm9yIEV2ZW50IE1hbmFnZW1lbnQgU3lzdGVtIGluIEFzcC5OZXQuRG93bmxvYWQgQ29tcGxldGUgU291cmNlIGNvZGUgRnJlZS4gZGQCBQ8PFgIfAwURQXNwLk5ldCxDIyxNcyBTcWxkZAIHDw8WAh8DBQUxNTA1MWRkAgkPDxYCHwQFFX4vUHJvamVjdC9wcm9qZWN0LnppcGRkAlgPZBYCZg9kFgoCAQ8PFgIfAwUlSW52ZW50b3J5IG1hbmFnZW1lbnQgU3lzdGVtIGluIFZCIDYuMGRkAgMPDxYCHwMFb0EgUHJvamVjdCBkZXZlbG9wZWQgaW4gVmIgNi4wIEZvciBJbnZlbnRvcnkgTWFuYWdlbWVudCBTeXN0ZW0uRnJlZSBUbyBEb3dubG9hZCBTb3VyY2UgY29kZSBpbiBWYihWaXN1YWwgQmFzaWMpLmRkAgUPDxYCHwMFFnZpc3VhbCBCYXNpYyxWQixBY2Nlc3NkZAIHDw8WAh8DBQUyNzk0OWRkAgkPDxYCHwQFHn4vUHJvamVjdC9JbnZlbnRvcnktU3lzdGVtLnppcGRkAlkPZBYCZg9kFgoCAQ8PFgIfAwUpRnJlZSBTb3VyY2UgQ29kZSBIb3N0ZWwgbWFuYWdlbWVudCBpbiBQSFBkZAIDDw8WAh8DBXlUaGlzIHByb2plY3QgaXMgZGV2ZWxvcGVkIGluIFBIUCBmb3IgSG9zdGVsIE1hbmFnZW1lbnQgU3lzdGVtKEhNUykuRnJlZSB0byBEb3dubG9hZCBQcm9qZWN0IHdpdGggRnVsbCBTb3VyY2UgY29kZSBpbiBQSFAuZGQCBQ8PFgIfAwUJUEhQLE15U3FsZGQCBw8PFgIfAwUFMTYzNjVkZAIJDw8WAh8EBTF+L1Byb2plY3QvSG9zcGl0YWwgTWFuYWdlbWVudFBIUC1FbmdnUm9vbS5jb20uemlwZGQCWg9kFgJmD2QWCgIBDw8WAh8DBR5Nb2JpbGUgVHJhY2tpbmcgU3lzdGVtIGluIEphdmFkZAIDDw8WAh8DBbYBVGhpcyBpcyBhIHdlYiBhcHBsaWNhdGlvbi4gVGhpcyBhcHBsaWNhdGlvbiB0cmFja3MgdGhlIG1vYmlsZSBsb2NhdGlvbiBpbiBldmVyeSA1IHNlY29uZHMgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBDZW50cmFsIENvbm5lY3RlZCBTZXJ2ZXJzLkZyZWUgVG8gRG93bmxvYWQgd2l0aCBDb21wbGV0ZSBTb3VyY2UgY29kZS5kZAIFDw8WAh8DBQhKYXZhLEpzcGRkAgcPDxYCHwMFBTMyNTgzZGQCCQ8PFgIfBAUdfi9Qcm9qZWN0L21vYmlsZSB0cmFja2luZy5yYXJkZAJbD2QWAmYPZBYKAgEPDxYCHwMFLFJlYWwgVGltZSBKYXZhIEJhc2VkIEF1Y3Rpb24gU3lzdGVtIHByb2plY3QgZGQCAw8PFgIfAwVqVGhpcyBpcyBhIG9ubGluZSBhdWN0aW9uIHNpdGUgZm9yIHNlbGxpbmcuSXQgaXMgaW1wbGVtZW50ZWQgaW4gamF2YS5mcmVlIFRvIGRvd25sb2FkIENvbXBsZXRlIFNvdXJjZSBjb2RlLmRkAgUPDxYCHwMFBEphdmFkZAIHDw8WAh8DBQUxNDcxMGRkAgkPDxYCHwQFGX4vUHJvamVjdC8oZWNvbW1lcmNlKS5yYXJkZAJcD2QWAmYPZBYKAgEPDxYCHwMFHFNpbXBsZSBHeW0gTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBVdBIFByb2plY3QgZGV2ZWxvcGVkIGluIFZCIGZvciBGaXRuZXNzIENlbnRlci5GcmVlIFRvIERvd25sb2FkIHByb2plY3Qgd2l0aCBTb3VyY2UgY29kZS5kZAIFDw8WAh8DBRZ2aXN1YWwgQmFzaWMsVkIsQWNjZXNzZGQCBw8PFgIfAwUFMjIyNzBkZAIJDw8WAh8EBR9+L1Byb2plY3QvRmluYW5jaWFsIFByb2plY3QuemlwZGQCXQ9kFgJmD2QWCgIBDw8WAh8DBSFyZXRhaWwgUGhhcm1hY3kgTWFuYWdlbWVudCBTeXN0ZW1kZAIDDw8WAh8DBakBYSBSZXRhaWwgUGhhcm1hY3kgTWFuYWdlbWVudCBTeXN0ZW0gaXMgZGV2ZWxvcGVkIGZvciBQaGFybWEgY29tcGFueSB0byBtYWludGFpbiB0aGVpciBSZXRhaWwgY2hhaW4uQ29tcGxldGUgSW52ZW50b3J5IG1hbmFnZW1lbnQgaW4gVmIgZnJlZSB0byBkb3dubG9hZCBhY2FkZW1pYyBQcm9qZWN0LmRkAgUPDxYCHwMFFnZpc3VhbCBCYXNpYyxWQixBY2Nlc3NkZAIHDw8WAh8DBQUyMDQ1M2RkAgkPDxYCHwQFHX4vUHJvamVjdC9yZXRhaWxfcGhhcm1hY3kuemlwZGQCXg9kFgJmD2QWCgIBDw8WAh8DBRdUYXNrIE1hbmFnZXIgZm9yIE1vYmlsZWRkAgMPDxYCHwMFOlRoaXMgaXMgYSBtb2JpbGUgYXBwbGljYXRpb24gZGV2ZWxvcGVkIHVzaW5nIEhUTWw1LEpxdWVyeS5kZAIFDw8WAh8DBQ5Nb2JpbGUsQW5kcm9pZGRkAgcPDxYCHwMFBDMyNTFkZAIJDw8WAh8EBRl+L1Byb2plY3QvVGFza1RyYWNrZXIuemlwZGQCXw9kFgJmD2QWCgIBDw8WAh8DBSVDb2xsZWdlIFdlYiBQb3J0YWwgcHJvamVjdCBpbiBBc3AubmV0ZGQCAw8PFgIfAwVARnJlZSBkb3dubG9hZCBwcm9qZWN0IENvbGxlZ2UgV2ViIFBvcnRhbCBwcm9qZWN0IG1hZGUgaW4gQXNwLm5ldGRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxNTQwM2RkAgkPDxYCHwQFHn4vUHJvamVjdC9DV1AoMjctNC0xMSkgTmV3LnJhcmRkAmAPZBYCZg9kFgoCAQ8PFgIfAwUYb25saW5lIHNob3BwaW5nIHByb2plY3QgZGQCAw8PFgIfAwUwRnJlZSBEb3dubG9hZCBQcm9qZWN0IE9ubGluZSBTaG9wcGluZyBpbiBhc3AubmV0ZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBTI3ODU4ZGQCCQ8PFgIfBAUTfi9Qcm9qZWN0L2ZpbmFsLnJhcmRkAmEPZBYCZg9kFgoCAQ8PFgIfAwUWT25saW5lIEJhbmtpbmcgUHJvamVjdGRkAgMPDxYCHwMFMEZyZWUgRG93bmxvYWQgcHJvamVjdCBvbmxpbmUgQmFua2luZyBpbiBhc3AubmV0IGRkAgUPDxYCHwMFB0FzcC5OZXRkZAIHDw8WAh8DBQUxNjQzMWRkAgkPDxYCHwQFHX4vUHJvamVjdC9pbnRlcm5ldGJhbmtpbmcuemlwZGQCYg9kFgJmD2QWCgIBDw8WAh8DBRczRCBCb3VuY2UgZ2FtZSBJbiBDL0MrK2RkAgMPDxYCHwMFKUZyZWUgZG93bmxvYWQgUHJvamVjdCAgZ2FtZSBtYWRlIGluIGMvYysrZGQCBQ8PFgIfAwUFYy9jKytkZAIHDw8WAh8DBQUyMjc5MGRkAgkPDxYCHwQFIn4vUHJvamVjdC8zRCBib3VuY2UgRmluYWwgQ29kZS5yYXJkZAJjD2QWAmYPZBYKAgEPDxYCHwMFGUxpYnJhcnkgbWFuYWdlbWVudCBzeXN0ZW1kZAIDDw8WAh8DBS9MaWJyYXJ5IG1hbmFnZW1lbnQgc3lzdGVtIHByb2plY3QgbWFkZSBpbiBjL0MrK2RkAgUPDxYCHwMFBWMvYysrZGQCBw8PFgIfAwUFMTYzOTdkZAIJDw8WAh8EBSB+L1Byb2plY3QvTGlicmFyeSBtYW5hZ2VtZW50LnJhcmRkAmQPZBYCZg9kFgoCAQ8PFgIfAwUjQ2FsZW5kYXIgQXBwbGljYXRpb27igJ0gVXNpbmcgQy9DKytkZAIDDw8WAh8DBSNDYWxlbmRhciBBcHBsaWNhdGlvbuKAnSBVc2luZyBDL0MrK2RkAgUPDxYCHwMFBWMvYysrZGQCBw8PFgIfAwUFMTEyMDVkZAIJDw8WAh8EBRp+L1Byb2plY3QvTmV3IENhbGVuZGVyLnJhcmRkAmUPZBYCZg9kFgoCAQ8PFgIfAwUsT25saW5lIE1vYmlsZSBDb21wYW55IFBvcnRhbCBQcm9qZWN0IGluIEphdmFkZAIDDw8WAh8DBZcBT25saW5lIE1vYmlsZSBDb21wYW55IFBvcnRhbCBQcm9qZWN0IGluIEphdmEgaXMgd2ViIGFwcGxpY2F0aW9uIHByb3ZpZGVzIENvc3R1bWVycyBhbmQgY29tcGFueSB0byBjb21tdW5pY2F0ZSB3aXRoIGEgdXNlciBpbnRlcmZhY2UgZm9yIGFjY2Vzc2luZyBkYXRhLmRkAgUPDxYCHwMFC0phdmEsTXMgU3FsZGQCBw8PFgIfAwUFMTI4NjNkZAIJDw8WAh8EBTl+L1Byb2plY3QvTW9iaWxlIE9wZXJhdG9yIFBvcnRhbCBpbiBKYXZhLUVuZ2dSb29tLkNvbS56aXBkZAJmD2QWAmYPZBYKAgEPDxYCHwMFKkJpb21ldHJpYyBFbGVjdHJvbmljIEJvb3RoIFByb2plY3QgaW4gSmF2YWRkAgMPDxYCHwMFtgEgb25saW5lIGVsZWN0aW9uIHByb2Nlc3MgZGV2ZWxvcGVkIGFzIHdlYiBhcHBsaWNhdGlvbiB0byBhbGxvdyB0aGUgdXNlciB0byBhY2Nlc3MgdGhlaXIgdm90ZXIgcmVnaXN0cmF0aW9uIGF0IGhvbWUuRmluZ2VyIFByaW50IFNjYW5uaW5nIGlzIG1vc3QgcG93ZXJmdWwgRmVhdHVyZXMgb2YgdGhlIEFwcGxpY2F0aW9uLmRkAgUPDxYCHwMFEkphdmEsSkRCQyxTZXJ2bGV0c2RkAgcPDxYCHwMFBTEyNDEyZGQCCQ8PFgIfBAVLfi9Qcm9qZWN0L09ubGluZSBCaW9NZXRyaWMgRWxlY3Rpb24gU3lzdGVtIFByb2plY3QgaW4gSmF2YS1FbmdnUm9vbS5Db20uemlwZGQCZw9kFgJmD2QWCgIBDw8WAh8DBR5PbmxpbmUgVG91ciBNYW5hZ2VtZW50IFByb2plY3RkZAIDDw8WAh8DBWpBIFdlYiBBcHBsaWNhdGlvbiBEZXZlbG9wZWQgZm9yIFRvdXIgbWFuYWdlbWVudCBDb21wYW55IGZvciBIYW5kbGluZyB0aGVpciBPcGVyYXRpb25zIGFuZCBBZG1pbmlzdHJhdGlvbnMuZGQCBQ8PFgIfAwUVQXNwLk5ldCxNUyBTcWwsQyMuTmV0ZGQCBw8PFgIfAwUFMTM3NThkZAIJDw8WAh8EBTB+L1Byb2plY3QvVG91ck1hbmFnZW1lbnRQcm9qZWN0LUVuZ2dSb29tLmNvbS5yYXJkZAJoD2QWAmYPZBYKAgEPDxYCHwMFI0UtUmVnaXN0cmF0aW9uIGZvciBQcm9wZXJ0eSBQcm9qZWN0ZGQCAw8PFgIfAwWQAUUtUHJvcGVydHkgRGVhbGluZyBTaXRlIGRldmVsb3BlZCBpbiBhc3AubmV0Lg0KTmljZWx5IERldmVsb3BlZCBhbmQgRGVzaWduZWQgQ2xpZW50IGFuZCBBZG1pbiBTZWN0aW9uLlJlYWR5IHRvIFN1Ym1pdCBhcyBGaW5hbCBTZW1lc3RlciBQcm9qZWN0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTXMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBTEwNTM2ZGQCCQ8PFgIfBAU/fi9Qcm9qZWN0L0UtUmVnaXN0cmF0aW9uU3lzdGVtRm9yUHJvcGVydHlQcm9qZWN0IGluIEFTUC5OZXQucmFyZGQCaQ9kFgJmD2QWCgIBDw8WAh8DBRpPbmxpbmUgU29jaWFsIGxpa2UgU2hhcmluZ2RkAgMPDxYCHwMFwwFTb2NpYWwgbmV0d29ya2luZy1jb21tdW5pdHkgc2l0ZSBwcm92aWRlcyBjb21tdW5pY2F0aW9uIHRvIHZhcmlvdXMgZW1wbG95ZWVzIG9mIHRoZSBjb21wYW55IGFuZCBhbHNvIGVtcGxveWVlcyBjYW4gZ2V0IGFsc28gdGhlIGZlYXR1cmVzIGFzIGN1cnJlbnQgY29tbXVuaXR5IHNpdGUuVGhpcyBQcm9qZWN0IGlzIG1hZGUgaW4gQXNwLk5ldC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQUxMTk2MWRkAgkPDxYCHwQFNH4vUHJvamVjdC9Tb2NpYWxMaWtlU2hhcmluZyBQcm9qZWN0LUVuZ2dSb29tLkNvbS5yYXJkZAJqD2QWAmYPZBYKAgEPDxYCHwMFJ09ubGluZSBNdWx0aXBsZXggVGlja2V0IEJvb2tpbmcgUHJvamVjdGRkAgMPDxYCHwMF1wFFLXRpY2tldCBib29raW5nIHN5c3RlbSBpcyBhIHdlYi1iYXNlZCBhcHBsaWNhdGlvbiBmb3IgcmVzZXJ2aW5nIHNlYXQgZm9yIHdhdGNoaW5nbW92aWUgaW4gbXVsdGlwbGV4IGNpbmVtYS4gVGhlIGNpbmVtYSBpbmR1c3RyeSBhbmQgbW92aWUgd2F0Y2hlcnMgY2FuIGdhaW4gYmVuZWZpdHNmcm9tIHRoaXMgc2VydmljZS5UaGlzIFByb2plY3QgaXMgbWFkZSBpbiBBc3AuTmV0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBTEwODgyZGQCCQ8PFgIfBAU8fi9Qcm9qZWN0L011bHRpcGxleCBFLVRpY2tldEJvb2tpbmcgUHJvamVjdC1FbmdnUm9vbS5Db20ucmFyZGQCaw9kFgJmD2QWCgIBDw8WAh8DBRlPbmxpbmUgRS1QYXBlciBNYW5hZ2VtZW50ZGQCAw8PFgIfAwXnAUUtUEFQRVIgc3RhbmRzIGZvciBlbGVjdHJvbmljIHBhcGVyLiBJZiB3ZSB3YW50IHRvIGdldCBhbnkgdHlwZSBvZiBkb2N1bWVudCBvciBjb250ZW50IGZyb20gYW55IHBsYWNlIG9uIHdlYnNpdGUgdGhhbiBlLXBhcGVyIGNvbWVzIGludG8gcGljdHVyZS4gSXQgaXMgdGhlIGNvbmNlcHQgdGhyb3VnaCB3aGljaCBhbnkgdXNlciBjYW4gZG93bmxvYWQgb3IgdXBsb2FkIGEgbXVsdGlwbGUgZG9jdW1lbnRzLmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDcxMzhkZAIJDw8WAh8EBTR+L1Byb2plY3QvRS1wYXBlciBNYW5hZ2VtZW50IFN5c3RlbS1FbmdnUm9vbS5Db20ucmFyZGQCbA9kFgJmD2QWCgIBDw8WAh8DBSRBdHRlbmRhbmNlIE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3RkZAIDDw8WAh8DBZ8CQXR0ZW5kYW5jZSBTeXN0ZW0gZm9ybXMgdGhlIGxpZmVsaW5lIG9mIHRoZSBidXNpbmVzcyBpbnN0aXR1dGUgdG8gbWFuYWdlIHRoZSBFbXBsb3llZSBhbmQgaXRzIHNhbGFyeS4gSXQgaXMgdmVyeSBlc3NlbnRpYWwgZm9yIGFuIEluc3RpdHV0ZSB0byBoYW5kbGUgdGhlIFNhbGFyeSBhbmQgdGhlaXIgc2NhbGUuIEl0IGlzIHZlcnkgdXNlZnVsIGZvciBhbiBJbnN0aXR1dGUgdG8gdGVzdCBpdHMgZW1wbG95ZWUgYXR0ZW5kYW5jZSBjb250aW51b3VzbHkgZm9yIHRoZWlyIG11dHVhbCBkZXZlbG9wbWVudC5kZAIFDw8WAh8DBRRDIy5OZXQsVmIuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBTQwNjE2ZGQCCQ8PFgIfBAU8fi9Qcm9qZWN0L0F0dGVuZGFuY2VNYW5hZ2VtZW50U3lzdGVtUHJvamVjdC1FbmdnUm9vbS5Db20ucmFyZGQCbQ9kFgJmD2QWCgIBDw8WAh8DBSJPbmxpbmUgQ29tbXVuaXR5IFBvcnRhbCBpbiBBc3AuTmV0ZGQCAw8PFgIfAwU7T25saW5lIENvbW11bml0eSBQb3J0YWwgc2l0ZSBGb3IgTWV0cm9tb255IG1hZGUgaW4gYXNwLk5ldC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ1MzY5ZGQCCQ8PFgIfBAUqfi9Qcm9qZWN0L0NvbW11bml0eVBvcnRhbC1FbmdnUm9vbS5jb20ucmFyZGQCbg9kFgJmD2QWCgIBDw8WAh8DBShFZHVjYXRpb25hbCBTb2xhciBTeXN0ZW0gUHJvamVjdCAgaW4gQysrZGQCAw8PFgIfAwU/QSBQcm9qZWN0IGRldmVsb3BlZCBpbiBjKysgZm9yIFZpc3VhbGl6aW5nIFNvbGFyIFN5c3RlbSBpbiBDKysuZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENjk3MGRkAgkPDxYCHwQFKn4vUHJvamVjdC9FZHVjYXRpb25hbCBTb2xhciBTeXN0ZW0uQ3BwLmRvY2RkAm8PZBYCZg9kFgoCAQ8PFgIfAwUgRGlhYmV0ZXMgQW5hbHlzaXMgUHJvamVjdCBpbiBDKytkZAIDDw8WAh8DBUVBIGlubm92YXRpdmUgYXBwbGljYXRpb24gbWFkZSBpbiBDKysgdG8gYW5hbHlzaXMgY29uc29sZSBhcHBsaWNhdGlvbi5kZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ0MzM4ZGQCCQ8PFgIfBAUifi9Qcm9qZWN0L0RpYWJldGVzQW5hbHlzaXMuQ3BwLmRvY2RkAnAPZBYCZg9kFgoCAQ8PFgIfAwUgQ3J1aXNlIE1hbmFnZW1lbnQgUHJvamVjdCBpbiBDKytkZAIDDw8WAh8DBTlBIFByb2plY3QgbWFkZSBpbiBDKysuSWRlYWwgZm9yIE1ham9yIFN1YmplY3QgU3VibWlzc2lvbi5kZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQzMzIxZGQCCQ8PFgIfBAUefi9Qcm9qZWN0L0NydWlzZU1hbmFnZW1lbnQuZG9jZGQCcQ9kFgJmD2QWCgIBDw8WAh8DBSpTdXBlcm1hcmtldCBCaWxsaW5nIFN5c3RlbSAgUHJvamVjdCBpbiBDKytkZAIDDw8WAh8DBTRDb25zb2xlIEFwcGxpY2F0aW9uIG9uIFN1cGVybWFya2V0IEJpbGxpbmcgd2l0aCBHVUkuZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUEOTY0OGRkAgkPDxYCHwQFHX4vUHJvamVjdC9TdXBlcm1hcmtldC5DcHAuZG9jZGQCcg9kFgJmD2QWCgIBDw8WAh8DBSNTdHVkZW50IFJlcG9ydCBDYXJkIFByb2plY3QgIGluIEMrK2RkAgMPDxYCHwMFTkEgUHJvamVjdCBvbiBTdHVkZW50IFJlc3VsdCBhbmQgUmVwb3J0IGNhcmQgbWFkZSBpbiBDKysuU2ltcGxlIEdVSSBhbmQgQ29kaW5nLmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDg4OTJkZAIJDw8WAh8EBSV+L1Byb2plY3QvU3R1ZGVudCBSZXBvcnQgQ2FyZC5DcHAuZG9jZGQCcw9kFgJmD2QWCgIBDw8WAh8DBSBUcmFpbiBSZXNlcnZhdGlvbm4gU3lzdGVtIGluIEMrK2RkAgMPDxYCHwMFN0NvbnNvbGUgUHJvamVjdCBtYWRlIGluIEMrKyB0byBleHBsb3JlIEZlYXR1cmVzIG9mIE9PUC5kZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ3MTcyZGQCCQ8PFgIfBAUjfi9Qcm9qZWN0L1RyYWluLVJlc2VydmF0aW9uLkNwcC5kb2NkZAJ0D2QWAmYPZBYKAgEPDxYCHwMFKEJhbmtpbmcgTWFuYWdlbWVudCBTeXN0ZW0gUHJvamVjdCBpbiBDKytkZAIDDw8WAh8DBTtDb25zb2xlIEFwcGxpY2F0aW9uIHdpdGggUG93ZXIgb2YgR1VJIGltcGxlbWVudGVkIHdpdGggQysrLmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDY5MjFkZAIJDw8WAh8EBRl+L1Byb2plY3QvQmFua2luZy5DcHAuZG9jZGQCdQ9kFgJmD2QWCgIBDw8WAh8DBTFPbmxpbmUgQWdyaSBQcm9kdWN0IEF1Y3Rpb25pbmcgUHJvamVjdCBpbiBhc3AuTmV0ZGQCAw8PFgIfAwVMQSB3ZWIgQXBwbGljYXRpb24gZm9yIEFQTUMgbWFya2V0IHRvIGNvbmR1Y3QgYWdybyBwcm9kdWN0IGF1Y3Rpb25pbmcgT25saW5lLmRkAgUPDxYCHwMFEUFzcC5OZXQsQyMsTXMgU3FsZGQCBw8PFgIfAwUENjQzN2RkAgkPDxYCHwQFPX4vUHJvamVjdC9BUE1DLWF1Y3Rpb25pbmcgUHJvamVjdCBpbiBBc3AuTmV0LUVuZ2dSb29tLkNvbS5yYXJkZAJ2D2QWAmYPZBYKAgEPDxYCHwMFJ09ubGluZSBGb29kIE9yZGVyaW5nIFByb2plY3QgaW4gQXNwLk5ldGRkAgMPDxYCHwMF6QFUaGlzIG9ubGluZSBhcHBsaWNhdGlvbiBpcyBkZXZlbG9wZWQgYXMgYSBlQ29tbWVyY2UgYXBwbGljYXRpb24gdGFyZ2V0aW5nIGZvb2QgaW5kdXN0cmllcy5Vc2VyIG9mIHRoZSBzeXN0ZW0gY2FuIG9yZGVyIGZvb2QgYXQgdmFyaW91cyByZXN0YXVyYW50cyBvbmxpbmUuRG93bmxvYWQgRm9vZCBPcmRlcmluZyBzeXN0ZW0gaW4gQXNwLk5ldCB3aXRoIGNvbXBsZXRlIHNvdXJjZSBjb2RlIGFuZCBSZXBvcnQuIGRkAgUPDxYCHwMFFUFzcC5OZXQsVmIuTmV0LE1zIFNxbGRkAgcPDxYCHwMFBTI4NjI2ZGQCCQ8PFgIfBAU1fi9Qcm9qZWN0L09ubGluZSBGb29kIE9yZGVyaW5nIFByb2plY3QgaW4gYXNwLk5ldC5yYXJkZAJ3D2QWAmYPZBYKAgEPDxYCHwMFJUhlbGlDb3AgRmlnaHQgR2FtZSBQcm9qZWN0ICBpbiBDIy5OZXRkZAIDDw8WAh8DBT9MZWFybiBHYW1lIFByb2dyYW1taW5nIGluIEMjIHdpdGggZ29vZCBhbmQgU2ltcGxlIEdhbWUgUHJvamVjdC5kZAIFDw8WAh8DBQJDI2RkAgcPDxYCHwMFBDQ0MDFkZAIJDw8WAh8EBTV+L1Byb2plY3QvRmlnaHRlci1HYW1lIFByb2plY3QgaW4gVmItRW5nZ1Jvb20uY29tLnJhcmRkAngPZBYCZg9kFgoCAQ8PFgIfAwUdUmVtaW5kZXIgU3lzdGVtIFByb2plY3QgaW4gQyNkZAIDDw8WAh8DBTJUaW55IHdpbmRvd3MgUHJvamVjdCB0byBpbXBsZW1lbnQgUmVtaW5kZXIgU3lzdGVtLmRkAgUPDxYCHwMFAkMjZGQCBw8PFgIfAwUENDA1NWRkAgkPDxYCHwQFK34vUHJvamVjdC9SZW1pbmRlciBTeXN0ZW0gUHJvamVjdCBpbiBDIy56aXBkZAJ5D2QWAmYPZBYKAgEPDxYCHwMFH1NvZnR3YXJlIFRyaWNrZXIgUHJvamVjdCAgaW4gQyNkZAIDDw8WAh8DBXdTaW1wbGUgV2luZG93cyBBcHBsaWNhdGlvbiB3aGljaCB1c2UgV2luZG93cyBNYW5hZ2VtZW50IEluc3RydW1lbnRhdGlvbiB0byBmaW5kIGEgc29mdHdhcmUvQXBwbGljYXRpb24gaW5zdGFsbGVkIGluIE9TLmRkAgUPDxYCHwMFDFdNSSBRdWVyeSxDI2RkAgcPDxYCHwMFBDEyMDhkZAIJDw8WAh8EBTl+L1Byb2plY3QvU29mdHdlYXIgdHJpY2tlciBQcm9qZWN0IGluIEMjLUVuZ2dSb29tLkNvbS56aXBkZAJ6D2QWAmYPZBYKAgEPDxYCHwMFHEFkdmVydGlzaW5nIEFnZW5jeSBQb3J0Zm9saW9kZAIDDw8WAh8DBUNPbmxpbmUgQWR2ZXJ0aXNpbmcgTWFuYWdlbWVudCBhbmQgUG9ydGZvbGlvIGZvciBBZHZlcnRpc2luZyBBZ2VuY3kuZGQCBQ8PFgIfAwURQXNwLk5ldCxDIyxNUyBTcWxkZAIHDw8WAh8DBQQ2MDM3ZGQCCQ8PFgIfBAU6fi9Qcm9qZWN0L0FkdmVydGlzZW1lbnQgTWFuYWdlbWVudCBTeXN0ZW0tRW5nZ1Jvb20uQ29tLnJhcmRkAnsPZBYCZg9kFgoCAQ8PFgIfAwUZT25saW5lIEN1c3RvbWVyIENhcmUoQ1JNKWRkAgMPDxYCHwMFLkN1c3RvbWVyIFJlbGF0aW9uc2hpcCBQcm9qZWN0IG1hZGUgaW4gYXNwLk5ldC5kZAIFDw8WAh8DBRFBc3AuTmV0LEMjLE1TIFNxbGRkAgcPDxYCHwMFBDk5MDRkZAIJDw8WAh8EBT1+L1Byb2plY3QvT25saW5lQ3VzdG9tZXJDYXJlKENSTSkgaW4gQXNwLk5ldC1FbmdnUm9vbS5Db20ucmFyZGQCfA9kFgJmD2QWCgIBDw8WAh8DBSVTdHVkZW50IEluZm9ybWF0aW9uIGFuZCBUcmFraW5nIGluIEMjZGQCAw8PFgIfAwVTTmljZSBTdHVkZW50IFRyYWNraW5nIGFuZCBJbmZvcm1hdGlvbiBTeXN0ZW0gd2l0aCBCdXNpbmVzcyBsYXllcixEYXRhIEFjY2VzcyBsYXllci5kZAIFDw8WAh8DBQ1DIy5OZXQsQWNjZXNzZGQCBw8PFgIfAwUENTU1M2RkAgkPDxYCHwQFQn4vUHJvamVjdC9TdHVkZW50IEluZm9ybWF0aW9uIGFuZCBUcmFja2luZyBTeXN0ZW0tRW5nZ1Jvb20uQ29tLnppcGRkAn0PZBYCZg9kFgoCAQ8PFgIfAwUZTGFuIE1lc3NhZ2FuZ2VyIGluIFZiLk5ldGRkAgMPDxYCHwMFMVNlbmQgVGV4dCBNZXNzYWdlIGluIExhbiB3aXRoIFZiLk5ldCBJbXBsZW1lbnRlZC5kZAIFDw8WAh8DBQZWYi5OZXRkZAIHDw8WAh8DBQUyMTQ1M2RkAgkPDxYCHwQFMn4vUHJvamVjdC9MYW4gTWVzc2FuZ2VyIGluIFZiLk5ldC1FbmdnUm9vbS5Db20ucmFyZGQCfg9kFgJmD2QWCgIBDw8WAh8DBSdGYXN0IERvd25sb2FkIE1hbmFnZXIgUHJvamVjdCBpbiBWYi5OZXRkZAIDDw8WAh8DBWFGYXN0IERvd25sb2FkIG1hbmFnZXIgaW1wbGVtZW50ZWQgd2l0aCBuZXcgVENQLUlQIFByb3RvY29sIHdoaWNoIG9mZmVyIEhpZ2ggUGVyZm9ybWFuY2UgRG93bmxvYWQuZGQCBQ8PFgIfAwUGVmIuTmV0ZGQCBw8PFgIfAwUEOTQwMWRkAgkPDxYCHwQFNH4vUHJvamVjdC9Eb3dubG9hZE1hbmFnZXIgaW4gVmIuTmV0LUVuZ2dSb29tLkNvbS56aXBkZAJ/D2QWAmYPZBYKAgEPDxYCHwMFJE9ubGluZSBFeGFtaW5hdGlvbiBTeXN0ZW0gaW4gQXNwLk5ldGRkAgMPDxYCHwMFfVRoaXMgQXBwbGljYXRpb24gaXMgZGV2ZWxvcGVkIGluIGFzcC5uZXQgZm9yIEUtRXhhbS5JdCBoYXZlIENvbXBsZXRlIE9ubGluZSBFeGFtaW5hdGlvbiBQb3J0Zm9saW8gd2l0aCBkeW5hbWljIEFkbWluIFNlY3Rpb24uZGQCBQ8PFgIfAwURQXNwLk5ldCxDIyxNUyBTcWxkZAIHDw8WAh8DBQUxMDA4NWRkAgkPDxYCHwQFNH4vUHJvamVjdC9vbmxpbmUgRXhhbWluYXRpb24gc3lzdGVtLUVuZ2dSb29tLkNvbS56aXBkZAKAAQ9kFgJmD2QWCgIBDw8WAh8DBRpTTVMgQXBwbGljYXRpb24gaW4gQXNwLk5ldGRkAgMPDxYCHwMFGFNlbmQgZnJlZSBzbXMgaW4gQXNwLm5ldGRkAgUPDxYCHwMFEUFzcC5OZXQsQyMsTVMgU3FsZGQCBw8PFgIfAwUFMjAyNTlkZAIJDw8WAh8EBRx+L1Byb2plY3Qvc21zYXBwbGljYXRpb24ucmFyZGQCgQEPZBYCZg9kFgoCAQ8PFgIfAwUfQXV0b25vbW91cyBTZWN1cml0eSBHdWFyZCBSb2JvdGRkAgMPDxYCHwMFtAJUaGlzIHByb2plY3QgaW50ZW5kcyB0byBidWlsZCBhIHdvcmtpbmcgcHJvdG90eXBlIG9mIGEgc2VudHJ5L3BhdHJvbCByb2JvdC4gVGhlIHJvYm90IGlzIGNhcGFibGUgIG9mICBwYXRyb2xsaW5nICBhbiAgYXJlYSAgd2l0aG91dCAgaHVtYW4gIGludGVyYWN0aW9uICB3aGlsZSAgcHJvdmlkaW5nIGZlZWRiYWNrICBhcyAgdG8gIHRoZSAgc3RhdGUgIG9mICBpdHMgIHN1cnJvdW5kaW5ncy4gIEFsbCAgaW5zdHJ1Y3Rpb25zIHRvICB0aGUgIHJvYm90ICBjYW4gIGJlIGdpdmVuICBwcmlvciAgdG8gIGl0cyAgYWN0dWFsIGFwcGxpY2F0aW9uLmRkAgUPDxYCHwMFIjgwNTEgTWljcm9Db250cm9sbGVyIEJhc2VkIFByb2plY3RkZAIHDw8WAh8DBQQxMjA3ZGQCCQ8PFgIfBAUtfi9Qcm9qZWN0L2F1dG9ub21vdXNfc2VjdXJpdHlfZ3VhcmRfcm9ib3QuemlwZGQCggEPZBYCZg9kFgoCAQ8PFgIfAwUfODA1MSBiYXNlZCBob21lIFNlY3VyaXR5IFN5c3RlbWRkAgMPDxYCHwMFkwNUaGUgcHJpbWUgY29uY2VybiBvZiB0aGlzIHByb2plY3QgaXMgdG8gcHJvdmlkZSB0b3RhbCBzZWN1cml0eS4gVGhpcyBtaWNyb2NvbnRyb2xsZXIgYmFzZWQgaG9tZSBzZWN1cml0eSB3aXRoIHBhc3N3b3JkIGRvb3IgbG9jayBzeXN0ZW0gZmVhdHVyZSBjYW4gYWxzbyBwZXJmb3JtIGRheSBhbmQgbmlnaHQgZGV0ZWN0aW9uLCBsYXNlciBiZWFtIG1vbml0b3Jpbmcgc3lzdGVtIGZvciB3aW5kb3dzLCBhbmQgbWFnbmV0aWMgbW9uaXRvcmluZyBmb3IgZG9vcnMuIEFzaWRlIG9mIHByb3ZpZGluZyB0b3RhbCBzZWN1cml0eSwgdGhpcyBwcm9qZWN0IGFpbXMgdG8gdXRpbGl6ZSB0aGUgaG9tZW1hZGUgY2lyY3VpdHJ5IGFuZCBidWlsZCBhIGxvdyBjb3N0IGludGVncmF0ZWQgaG9tZSBzZWN1cml0eSBzeXN0ZW0uZGQCBQ8PFgIfAwUiODA1MSBNaWNyb0NvbnRyb2xsZXIgQmFzZWQgUHJvamVjdGRkAgcPDxYCHwMFBDEyNzFkZAIJDw8WAh8EBSJ+L1Byb2plY3QvaG9tZS1zZWN1cml0eS1zeXN0ZW0uemlwZGQCgwEPZBYCZg9kFgoCAQ8PFgIfAwUfSG9tZSBBdXRvbWF0aW9uIENvbnRyb2wgU3lzdGVtIGRkAgMPDxYCHwMFhAJUZWxuZXQgc2VydmVyIHRvIGFjY2VzcyBvdXIgc29mdHdhcmUgZnJvbSBhbnl3aGVyZS5JbnRlcm5ldCBNZWRpdW0gaXMgdXNlZCB0byBjb250cm9sIEhvbWUgQXBwbGlhbmNlcyBmcm9tIGEgcmVtb3RlIFBDLjgwNTEgQ29udHJvbGxlciBpcyB1c2VkIHRvIHBlcmZvcm0gY29udHJvbCBmdW5jdGlvbiBzdWNoIGFzIG9uLW9mZi5UZWxuZXQgdXNlcyBUQ1BcSVAgUHJvdG9jb2xzIHVzaW5nIGEgc3BlY2lmaWMgcG9ydCB0byBhY2Nlc3MgdGhlIHNvZnR3YXJlLmRkAgUPDxYCHwMFIjgwNTEgTWljcm9Db250cm9sbGVyIEJhc2VkIFByb2plY3RkZAIHDw8WAh8DBQM5OTlkZAIJDw8WAh8EBRx+L1Byb2plY3QvSG9tZUF1dG9tYXRpb24uemlwZGQChAEPZBYCZg9kFgoCAQ8PFgIfAwUZUmVjcnVpdG1lbnQgU3lzdGVtIGluIFBIUGRkAgMPDxYCHwMF7gFUaGlzIFByb2plY3QgaXMgYW4gaWRlYWwgd2ViLWJhc2VkIHJlY3J1aXRtZW50IHRvb2wgZm9yIGNvbXBhbmllcyBhbmQgY28tb3AvaW50ZXJuc2hpcCBwcm9ncmFtcy4NCg0KSXQgY29udGFpbnMgbW9kdWxlcyBmb3Igam9iIHBvc3RpbmdzLCBhcHBsaWNhdGlvbnMsIGNvbXBhbnkgYW5kIGFwcGxpY2FudCBpbmZvcm1hdGlvbiwgaW50ZXJ2aWV3IHNpZ251cCwgYW5kIGFkdmFuY2VkIHJlcG9ydGluZy9zZWFyY2hpbmcuZGQCBQ8PFgIfAwUJUEhQLE1ZU1FMZGQCBw8PFgIfAwUFMjU5MTNkZAIJDw8WAh8EBTt+L1Byb2plY3QvUmVjcnVpdG1lbnQgTWFuYWdlbWVudCBTeXN0ZW0gaW4gUEhQLUVuZ2dSb29tLnJhcmRkAoUBD2QWAmYPZBYKAgEPDxYCHwMFIFByb2plY3QgTWFuYWdlbWVudCBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwXsAVRoaXMgUHJvamVjdCBhbGxvd3MgdXNlciB0byBjcmVhdGUgYW5kIGVkaXQgcHJvamVjdCBkZXRhaWxzIHdpdGggd2ViLWJhc2VkIHByb2plY3QgbWFuYWdlbWVudCBzb2Z0d2FyZS4NCkN1c3RvbWl6ZSB5b3VyIHByb2plY3QgY2F0ZWdvcmllcyBhbmQgdGhlIHByb2plY3Qgc3RhdHVzIG9wdGlvbnMgdG8geW91ciBuZWVkcy4NClNldHVwIGFkbWluIGFuZCByZWd1bGFyIHVzZXJzIGZvciBtdWx0aXBsZSBncm91cHMuZGQCBQ8PFgIfAwUJUEhQLE1ZU1FMZGQCBw8PFgIfAwUFMTA1NTlkZAIJDw8WAh8EBTd+L1Byb2plY3QvUHJvamVjdCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBQSFAtRW5nZ1Jvb20uemlwZGQChgEPZBYCZg9kFgoCAQ8PFgIfAwUiV2ViIEJhc2VkIENsYWltcyBQcm9jZXNzaW5nIFN5c3RlbWRkAgMPDxYCHwMFkgJXZWIgQmFzZWQgQ2xhaW1zIFByb2Nlc3NpbmcgU3lzdGVtIGFsbG93cyBpdHMgdXNlciB0byBmaWxsIHRoZSBjbGFpbSBmb3JtIG9ubGluZSBhbmQgc3VibWl0IGl0LkFzIGNsYWltIGZvcm0gaXMgc3VibWl0dGVkIG9ubGluZSBhdCBDbGFpbSBwcm9jZXNzaW5nIERlcGFydG1lbnQuVGhlIGZvcm0gY2hlY2tlZCBhdXRvbWF0aWNhbGx5IGJ5IGEgcHJvZ3JhbSBhbmQgY29tcHV0ZSB0aGUgYW1vdW50IHRoYXQgc2V0dGxlZCB0byB0aGUgZW1wbG95ZWUgZm9yIHRoZSB0cmVhdG1lbnQuZGQCBQ8PFgIfAwUVQXNwLk5ldCxNUyBTcWwsQyMuTmV0ZGQCBw8PFgIfAwUENDcwNWRkAgkPDxYCHwQFRH4vUHJvamVjdC93ZWIgQmFzZWQgQ2xhaW0gUHJvY2Vzc2luZyBQcm9qZWN0IGluIEFzcC5OZXQtRW5nZ1Jvb20ucmFyZGQChwEPZBYCZg9kFgoCAQ8PFgIfAwUjTXVsdGlwbGUgU2VhcmNoIEVuZ2luZSBSZXN1bHQgaW4gQyNkZAIDDw8WAh8DBV9UaGlzIGFwcGxpY2F0aW9uIHJlcXVlc3QgYSBxdWVyeSB0byB0aGUgbXVsdGlwbGUgc2VhcmNoIGVuZ2luZSBhbmQgZ2V0IHJlc3VsdCBvbiBzaW5nbGUgc2NyZWVuLmRkAgUPDxYCHwMFDUMjLk5ldCxNUyBTUUxkZAIHDw8WAh8DBQQ0MDMxZGQCCQ8PFgIfBAU5fi9Qcm9qZWN0L011bHRpcGxlIFNlYXJjaCBFbmdpbmUgQXBwbGljYXRpb24tRW5nZ1Jvb20uemlwZGQCiAEPZBYCZg9kFgoCAQ8PFgIfAwUpU29sdmUgTmV3dG9uIFBvbHlub21pYWwgRXF1YXRpb24gVXNpbmcgQyNkZAIDDw8WAh8DBWVOZXd0b24gUG9seW5vbWlhbCBFcXVhdGlvbiBjYW4gc29sdmUgZXF1YXRpb24gdXB0byA2IGRlZ3JlZS5Zb3UgY2FuIGV4cGFuZCBpdCBieSBkb2luZyBtaW5vciBjaGFuZ2VzLmRkAgUPDxYCHwMFDUMjLk5ldCxNUyBTUUxkZAIHDw8WAh8DBQQxMjQ4ZGQCCQ8PFgIfBAUUfi9Qcm9qZWN0L05ld3Rvbi56aXBkZAKJAQ9kFgJmD2QWCgIBDw8WAh8DBRVYTkEgR2FtZSBEZXZlbG9wZW1lbnRkZAIDDw8WAh8DBU9YTkEgR2FtZSBkZXZlbG9wIHRvIG1vdmUgb2JqZWN0IGJ5IEFycm93IGtleSBvZiBrZXlib2FyZC5yZWFkIEtleWJvcmQgZnJvbSBYTkEuZGQCBQ8PFgIfAwUHWE5BLk5FVGRkAgcPDxYCHwMFAzU3MGRkAgkPDxYCHwQFI34vUHJvamVjdC9YTkEgR2FtZSBEZXZlbG9wZW1lbnQucmFyZGQCigEPZBYCZg9kFgoCAQ8PFgIfAwURV2ViIEJyb3dzZXIgSW4gQyNkZAIDDw8WAh8DBSNTaW1wbGUgd2ViIEJyb3dzZXIgZGV2ZWxvcGVkIGluIGMjLmRkAgUPDxYCHwMFAkMjZGQCBw8PFgIfAwUENDMzNGRkAgkPDxYCHwQFK34vUHJvamVjdC9XZWItQnJvd3NlciBpbiBDI25ldC1FbmdnUm9vbS56aXBkZAKLAQ9kFgJmD2QWCgIBDw8WAh8DBR5UZXh0IFRvIFNwZWVjaCBDb252ZXJ0ZXIgaW4gQyNkZAIDDw8WAh8DBUZBcHBsaWNhdGlvbiBjb252ZXJ0IHlvdXIgVGV4dC9GaWxlIGludG8gTGlzdGVuYWJsZSBmb3JtIGJ5IFJlYWRpbmcgSXQuZGQCBQ8PFgIfAwUNQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBDQ2MDJkZAIJDw8WAh8EBTl+L1Byb2plY3QvVGV4dCB0byBTcGVlY2ggQ29udmVydGVyIGluIEMjLk5ldC1FbmdnUm9vbS56aXBkZAKMAQ9kFgJmD2QWCgIBDw8WAh8DBRVQaXp6YSBPcmRlcmluZyBTeXN0ZW1kZAIDDw8WAh8DBVJQaXp6YSBPcmRlcmluZyBTeXN0ZW0gaXMgYSBCaWxsaW5nIEFwcGxpY2F0aW9uIGZvciBQaXp6YSBTaG9wIGRldmVsb3BlZCBpbiBjIy5OZXQuZGQCBQ8PFgIfAwUNQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBDUyMjBkZAIJDw8WAh8EBTJ+L1Byb2plY3QvUGl6emEgT3JkZXJpbmcgU3lzdGVtIGluIEVuZ2dSb29tLUMjLnppcGRkAo0BD2QWAmYPZBYKAgEPDxYCHwMFJFBoYXJtYWN5IE1hbmFnZW1lbnQgU3lzdGVtIGluIEMjLk5ldGRkAgMPDxYCHwMFiAFEZXNrdG9wIEFwcGxpY2F0aW9uIGRldmVsb3BlZCBpbiBDIy5OZXQgdG8gYXV0b21hdGUgdGhlIG9wZXJhdGlvbiBvZiBwaGFybWEgY29tcGFueSBsaWtlIFNhbGVzIE1hbmFnZW1lbnQsTWF0ZXJpYWwgYW5kIFN0b2NrIE1hbmFnZW1lbnQuZGQCBQ8PFgIfAwUNQyMuTmV0LE1TIFNRTGRkAgcPDxYCHwMFBDYwMjFkZAIJDw8WAh8EBTt+L1Byb2plY3QvUGhhcm1hY3kgTWFuYWdlbWVudCBTeXN0ZW0gaW4gQyMuTmV0LUVuZ2dSb29tLnppcGRkAo4BD2QWAmYPZBYKAgEPDxYCHwMFFUdQUyBJbnRlcmZhY2luZyBJbiBDI2RkAgMPDxYCHwMFPFRoaXMgUHJvamVjdCBEZW1vbnN0cmF0ZSBIb3cgdG8gcmVhZCBHUFMgRGV2aWNlIHVzaW5nIEMjLk5ldGRkAgUPDxYCHwMFBkMjLk5ldGRkAgcPDxYCHwMFBDM1NDdkZAIJDw8WAh8EBSZ+L1Byb2plY3QvUkVBRElORyBHUFMgREVWSUNFIElOIEMjLnppcGRkAo8BD2QWAmYPZBYKAgEPDxYCHwMFDkFUTSBTaW11bGF0aW9uZGQCAw8PFgIfAwW2AlRoaXMgaXMgYSBiYXNpYyBBVE0gc2ltdWxhdGlvbiBhbmQgaXQgd2lsbCBnaXZlIHRoZSBpZGVhIG9uIGhvdyB0cmFuc2FjdGlvbiB3ZXJlIG1hZGUgYnkgYSByZWFsIEFUTS4gSXQgaGFzIGEgbG9naW4gcGFnZS4gQW4gYWNjb3VudCBudW1iZXIgd2lsbCBzdWJzdGl0dXRlIG91ciBBVE0gY2FyZCBpbiB0aGlzIHNpdHVhdGlvbi4gT25jZSB5b3UgYXJlIGxvZ2luLCB5b3Ugd2lsbCBiZSBwcmVzZW50ZWQgYSBtZW51IHZhcmllcyBmcm9tIGNoZWNrIHlvdXIgYmFsYW5jZSwgZGVwb3NpdCwgd2l0aGRyYXdhbCBhbmQgcXVpY2sgd2l0aGRyYXdhbC5kZAIFDw8WAh8DBQ1DIy5OZXQsTVMgU1FMZGQCBw8PFgIfAwUENDM1OGRkAgkPDxYCHwQFO34vUHJvamVjdC9BVE0gTUFDSElORSBQUk9KRUNUIElOIEMjX1NJTVVMQVRJT04tRU5HR1JPT00ucmFyZGQCkAEPZBYCZg9kFgoCAQ8PFgIfAwUrQWR2YW5jZWQgUGF5IFJvbGwgTWFuYWdlbWVudCBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFoQFQYXlyb2xsIFN5c3RlbSBpcyBhIHdpbmRvdyBiYXNlZCBzb2x1dGlvbiBmb3Igc21hbGwgQ29tcGFueS5JdCBpbmNsdWRlcyBTYWxhcnkgTWFuYWdlbWVudCxFbXBsb3llZSBNYW5hZ2VtZW50LEF0dGVuZGFuY2UgTWFuYWdlbWVudC5GcmVlIFRvIERvd25sb2FkIHdpdGggUmVwb3J0LmRkAgUPDxYCHwMFC0phdmEsT3JhY2xlZGQCBw8PFgIfAwUFMTgyMDFkZAIJDw8WAh8EBTZ+L1Byb2plY3QvYWR2YW5jZSBQYXlSb2xsIE1hbmFnZW1lbnQtSmF2YS1FbmdnUm9vbS56aXBkZAKRAQ9kFgJmD2QWCgIBDw8WAh8DBSRTdHVkZW50IEluZm9ybWF0aW9uIFN5c3RlbSBpbiBWYiA2LjBkZAIDDw8WAh8DBYMBc3R1ZGVudCBJbmZvcm1hdGlvbiBzeXN0ZW0gcHJvamVjdCBpbXBsZW1lbnQgRGF0YWJhc2UgY29ubmVjdGl2aXR5IHdpdGggUEhQLk1vZHVsZXMgYXJlOlBlcnNvbmFsIERhdGEgb2YgU3R1ZGVudCxSZXN1bHQsQXR0ZW5kYW5jZS5kZAIFDw8WAh8DBQ1WYiA2LjAsQWNjZXNzZGQCBw8PFgIfAwUFMjMyOTNkZAIJDw8WAh8EBTt+L1Byb2plY3QvU3R1ZGVudCBJbmZvcmFtdGlvbiBTeXN0ZW0gaW4gVmIgNi4wLUVuZ2dSb29tLnppcGRkApIBD2QWAmYPZBYKAgEPDxYCHwMFJEFpcmxpbmUgUmVzZXJ2YXRpb24gU3lzdGVtIGluIFZiIDYuMGRkAgMPDxYCHwMF0AFJdCBtYWludGFpbiB0aGUgVGlja2V0IFJlc2VydmF0aW9uLUNhbmNlbCBUaWNrZXQuIA0KVGhlIGltcG9ydGFudCByZWFzb24gaXMgdG8gbWFrZSB3b3JrIGVhc3kuTm8gbmVlZCB0byBzZWFyY2ggYSBGbGlnaHQgcmVnaXN0ZXIgZm9yIGVudHJ5IG9yIGFueSBvdGhlciB0cmFuc2FjdGlvbi5SZWFkeSB0byBSdW4gUHJvamVjdCB3aXRoIFJlcG9ydCBpbiBWQiA2LjAuZGQCBQ8PFgIfAwUNVmIgNi4wLEFjY2Vzc2RkAgcPDxYCHwMFBDg4MzVkZAIJDw8WAh8EBUN+L1Byb2plY3QvQWlybGluZSBSZXNlcnZhdGlvbiBTeXN0ZW0gUHJvamVjdCBpbiBWQiA2LjAtRW5nZ1Jvb20ucmFyZGQCkwEPZBYCZg9kFgoCAQ8PFgIfAwUmQWNjb3VudGluZyBNYW5hZ2VtZW50IFN5c3RlbSBpbiBWYiA2LjBkZAIDDw8WAh8DBZUBQWNhZGVtaWMgUHJvamVjdCBkZXZlbG9wZWQgIGluIFZiIDYuMCB0byBhdXRvbWF0ZSBhY2NvdW50IG9mIEluZGl2aWR1YWwvQ29tcGFueS5BY2NvdW50IGFuYWx5c2lzLFJlcG9ydCBHZW5lcmF0aW9uIGFuZCBvdGhlciBGYWNpbGl0eSBpcyBpbXBsZW1lbnRlZC5kZAIFDw8WAh8DBQ1WYiA2LjAsQWNjZXNzZGQCBw8PFgIfAwUFMTAzMzdkZAIJDw8WAh8EBTJ+L1Byb2plY3QvQWNjb3VudGluZyBNZ3QgU3lzdGVtIGluIFZiLUVuZ2dSb29tLnJhcmRkApQBD2QWAmYPZBYKAgEPDxYCHwMFIFRyYXZlbGxpbmcgQWdlbmN5IFByb2plY3QgaW4gQysrZGQCAw8PFgIfAwV0U2ltcGxlIEdVSSBiYXNlZCBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgYXMgYSBtaW5vciBwcm9qZWN0IGZvciBNQ0EsQkUtSVQgc3R1ZGVudCB0byBzdWJtaXQgaXQgYXMgYSByZWFkeSB0byBydW4gY29kZS5kZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ2NTYzZGQCCQ8PFgIfBAU3fi9Qcm9qZWN0L1RyYXZlbGxpbmcgQWdlbmN5IFByb2plY3QgaW4gQysrLUVuZ2dSb29tLnppcGRkApUBD2QWAmYPZBYKAgEPDxYCHwMFIVJlc3RhdXJhbnQgYmlsbGluZyBQcm9qZWN0IGluIEMrK2RkAgMPDxYCHwMFdVNpbXBsZSBNaW5vciBQcm9qZWN0IERldmVsb3BlZCBpbiBjKysgd2l0aCBncmFwaGljYWwgaW50ZXJmYWNlLkJFLUlULENFLE1DQSBzdHVkZW50IGNhbiBzdWJtaXQgaXQgYXMgYSBtaW5vciBQcm9qZWN0LmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDY0ODVkZAIJDw8WAh8EBTd+L1Byb2plY3QvUmVzdHVyYW50IGJpbGxpbmcgUHJvamVjdCBpbiBDKystRW5nZ1Jvb20uemlwZGQClgEPZBYCZg9kFgoCAQ8PFgIfAwUTT25saW5lIEFkZHJlc3MgQm9va2RkAgMPDxYCHwMFbE9ubGluZSBBZGRyZXNzIGJvb2sgbWFkZSBhcyBhIG1pbmkgcHJvamVjdCBpbiBKU1AgdG8gZXhwbG9yZSBmZWF0dXJlcyBvZiBKYXZhLlZlcnkgTmljZSBHVUkgZGVzaWduZWQgaW4gSlNQLmRkAgUPDxYCHwMFD0pTUCxKYXZhLE9yYWNsZWRkAgcPDxYCHwMFBTExMzgzZGQCCQ8PFgIfBAUxfi9Qcm9qZWN0L09ubGluZSBBZGRyZXNzIEJvb2sgaW4gSlNQLUVuZ2dSb29tLnppcGRkApcBD2QWAmYPZBYKAgEPDxYCHwMFD0UtR3JhbVBhbmNoYXlhdGRkAgMPDxYCHwMFfkUtR3JhbVBhbmNoYXlhdCBpcyBhIFNvbHV0aW9uIHRvIGF1dG9tYXRlIGRhaWx5IHJvdXRpbmUgcHJvY2VzcyBvZiBHcmFtIFBhbmNoYXlhdCB0byBGYXN0IGFuZCBFYXN5IENvbXB1dGVyaXplZCB0YXNrIEhhbmRsaW5nLmRkAgUPDxYCHwMFDVZiIDYuMCxBY2Nlc3NkZAIHDw8WAh8DBQQ3NDQyZGQCCQ8PFgIfBAUdfi9Qcm9qZWN0L0UtR3JhbVBhbmNoYXlhdC5yYXJkZAKYAQ9kFgJmD2QWCgIBDw8WAh8DBShDZW50cmFsaXplZCBBZG1pc3Npb24gU3lzdGVtIGZvciBDb2xsZWdlZGQCAw8PFgIfAwX/AlRoaXMgc29mdHdhcmUgZGVhbHMgd2l0aCB0aGUgQ2VudHJhbGl6ZWQgQWRtaXNzaW9uIFN5c3RlbSBmb3IgdGhlIGNvbGxlZ2VzLiBNYWluIGZlYXR1cmVzIG9mIHRoaXMgc29mdHdhcmUgYXJlIGFzIHVuZGVyLg0KDQpBY2NlcHRpbmcgZGF0YSBhYm91dCB0aGUgc3R1ZGVudHMgZnJvbSB0aGVpciBhZG1pc3Npb24gZm9ybXMuDQpHZW5lcmF0aW5nIHRoZSBtZXJpdCBsaXN0IG9mIHRoZSBzdHVkZW50cy4NClByb3ZpZGluZyB0aGUgYWRtaXNzaW9uIHRpbWUgZGV0YWlscy4NCkdpdmluZyBhZG1pc3Npb24gdG8gc3R1ZGVudHMgaW4gdGhlIGNvbGxlZ2VzLg0KVXBkYXRpbmcgdGhlIHNlYXRzIGFjY29yZGluZyB0byB0aGUgYWRtaXNzaW9uIGluIHZhcmlvdXMgY29sbGVnZXMuZGQCBQ8PFgIfAwUNVmIgNi4wLEFjY2Vzc2RkAgcPDxYCHwMFBDg4MDZkZAIJDw8WAh8EBSh+L1Byb2plY3QvQ2VudHJhbGl6ZWRBZG1pc3Npb25TeXN0ZW0ucmFyZGQCmQEPZBYCZg9kFgoCAQ8PFgIfAwUjUHJvamVjdCBFdmFsdWF0b3IgaW4gQXNwLk5ldCBSZXBvcnRkZAIDDw8WAh8DBcEEUFJPSkVDVCBFVkFMVUFUT1IgaXMgYmVpbmcgZGVzaWduZWQgdG8gb3ZlcmNvbWUgdGhlIG1vc3Qgb2YgdGhlIG1hbnVhbCBwcm9jZXNzZXMgdGhhdCBpcyBnb2luZyBpbiBhIHNvZnR3YXJlIGZpcm0uIEl0IGlzIGEgd2ViIGFwcGxpY2F0aW9uIHRoYXQgY2FuIHNpbXBsaWZ5IHRoZSB0YXNrIG9mIHRoZSBhZG1pbmlzdHJhdG9yLCBwcm9qZWN0IG1hbmFnZXIsIHByb2plY3QgbGVhZGVyLCBkZXZlbG9wZXIgYW5kIHRlc3Rlci4gVGhlIHByb2Nlc3Mgb2YgYWNjZXB0aW5nIGEgcHJvamVjdCBmcm9tIGEgY2xpZW50LCBhc3NpZ25pbmcgdGhpcyBwcm9qZWN0IHRvIGEgcHJvamVjdCBsZWFkZXIgaW4gc3VjaCBhIHdheSB0aGF0IGhlIGlzIG5vdCBvdmVybG9hZGVkLCB0aGUgdGFzayBvZiBkaXZpc2lvbiBvZiB0aGUgcHJvamVjdCB0byB2YXJpb3VzIGRldmVsb3BlcnMsIGRhaWx5IGV2YWx1YXRpb24gb2YgcHJvamVjdCwgd2Vla2x5IHJlcG9ydCBvZiBzdGF0dXMgb2YgcHJvamVjdCwgdGVzdGluZyBhbmQgaXRzIHJlcG9ydCwgYWxsIHRoZXNlIGZ1bmN0aW9ucyB3YXMgbWFkZSBlYXN5IHdpdGggdGhpcyBwcm9qZWN0LmRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBDU4MjdkZAIJDw8WAh8EBTJ+L1Byb2plY3QvUHJvamVjdC1FdmFsdWF0b3ItYW4tQVNQLU5ldC1Qcm9qZWN0LnppcGRkApoBD2QWAmYPZBYKAgEPDxYCHwMFI1Byb2plY3QgRXZhbHVhdG9yIGluIEFzcC5OZXQgUmVwb3J0ZGQCAw8PFgIfAwXBBFBST0pFQ1QgRVZBTFVBVE9SIGlzIGJlaW5nIGRlc2lnbmVkIHRvIG92ZXJjb21lIHRoZSBtb3N0IG9mIHRoZSBtYW51YWwgcHJvY2Vzc2VzIHRoYXQgaXMgZ29pbmcgaW4gYSBzb2Z0d2FyZSBmaXJtLiBJdCBpcyBhIHdlYiBhcHBsaWNhdGlvbiB0aGF0IGNhbiBzaW1wbGlmeSB0aGUgdGFzayBvZiB0aGUgYWRtaW5pc3RyYXRvciwgcHJvamVjdCBtYW5hZ2VyLCBwcm9qZWN0IGxlYWRlciwgZGV2ZWxvcGVyIGFuZCB0ZXN0ZXIuIFRoZSBwcm9jZXNzIG9mIGFjY2VwdGluZyBhIHByb2plY3QgZnJvbSBhIGNsaWVudCwgYXNzaWduaW5nIHRoaXMgcHJvamVjdCB0byBhIHByb2plY3QgbGVhZGVyIGluIHN1Y2ggYSB3YXkgdGhhdCBoZSBpcyBub3Qgb3ZlcmxvYWRlZCwgdGhlIHRhc2sgb2YgZGl2aXNpb24gb2YgdGhlIHByb2plY3QgdG8gdmFyaW91cyBkZXZlbG9wZXJzLCBkYWlseSBldmFsdWF0aW9uIG9mIHByb2plY3QsIHdlZWtseSByZXBvcnQgb2Ygc3RhdHVzIG9mIHByb2plY3QsIHRlc3RpbmcgYW5kIGl0cyByZXBvcnQsIGFsbCB0aGVzZSBmdW5jdGlvbnMgd2FzIG1hZGUgZWFzeSB3aXRoIHRoaXMgcHJvamVjdC5kZAIFDw8WAh8DBRVBc3AuTmV0LE1TIFNxbCxDIy5OZXRkZAIHDw8WAh8DBQQ1ODI3ZGQCCQ8PFgIfBAUyfi9Qcm9qZWN0L1Byb2plY3QtRXZhbHVhdG9yLWFuLUFTUC1OZXQtUHJvamVjdC56aXBkZAKbAQ9kFgJmD2QWCgIBDw8WAh8DBSNPbmxpbmUgVm90aW5nIFN5c3RlbSBQcm9qZWN0IFJlcG9ydGRkAgMPDxYCHwMF5QNUaGUgcHJvamVjdCAiVm90aW5nIFNvZnR3YXJlIiBhaW1zIGF0IG1ha2luZyB0aGUgdm90aW5nIHByb2Nlc3MgZWFzeSBpbiBjb29wZXJhdGl2ZSBzb2NpZXRpZXMuIFByZXNlbnRseSB2b3RpbmcgaXMgcGVyZm9ybWVkIHVzaW5nIGJhbGxvdCBwYXBlciBhbmQgdGhlIGNvdW50aW5nIGlzIGRvbmUgbWFudWFsbHksIGhlbmNlIGl0IGNvbnN1bWVzIGEgbG90IG9mIHRpbWUuIFRoZXJlIGNhbiBiZSBwb3NzaWJpbGl0eSBvZiBpbnZhbGlkIHZvdGVzLiBBbGwgdGhlc2UgbWFrZXMgZWxlY3Rpb24gYSB0ZWRpb3VzIHRhc2suIEluIG91ciBwcm9wb3NlZCBzeXN0ZW0gdm90aW5nIGFuZCBjb3VudGluZyBpcyBkb25lIHdpdGggdGhlIGhlbHAgb2YgY29tcHV0ZXIuIEl0IHNhdmVzIHRpbWUsIGF2b2lkIGVycm9yIGluIGNvdW50aW5nIGFuZCB0aGVyZSB3aWxsIGJlIG5vIGludmFsaWQgdm90ZXMuIEl0IG1ha2VzIHRoZSBlbGVjdGlvbiBwcm9jZXNzIGVhc3kuIGRkAgUPDxYCHwMFFUFzcC5OZXQsTVMgU3FsLEMjLk5ldGRkAgcPDxYCHwMFBTEwNjk5ZGQCCQ8PFgIfBAU0fi9Qcm9qZWN0L09ubGluZS12b3Rpbmctc3lzdGVtLWEtQVNQLk5ldC1Qcm9qZWN0LnppcGRkApwBD2QWAmYPZBYKAgEPDxYCHwMFGFBoYXJtYSBNYW5hZ2VtZW50IFN5c3RlbWRkAgMPDxYCHwMFUkRlc2t0b3AgQXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIEphdmEgdG8gYXV0b21hdGUgdGhlIG9wZXJhdGlvbiBvZiBwaGFybWEgY29tcGFueS5kZAIFDw8WAh8DBQtKYXZhLE9yYWNsZWRkAgcPDxYCHwMFBTExODg5ZGQCCQ8PFgIfBAUnfi9Qcm9qZWN0L3BoYXJtYSBtYW5hZ2VtZW50IHByb2plY3QuemlwZGQCnQEPZBYCZg9kFgoCAQ8PFgIfAwUhUGF5Um9sbCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKYXZhZGQCAw8PFgIfAwXOAVBheXJvbGwgU3lzdGVtIGlzIGEgd2luZG93IGJhc2VkIHNvbHV0aW9uIGZvciBzbWFsbCBDb21wYW55Lkl0IGluY2x1ZGVzIFNhbGFyeSBNYW5hZ2VtZW50LEVtcGxveWVlIE1hbmFnZW1lbnQsQXR0ZW5kYW5jZSBNYW5hZ2VtZW50LkEgUHJvamVjdCBpcyBEZXZlbG9wZWQgaW4gSmF2YSB0byBpbXBsZW1lbnQgcG93ZXJmdWwgb29wIGNvbmNlcHRzIG9mIEphdmEuZGQCBQ8PFgIfAwUESmF2YWRkAgcPDxYCHwMFBDY2OTFkZAIJDw8WAh8EBTd+L1Byb2plY3QvUGF5Um9sbCBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0IGluIEphdmEuemlwZGQCngEPZBYCZg9kFgoCAQ8PFgIfAwUbT25saW5lIE11c2ljIExpYnJhcnkgaW4gSlNQZGQCAw8PFgIfAwV7UHJvamVjdHMgaW1wbGVtZW50IG9ubGluZSBtdXNpYyBMaWJyYXJ5IGluIEpTUChKYXZhIFNlcnZlciBQYWdlcykuSW1wbGVtZW50cyBEYXRhYmFzZSBhbmQgU3RvcmUgQ29tcGxleCBtdXNpYyBmaWxlIGluIEphdmEuZGQCBQ8PFgIfAwUPSlNQLEphdmEsT3JhY2xlZGQCBw8PFgIfAwUFMTA3MjNkZAIJDw8WAh8EBTF+L1Byb2plY3QvT25saW5lIE11c2ljIFBvcnRhbCBpbiBKU1AtRW5nZ1Jvb20uemlwZGQCnwEPZBYCZg9kFgoCAQ8PFgIfAwUdRmlsZSBTZWFyY2hpbmcgU3lzdGVtIGluIEpBVkFkZAIDDw8WAh8DBZEBRWZmaWNpZW50IEZpbGUgU2VhcmNoaW5nIGFsZ29yaXRobSBpcyBpbXBsZW1lbnRlZCBpbiBKYXZhLkl0IGltcGxlbWVudHMgbWluaW11bSBkZWxheSBmaWxlIHNlYXJjaGluZyBmYWNpbGl0eSB3aXRoIG9wdGltaXplZCBzZWFyY2hpbmcgYWxnb3JpdGhtLmRkAgUPDxYCHwMFBEpBVkFkZAIHDw8WAh8DBQUxODgzOWRkAgkPDxYCHwQFNX4vUHJvamVjdC9GaWxlIFNlYXJjaGluZyBQcm9qZWN0IGluIEphdmEtRW5nZ1Jvb20uemlwZGQCoAEPZBYCZg9kFgoCAQ8PFgIfAwUhU3R1ZGVudCBJbmZvcm1hdGlvbiBTeXN0ZW0gaW4gUEhQZGQCAw8PFgIfAwWDAXN0dWRlbnQgSW5mb3JtYXRpb24gc3lzdGVtIHByb2plY3QgaW1wbGVtZW50IERhdGFiYXNlIGNvbm5lY3Rpdml0eSB3aXRoIFBIUC5Nb2R1bGVzIGFyZTpQZXJzb25hbCBEYXRhIG9mIFN0dWRlbnQsUmVzdWx0LEF0dGVuZGFuY2UuZGQCBQ8PFgIfAwUJUEhQLE1ZU1FMZGQCBw8PFgIfAwUFNDAzMjNkZAIJDw8WAh8EBTh+L1Byb2plY3QvU3R1ZGVudCBJbmZvcm1hdGlvbiBTeXN0ZW0gaW4gUEhQX0VuZ2dSb29tLnppcGRkAqEBD2QWAmYPZBYKAgEPDxYCHwMFHkNvbGxlZ2UgTGlicmFyeSBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFSkxpYnJhcnkgTWFuYWdlbWVudCBTeXN0ZW0gUHJvamVjdCBEZXZlbG9wZWQgd2l0aCBPYmplY3QgT3JpZW50ZWQgQ29uY2VwdHMuZGQCBQ8PFgIfAwULSmF2YSxPcmFjbGVkZAIHDw8WAh8DBQUyMDk2NmRkAgkPDxYCHwQFHH4vUHJvamVjdC9jb2xsZWdlbGlicmFyeS56aXBkZAKiAQ9kFgJmD2QWCgIBDw8WAh8DBRtPbmxpbmUgTXVzaWMgTGlicmFyeSBpbiBQSFBkZAIDDw8WAh8DBWdQcm9qZWN0cyBpbXBsZW1lbnQgb25saW5lIG11c2ljIExpYnJhcnkgaW4gUEhQLkltcGxlbWVudHMgRGF0YWJhc2UgYW5kIFN0b3JlIENvbXBsZXggbXVzaWMgZmlsZSBpbiBQSFAuZGQCBQ8PFgIfAwUJUEhQLE1ZU1FMZGQCBw8PFgIfAwUFMTcxNjlkZAIJDw8WAh8EBSl+L1Byb2plY3QvT25saW5lIG11c2ljIExpYnJhcnkgaW4gUEhQLnppcGRkAqMBD2QWAmYPZBYKAgEPDxYCHwMFJU9ubGluZSBIb3RlbCBNYW5hZ2VtZW50IFN5c3RlbSBpbiBQSFBkZAIDDw8WAh8DBUtvbmxpbmUgSG90ZWwgU2l0ZSBEZXZlbG9wZWQgaW4gUEhQLlJlYWR5IHRvIHJ1biBjb2RlIGZvciBmaW5hbCBzZW0gc3R1ZGVudC5kZAIFDw8WAh8DBQlQSFAsTVlTUUxkZAIHDw8WAh8DBQUxNzQyNmRkAgkPDxYCHwQFLn4vUHJvamVjdC9Ib3RlbCBNYW5hZ2VtZW50IEluIFBIUCBFbmdnUm9vbS56aXBkZAKkAQ9kFgJmD2QWCgIBDw8WAh8DBSFCYXJjb2RlIEVuYWJsZWQgQXR0ZW5kYW5jZSBTeXN0ZW1kZAIDDw8WAh8DBVZiYXJjb2RlIEVuYWJsZWQgQXR0ZW5kYW5jZSBTeXN0ZW0gaW4gLk5ldCB0byBpbnRlcmZhY2UgRWxlY3Ryb25pYyBEZXZpY2VzIHdpdGggQyMuTmV0LmRkAgUPDxYCHwMFDUMjLk5ldCxNUyBTUUxkZAIHDw8WAh8DBQQ0NDE2ZGQCCQ8PFgIfBAU2fi9Qcm9qZWN0L0JhcmNvZGUgRW5hYmxlZCBBdHRlbmRhbmNlIFJlY29yZCBTeXN0ZW0ucmFyZGQCpQEPZBYCZg9kFgoCAQ8PFgIfAwUoT25saW5lIENvdXJpZXIgTWFuYWdlbWVudCBTeXN0ZW0gaW4gSmF2YWRkAgMPDxYCHwMFTU9ubGluZSBXZWJzaXRlIERldmVsb3AgZm9yIENvdXJpZXIgQ29tcGFuaWVzIHRvIENvbXB1dGVyaXplIHRoZWlyIG9wZXJhdGlvbnMuZGQCBQ8PFgIfAwULSmF2YSxPcmFjbGVkZAIHDw8WAh8DBQQ5MjU2ZGQCCQ8PFgIfBAU3fi9Qcm9qZWN0L09ubGluZSBDb3VyaW91ciBNYW5hZ2VtZW50IFN5c3RlbSBpbiBKYXZhLnppcGRkAqYBD2QWAmYPZBYKAgEPDxYCHwMFLVNhbGVzIGFuZCBJbnZlbnRvcnkgTWFuYWdlbWVudCBTeXN0ZW0gUHJvamVjdGRkAgMPDxYCHwMFvgFUaGlzIFByb2plY3QgQXV0b21hdGUgU2FsZXMgYW5kIEludmVudG9yeSBPcGVyYXRpb25zIG9mIENvbW1lcmNpYWwgRmlybS5JdCBpbmNsdWRlcyxQdXJjaGFzZSBNYW5hZ2VtZW50LFN0b2NrIE1hbmFnZW1lbnQsU2FsZXMgTWFuYWdlbWVudCBNb2R1bGVzLlByb2plY3QgYWxzbyBJbmNsdWRlcyBuaWNlIERlc2lnbmVkIFJlcG9ydHMuZGQCBQ8PFgIfAwUcVmIuTmV0LE15U3FsLENyeXN0YWwgUmVwb3J0c2RkAgcPDxYCHwMFBTIwMjczZGQCCQ8PFgIfBAU8fi9Qcm9qZWN0L1NhbGVzIGFuZCBpbnZlbnRvcnkgTWFuYWdlbWVudCBTeXN0ZW0gRW5nZ1Jvb20ucmFyZGQCpwEPZBYCZg9kFgoCAQ8PFgIfAwUqRmFjZWJvb2sgbGlrZSBTb2NpYWwgTmV0d29ya2luZyBpbiBBc3AubmV0ZGQCAw8PFgIfAwVgU29jaWFsIE5ldHdvcmtpbmcgaXMgYSBlbWVyZ2luZyB0cmVuZCBOb3cuVGhpcyBQcm9qZWN0IGltcGxlbWVudGVkIFNvY2lhbCBOZXR3b3JraW5nIGluIEFzcC5OZXQuZGQCBQ8PFgIfAwUTQXNwLk5ldCxDIy5OZXQsSFRNTGRkAgcPDxYCHwMFBTE4OTU2ZGQCCQ8PFgIfBAU5fi9Qcm9qZWN0L1NvY2lhbCBOZXR3b3JraW5nIHNpdGVzIGluIEFzcC5OZXQgRW5nZ1Jvb20ucmFyZGQCqAEPZBYCZg9kFgoCAQ8PFgIfAwUgb25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbSBpbiBQSFBkZAIDDw8WAh8DBXNSZWFsIHRpbWUgT25saW5lIEV4YW1pbmF0aW9uIFdlYnNpdGUgZGV2ZWxvcGVkIGluIFBIUC5JbnN0YW50IHJlc3VsdCxSYW5kb20gUXVlc3Rpb24sRXhhbSBTZWxlY3Rpb24gaXMgaW1wbGVtZW50ZWQuZGQCBQ8PFgIfAwUJUEhQLE1ZU1FMZGQCBw8PFgIfAwUFMjc0ODVkZAIJDw8WAh8EBSl+L1Byb2plY3QvT25saW5lIEV4YW0gaW4gUEhQIEVuZ2dSb29tLnppcGRkAqkBD2QWAmYPZBYKAgEPDxYCHwMFHU9ubGluZSBCYW5raW5nIFN5c3RlbSBQcm9qZWN0ZGQCAw8PFgIfAwVgTmV0YmFua2luZyBGYWNpbGl0eWlzIFZpdGFsIGVsZW1lbnQgZm9yIGFueSBCYW5rLlRoaXMgUHJvamVjdCBpbXBsZW1lbnQgTmV0QmFua2luZyB3aXRoIEFzcC5OZXQuZGQCBQ8PFgIfAwUTQXNwLk5ldCxDIy5OZXQsSFRNTGRkAgcPDxYCHwMFBDczMDNkZAIJDw8WAh8EBSB+L1Byb2plY3QvTmV0QmFua2luZ0VuZ2dSb29tLnJhcmRkAqoBD2QWAmYPZBYKAgEPDxYCHwMFKE9ubGluZSBDb3VyaWVyIENhcmdvIE1hbmFnZW1lbnQgUHJvamVjdCBkZAIDDw8WAh8DBZoBT25saW5lIFdlYnNpdGUgRGV2ZWxvcCBmb3IgQ291cmllciBhbmQgQ2FyZ28gQ29tcGFuaWVzIHRvIGhhbmRsZSB0aGVpciBPcGVyYXRpb25zIFJlbW90ZWx5IGZyb20gQW55d2hlcmUuVmVyeSBuaWNlIFByb2plY3QgZGV2ZWxvcGVkIHdpdGggUHJvZmVzc2lvbmFsaXNtLmRkAgUPDxYCHwMFE0FzcC5OZXQsQyMuTmV0LEhUTUxkZAIHDw8WAh8DBQQ1OTI1ZGQCCQ8PFgIfBAUxfi9Qcm9qZWN0L09OTElORSBDT1VSSUVSIEFORCBDQVJHTyBNQU5BR0VNRU5ULnJhcmRkAqsBD2QWAmYPZBYKAgEPDxYCHwMFIUNvbGxlZ2UgTWFuYWdtZW50IFN5c3RlbSBQcm9qZWN0IGRkAgMPDxYCHwMFaVRoaXMgUHJvamVjdCBpbmNsdWRlcyBBZG1pc3Npb24gTW9kdWxlcyxGZWVzIENvbGxlY3Rpb24sQXR0ZW5kYW5jZSBhbmQgVGltZVRhYmxlIE1hbmFnZW1lbnQgZm9yIENvbGxlZ2VzLmRkAgUPDxYCHwMFDVZiLk5ldCxNUyBTUUxkZAIHDw8WAh8DBQUyMjY0MWRkAgkPDxYCHwQFJH4vUHJvamVjdC9Db2xsZWdlTWFuYWdtZW50U3lzdGVtLnJhcmRkAqwBD2QWAmYPZBYKAgEPDxYCHwMFIkFpcmxpbmUgUmVzZXJ2YXRpb24gU3lzdGVtIFByb2plY3RkZAIDDw8WAh8DBTRBaXJsaW5lIFJlc2VydmF0aW9uIFN5c3RlbSBQcm9qZWN0IGlzIG1hZGUgaW4gVmIubmV0ZGQCBQ8PFgIfAwUGVmIuTmV0ZGQCBw8PFgIfAwUFMjI3NDRkZAIJDw8WAh8EBSh+L1Byb2plY3QvYWlybGluZSByZXNlcnZhdGlvbiBzeXN0ZW0ucmFyZGQCrQEPZBYCZg9kFgoCAQ8PFgIfAwUgVGVsZXBob25lIEJpbGxpbmcgU3lzdGVtIFByb2plY3RkZAIDDw8WAh8DBSVUZWxlcGhvbmUgQmlsbGluZyBTeXN0ZW0gbWFkZSBpbiBKYXZhZGQCBQ8PFgIfAwUESmF2YWRkAgcPDxYCHwMFBTE4ODI0ZGQCCQ8PFgIfBAUmfi9Qcm9qZWN0L1RlbGVwaG9uZSBCaWxsaW5nIFN5c3RlbS56aXBkZAKuAQ9kFgJmD2QWCgIBDw8WAh8DBSlIb3NwaXRhbCBNYW5hZ2VtZW50IFN5c3RlbSBQcm9qZWN0IGluIEMrK2RkAgMPDxYCHwMFLUhvc3BpdGFsIE1hbmFnZW1lbnQgU3lzdGVtIHdpdGggT09QUyBDb25jZXB0LmRkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDc4NThkZAIJDw8WAh8EBT1+L1Byb2plY3QvaG9zcGl0YWwgbWFuYWdlbWVudCBQcm9qZWN0IGluIENQUCBFbmdnUm9vbS5Db20uemlwZGQCrwEPZBYCZg9kFgoCAQ8PFgIfAwUtUmFpbHdheSByZXNlcnZhdGlvbiBTeXN0ZW0gUHJvamVjdCBpbiBBc3AubmV0ZGQCAw8PFgIfAwW8AlRoaXMgT25saW5lIFN5c3RlbSBpcyBiYXNpY2FsbHkgY29uY2VybiB3aXRoIFJlc2VydmF0aW9uIGFuZCBjYW5jZWxsYXRpb24gb2YgUmFpbHdheSBUaWNrZXRzLlVzZXIgb2YgdGhpcyBzeXN0ZW0gcmVxdWlyZSBhIFJlZ2lzdHJhdGlvbi5hZnRlciByZWdpc3RyYXRpb24gb25lIGNhbiBib29rIG9yIGNhbmNlbCB0aWNrZXRzLmF1dG9tYXRpYyBzZWF0IGFsbG9jYXRpb24gYW5kIHNlYXQgbWF0cml4IGFyZSBtYWludGFpbmVkIGJ5IHN5c3RlbS5BZG1pbmlzdHJhdG9yIG9mIHRoaXMgc3lzdGVtIGNhbiBtYW5hZ2UgYWxsIHRoZSB0YXNrIGdlbmVyYWxseS5kZAIFDw8WAh8DBRpBc3AuTmV0LEMjLk5ldCxIVE1MLE1TIFNxbGRkAgcPDxYCHwMFBDc2MTFkZAIJDw8WAh8EBT1+L1Byb2plY3QvUmFpbHdheSBSZXNlcnZhdGlvbiBTeXN0eWVtIGluIEFzcC1FbmdnUm9vbS5Db20uemlwZGQCsAEPZBYCZg9kFgoCAQ8PFgIfAwUiUmFpbHdheSByZXNlcnZhdGlvbiBTeXN0ZW0gUHJvamVjdGRkAgMPDxYCHwMFOUZ1bGx5IEF1dG9tYXRlZCBSYWlsd2F5IHJlc2VydmF0aW9uIFN5c3RlbSBtYWRlIGluIFZiIDYuMGRkAgUPDxYCHwMFBlZiIDYuMGRkAgcPDxYCHwMFBDg3MzlkZAIJDw8WAh8EBTV+L1Byb2plY3QvUmFpbHdheSBSZXNlcnZhdGlvbiBTeXN0ZW0tRW5nZ3Jvb20uY29tLnppcGRkArEBD2QWAmYPZBYKAgEPDxYCHwMFIEFuZHJvaWQgYmFzZWQgRS1UZW5kZXJpbmcgU3lzdGVtZGQCAw8PFgIfAwVJRS10ZW5kZXJpbmcgaXMgYSBhbmRyb2lkIGJhc2VkIFRlbmRlcmluZyBTeXN0ZW0gZm9yIEFuZHJvaWQgTW9iaWxlIFVzZXJzLmRkAgUPDxYCHwMFB0FuZHJvaWRkZAIHDw8WAh8DBQQxOTA4ZGQCCQ8PFgIfBAUdfi9Qcm9qZWN0L1NtYXJ0IFRlbmRlcmluZy56aXBkZAKyAQ9kFgJmD2QWCgIBDw8WAh8DBShPbmxpbmUgVXNlIEZlZWQgdXNpbmcgUlNTIGluIFBIUCBQcm9qZWN0ZGQCAw8PFgIfAwVAVGhpcyBwcm9qZWN0IGlzIGEgc2ltcGxlIGV4YW1wbGUgb2YgaG93IHRvIHVzZSBSU1MgRmVlZCBpbiBQSFAgLmRkAgUPDxYCHwMFCVBIUCBNWVNRTGRkAgcPDxYCHwMFBDcyNTVkZAIJDw8WAh8EBRh+L1Byb2plY3QvTmV3c0ZlZWRlci56aXBkZAKzAQ9kFgJmD2QWCgIBDw8WAh8DBRlUcmF2ZWxsaW5nIEFnZW5jeSBQcm9qZWN0ZGQCAw8PFgIfAwUjVHJhdmVsbGluZyBBZ2VuY3kgcHJvamVjdCBtYWRlIGluIENkZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ4MjQxZGQCCQ8PFgIfBAUffi9Qcm9qZWN0L1RyYXZlbGxpbmcgQWdlbmN5LnppcGRkArQBD2QWAmYPZBYKAgEPDxYCHwMFGlJlc3RhdXJhbnQgYmlsbGluZyBQcm9qZWN0ZGQCAw8PFgIfAwUkUmVzdGF1cmFudCBiaWxsaW5nIFByb2plY3QgbWFkZSBpbiBDZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENDgwMGRkAgkPDxYCHwQFHn4vUHJvamVjdC9SZXN0dXJhbnRiaWxsaW5nLnppcGRkArUBD2QWAmYPZBYKAgEPDxYCHwMFG1RlbGVwaG9uZSBEaXJlY3RvcnkgUHJvamVjdGRkAgMPDxYCHwMFKVRlbGVwaG9uZSBEaXJlY3RvcnkgUHJvamVjdCBtYWRlIGluIEMvQysrZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUENTczM2RkAgkPDxYCHwQFIX4vUHJvamVjdC9UZWxlcGhvbmUgRGlyZWN0b3J5LnJhcmRkArYBD2QWAmYPZBYKAgEPDxYCHwMFIVNvdXJjZSBDb2RlIEZvciBUaWMgVGFjIFRvZSBHYW1lIGRkAgMPDxYCHwMFJVNvdXJjZSBDb2RlIEZvciBUaWMgVGFjIFRvZSBHYW1lIGluIENkZAIFDw8WAh8DBQNDKytkZAIHDw8WAh8DBQQ0ODg3ZGQCCQ8PFgIfBAUZfi9Qcm9qZWN0L1RpYyBUYWMgVG9lLnJhcmRkArcBD2QWAmYPZBYKAgEPDxYCHwMFJFRyYWZmaWMgTGlnaHQgSW1wbGVtZW50YXRpb24gUHJvamVjdGRkAgMPDxYCHwMFMlRyYWZmaWMgTGlnaHQgSW1wbGVtZW50YXRpb24gUHJvamVjdCBtYWRlIGluIEMvQysrZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUFMTAxNTVkZAIJDw8WAh8EBSp+L1Byb2plY3QvdHJhZmZpYyBsaWdodCBpbXBsZW1lbnRhdGlvbi5yYXJkZAK4AQ9kFgJmD2QWCgIBDw8WAh8DBRlUcmF2ZWxsaW5nIEFnZW5jeSBQcm9qZWN0ZGQCAw8PFgIfAwUnVHJhdmVsbGluZyBBZ2VuY3kgUHJvamVjdCBtYWRlIGluIEMvQysrZGQCBQ8PFgIfAwUDQysrZGQCBw8PFgIfAwUEODI0MWRkAgkPDxYCHwQFH34vUHJvamVjdC9UcmF2ZWxsaW5nIEFnZW5jeS56aXBkZAK5AQ9kFgJmD2QWCgIBDw8WAh8DBSFMSUJSQVJZIE1BTkFHRU1FTlQgU1lTVEVNIFBST0pFQ1RkZAIDDw8WAh8DBRpUaGlzIFByb2plY3QgTWFkZSBpbiBDL0MrK2RkAgUPDxYCHwMFA0MrK2RkAgcPDxYCHwMFBDY0MjZkZAIJDw8WAh8EBTN+L1Byb2plY3QvTElCUkFSWS1NQU5BR0VNRU5ULVNZU1RFTS1BLUMtUFJPSkVDVC56aXBkZAK6AQ9kFgJmD2QWCgIBDw8WAh8DBRJPbmxpbmUgRXhhbSBTeXN0ZW1kZAIDDw8WAh8DBXRXZWIgYmFzZWQgYXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIFBIUCBhbmQgTXlTcWwgd2l0aCByZWFsdGltZSBzY2VuYXJpby5UaGlzIFByb2plY3QgYWxzbyBpbXBsZW1lbnQgZnVuY3Rpb24gaW4gcGhwLmRkAgUPDxYCHwMFCVBIUCxNWVNRTGRkAgcPDxYCHwMFBTIzNzA3ZGQCCQ8PFgIfBAUdfi9Qcm9qZWN0L29ubGluZV9leGFtX3BocC56aXBkZAK7AQ9kFgJmD2QWCgIBDw8WAh8DBSBPbmxpbmUgQ291cmllciBNYW5hZ2VtZW50IFN5c3RlbWRkAgMPDxYCHwMFcFRoaXMgaXMgYSB3ZWIgYXBwbGljYXRpb24gZGV2ZWxvcGVkIHdpdGggSlNQLkl0IGV4cGxvcmUgZnVsbCBmZWF0dXJlcyBvZiBKYXZhLlJlYWR5IHRvIFN1Ym1pdCBmaW5hbCBzZW0gUHJvamVjdC5kZAIFDw8WAh8DBQ9KYXZhLEpTUCxPcmFjbGVkZAIHDw8WAh8DBQQ4MTAyZGQCCQ8PFgIfBAUvfi9Qcm9qZWN0L09ubGluZSBDb3VyaW91ciBNYW5hZ2VtZW50IFN5c3RlbS56aXBkZAK8AQ9kFgJmD2QWCgIBDw8WAh8DBSVFbGVjdHJvbmljIFNob3BwaW5nIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwV8UHJvamVjdCBEZXZlbG9wZWQgaW4gVmIuTmV0IHdpdGggZm9sbG93aW5nIFNvZnR3YXJlIEVuZ2luZWVyaW5nIFBhcmFkaWdtLlJlYWR5IHRvIHN1Ym1pdCBwcm9qZWN0IEVsZWN0cm9uaWMgU2hvcCBNYW5hZ2VtZW50LmRkAgUPDxYCHwMFDFZiLk5ldCxBY2Vzc2RkAgcPDxYCHwMFBTE1NDM4ZGQCCQ8PFgIfBAUsfi9Qcm9qZWN0L0VsZWN0cm9uaWNTaG9wTWFuYWdlbWVudFN5c3RlbS5yYXJkZAK9AQ9kFgJmD2QWCgIBDw8WAh8DBRlQYXlyb2xsIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVuV2luZG93cyBBcHBsaWNhdGlvbiBkZXZlbG9wZWQgYXMgYSBhY2FkZW1pYyBwcm9qZWN0IGluIFZCLk5ldC5Db21wbGV0ZSBwcm9qZWN0IHdpdGggc2ltcGxlIGNvZGluZyBhbmQgcmVwb3J0cy5kZAIFDw8WAh8DBQxWYi5OZXQsQWNlc3NkZAIHDw8WAh8DBQUxNTQzMWRkAgkPDxYCHwQFJX4vUHJvamVjdC9FbXBsb3llZVBheXJvbGxhbmRMZWF2ZS56aXBkZAK+AQ9kFgJmD2QWCgIBDw8WAh8DBRdMZWF2ZSBNYW5hZ2VtZW50IFN5c3RlbWRkAgMPDxYCHwMFQEFjYWRlbWljIFByb2plY3QgbWFkZSBpbiBWYi5OZXQgZm9yIGF1dG9tYXRpbmcgcHJvY2VzcyBvZiBMZWF2ZS5kZAIFDw8WAh8DBQxWYi5OZXQsQWNlc3NkZAIHDw8WAh8DBQUxMDYzMGRkAgkPDxYCHwQFJX4vUHJvamVjdC9MZWF2ZSBNYW5hZ2VtZW50IFN5c3RlbS5yYXJkZAK/AQ9kFgJmD2QWCgIBDw8WAh8DBSNJbnN0aXR1dGUgTWFuYWdlbWVudCBTeXN0ZW0gUHJvamVjdGRkAgMPDxYCHwMFOVRoaXMgaXMgYSBXaW5kb3dzIEFwcGxpY2F0aW9uIG1hZGUgYXMgYSBhY2FkZW1pYyBwcm9qZWN0LmRkAgUPDxYCHwMFG1YgQiA2LjAsVmlzdWFsIEJhc2ljLEFjY2Vzc2RkAgcPDxYCHwMFBDE2OThkZAIJDw8WAh8EBTF+L1Byb2plY3QvSW5zdGl0dXRlIE1hbmFnZW1lbnQgU3lzdGVtIFByb2plY3QucmFyZGQCwAEPZBYCZg9kFgoCAQ8PFgIfAwUPQXVjdGlvbiBXZWJzaXRlZGQCAw8PFgIfAwVOQXVjdGlvbiBXZWJzaXRlIE1hZGUgaW4gQXNwLk5ldCAuVGhpcyBXZWJzaXRlIE1hZGUgQnkgTmFpdGlrIFNpcihTU1BDLENvbGxlZ2UpZGQCBQ8PFgIfAwUHQVNQLk5ldGRkAgcPDxYCHwMFBDY1MzVkZAIJDw8WAh8EBRp+L1Byb2plY3QvYXVjdGlvbl9ob2xpLnJhcmRkAsEBD2QWAmYPZBYKAgEPDxYCHwMFFkNyaW1lIFJlcG9ydGluZyBTeXN0ZW1kZAIDDw8WAh8DBSVDcmltZSBSZXBvcnRpbmcgU3lzdGVtIFByb2plY3QgSW4gUEhQZGQCBQ8PFgIfAwUDUEhQZGQCBw8PFgIfAwUFMTY2OTlkZAIJDw8WAh8EBSR+L1Byb2plY3QvQ3JpbWUgUmVwb3J0aW5nIFN5c3RlbS5yYXJkZALCAQ9kFgJmD2QWCgIBDw8WAh8DBSVPbmxpbmUgRW1wbG95ZWUgUmVnaXN0cmF0aW9uICBQcm9qZWN0ZGQCAw8PFgIfAwU3T25saW5lIEVtcGxveWVlIFJlZ2lzdHJhdGlvbiAgUHJvamVjdCAgbWFkZSBpbiBBc3AubmV0IGRkAgUPDxYCHwMFB0FTUC5OZXRkZAIHDw8WAh8DBQQ3NDQ2ZGQCCQ8PFgIfBAUefi9Qcm9qZWN0L0VtcGxveWllZSBlbnRlcnkucmFyZGQCwwEPZBYCZg9kFgoCAQ8PFgIfAwUWbW9iaWxlIGJhbmtpbmcgUHJvamVjdGRkAgMPDxYCHwMF6gFtb2JpbGUgYmFua2luZyBpcyBiZWNvbWluZyBtb3JlIGFuZCBtb3JlIHBvcHVsYXIgbm93LnRoaXMgYXBwbGljYXRpb24gaXMgZGV2ZWxvcGVkIGluIGphdmEgdG8gcHJvdmlkZSBhIGJhbmsgb24gbW9iaWxlLm1vYmlsZSBiYW5raW5nIGFsbG93cyB1c2VyIHRvIHZpZXcgdGhlaXIgYmFsYW5jZSx0cmFuc2FjdGlvbiBhbmQgdHJhbnNmZXIgbW9uZXkuSXQgcHJvdmlkZXMgYSBlYXNlIG9mIHVzZSBmb3IgdXNlci5kZAIFDw8WAh8DBQRKYXZhZGQCBw8PFgIfAwUFMjMwOTBkZAIJDw8WAh8EBTh+L1Byb2plY3QvbW9iaWxlLWJhbmtpbmctcHJvamVjdC1zb3VyY2UtY29kZS1pbi1qYXZhLnppcGRkAsQBD2QWAmYPZBYKAgEPDxYCHwMFIlRleHQgVG8gU3BlZWNoIGNvbnZlcnQgaW4gQW5kcm9pZCBkZAIDDw8WAh8DBTR0aGlzIGlzIHNpbXBsZSBhcHBsaWNhdGlvbiBmb3IgYmVnaW5uZXJzIGluIGFuZHJvaWQgZGQCBQ8PFgIfAwUHQW5kcm9pZGRkAgcPDxYCHwMFBDIxMjRkZAIJDw8WAh8EBSh+L1Byb2plY3QvQW5kcm9pZFRleHRUb1NwZWVjaFByb2plY3QucmFyZGQCxQEPZBYCZg9kFgoCAQ8PFgIfAwUMU3RvY2sgTWFya2V0ZGQCAw8PFgIfAwVhVGhpcyBpcyBXaW5kb3dzIEJhc2UgYXBwbGljYXRpb24uIEluIFJoaXMgUHJvamVjdCBVIENhbiBTZWUgTGl2ZSBSYXRlIE9mIFNoYXJlICwgYWRkIHVyIGxpc3QsIGV0Y2RkAgUPDxYCHwMFBkMjLk5ldGRkAgcPDxYCHwMFBDI2NjdkZAIJDw8WAh8EBRZ+L1Byb2plY3QvU3RvY2tCYWcucmFyZGQCxgEPZBYCZg9kFgoCAQ8PFgIfAwUVS2F1biBCYW5lZ2EgQ3JvcmVwYXRpZGQCAw8PFgIfAwUnVGhpcyBQcm9qZWN0IElzIE1hZGUgaW4gQXNwLm5ldCB3aXRoIEMjZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDg0NTFkZAIJDw8WAh8EBRZ+L1Byb2plY3QvV2ViU2l0ZTEucmFyZGQCxwEPZBYCZg9kFgoCAQ8PFgIfAwUlU2FsZXMgYW5kIEludmVudG9yeSBNYW5hZ2VtZW50IFN5c3RlbWRkAgMPDxYCHwMFWlNhbGVzIGFuZCBJbnZlbnRvcnkgTWFuYWdlbWVudCBTeXN0ZW0gZGV2ZWxvcGVkIGluIERvdG5ldCB0byBleHBsb3JlIHBvd2VyIG9mIEdVSSBhbmQgT09QLmRkAgUPDxYCHwMFBkMjLk5ldGRkAgcPDxYCHwMFBDQ5MTRkZAIJDw8WAh8EBUF+L1Byb2plY3Qvc2FsZXMtYW5kLWludmVudG9yeS1tYW5hZ2VtZW50LXN5c3RlbS1wcm9qZWN0LWluLXZiLnppcGRkAsgBD2QWAmYPZBYKAgEPDxYCHwMFG09ubGluZSBNb2JpbGUgU2hvcHBpbmcgY2FydGRkAgMPDxYCHwMFN0EgcHJvamVjdCBtYWRlIGluIGFzcC5uZXQgdG8gaW1wbGVtZW50IG9ubGluZSBzaG9wcGluZy5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEODAxMGRkAgkPDxYCHwQFOH4vUHJvamVjdC9PTkxJTkUtTU9CSUxFLVBIT05FLVNIT1AtQS1BU1AuTkVULVBST0pFQ1QuemlwZGQCyQEPZBYCZg9kFgoCAQ8PFgIfAwUKVGVjaCBNYXJ0IGRkAgMPDxYCHwMFNEEgcHJvamVjdCBtYWRlIGluIGphdmEgZm9yIGNvbm5lY3Rpbmcgd2l0aCBEYXRhYmFzZS5kZAIFDw8WAh8DBQVKYXZhIGRkAgcPDxYCHwMFBTE4MTg3ZGQCCQ8PFgIfBAUWfi9Qcm9qZWN0L1RlY2hNYXJ0LnppcGRkAsoBD2QWAmYPZBYKAgEPDxYCHwMFF0RhaXJ5IE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwXiAVRoaXMgaXMgYSBEYWlyeSBNYW5hZ2VtZW50IFN5c3RlbSBwcm9qZWN0IGRldmVsb3BlZCBpbiBjIy5uZXQuVGhpcyB3aW5kb3dzIGJhc2VkIHByb2plY3QgZGVhbCB3aXRoIG1haW50YWluaW5nIHJlY29yZCBvZiBjb2xsZWN0aW9uIG9mIE1pbGssQWNjb3VudGluZyBvZiBtaWxrLFN0b2NrIG1hbmFnZW1lbnQgYW5kIG90aGVyIHZhcmlvdXMgaW52ZW50b3J5IHRhc2sgcmVsYXRlZCB0byBEYWlyeS5kZAIFDw8WAh8DBQZDIy5OZXRkZAIHDw8WAh8DBQQzOTc2ZGQCCQ8PFgIfBAUlfi9Qcm9qZWN0L0RBSVJZIE1BTkFHRU1FTlQgU1lTVEVNLnJhcmRkAssBD2QWAmYPZBYKAgEPDxYCHwMFFUthdW4gQmFuZWdhIENyb3JlcGF0aWRkAgMPDxYCHwMFQFRoaXMgaXMgYSBzbWFsbCBwcm9qZWN0IHRvIHNob3cgYSBncmFwaGljYWwgcG93ZXIgb2YgQysrIExpYnJhcnlkZAIFDw8WAh8DBQVDL0MrK2RkAgcPDxYCHwMFBDY2MzBkZAIJDw8WAh8EBSJ+L1Byb2plY3Qva2F1bl9iYW5lZ2FfYXJhYnBhdGkuemlwZGQCzAEPZBYCZg9kFgoCAQ8PFgIfAwUcRS1CaWxsaW5nIGFuZCBJbnZvaWNlIFN5c3RlbWRkAgMPDxYCHwMFRmViaWxsaW5nIGFuZCBpbnZvaWNlIHN5c3RlbSBpcyBhIGxpdmUgcHJvamVjdCB3cml0dGVuIGluIHZpc3VhbCBiYXNpYy5kZAIFDw8WAh8DBQZWYi5OZXRkZAIHDw8WAh8DBQUxNDA0OGRkAgkPDxYCHwQFKX4vUHJvamVjdC9lYmlsbGluZy1hbmQtaW52b2ljZS1zeXN0ZW0uemlwZGQCzQEPZBYCZg9kFgoCAQ8PFgIfAwUUS2lvc2sgQ29udHJvbCBTeXN0ZW1kZAIDDw8WAh8DBbQBS2lvc2sgTWFuYWdlbWVudCBTeXN0ZW0gY2FuIGJlIHVzZWQgaW4gUmVzZXJ2YXRpb24gQ2VudGVycy4gSGVyZSB3ZSB0YWtlIEtTUlRDIFJhaWx3YXksIEFpcmxpbmUgYW5kIEhvdGVsIHJlc2VydmF0aW9uIGFzIG91ciBhcHBsaWNhdGlvbi4gVGhlIGFwcGxpY2F0aW9uIHdpbGwgYmUgZG9uZSB1c2luZyBDIy5OZXQuZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDM0NDFkZAIJDw8WAh8EBSJ+L1Byb2plY3QvS2lvc2sgQ29udHJvbCBTeXN0ZW0uemlwZGQCzgEPZBYCZg9kFgoCAQ8PFgIfAwUQT25saW5lIEhlbHAgRGVza2RkAgMPDxYCHwMFiQMgVGhpcyBpcyBhbiBJbnRyYW5ldCBiYXNlZCBhcHBsaWNhdGlvbiB0aGF0IGNhbiBiZSBhY2Nlc3NlZCB0aHJvdWdob3V0IHRoZSBjYW1wdXMuIFRoaXMgaXMgb25lIGludGVncmF0ZWQgc3lzdGVtIHRoYXQgY292ZXJzIGRpZmZlcmVudCBraW5kcyBvZiBmYWNpbGl0aWVzIGxpa2UgY2xhc3Mtcm9vbXMsIGxhYnMsIGhvc3RlbHMsIG1lc3MsIGNhbnRlZW4sIGd5bW5hc2l1bSwgY29tcHV0ZXIgY2VudGVyLCBmYWN1bHR5IGNsdWIgZXRjLiBSZWdpc3RlcmVkIHVzZXJzIChzdHVkZW50cywgZmFjdWx0eSwgbGFiLWFzc2lzdGFudHMgYW5kIG90aGVycykgd2lsbCBiZSBhYmxlIHRvIGxvZyBpbiBhIHJlcXVlc3QgZm9yIHNlcnZpY2UgZm9yIGFueSBvZiB0aGUgc3VwcG9ydGVkIGZhY2lsaXRpZS5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMzYxMmRkAgkPDxYCHwQFHn4vUHJvamVjdC9PbmxpbmUgSGVscCBEZXNrLnJhcmRkAs8BD2QWAmYPZBYKAgEPDxYCHwMFHU9ubGluZSBTb2NpYWwgTmV0d29ya2luZyBTaXRlZGQCAw8PFgIfAwVlU29jaWFsIE5ldHdvcmtpbmcgU2l0ZSxEZXZlbG9wZWQgYXMgYSBhY2FkZW1pYyBwcm9qZWN0cyBmb3IgQkNBLE1DQSxCRSxCVEVDSCxCU0MoSVQpLERpcGxvbWEgU3R1ZGVudC5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUENjc0MWRkAgkPDxYCHwQFK34vUHJvamVjdC9PbmxpbmUgU29jaWFsIE5ldHdvcmtpbmcgU2l0ZS5yYXJkZALQAQ9kFgJmD2QWCgIBDw8WAh8DBQtPbmxpbmUgRXhhbWRkAgMPDxYCHwMFqQFUaGlzIFdlYiBBcHBsaWNhdGlvbiBwcm92aWRlcyBmYWNpbGl0eSB0byBjb25kdWN0IG9ubGluZSBleGFtaW5hdGlvbi5hbGxvd3MgbnVtYmVyIG9mIHN0dWRlbnRzIHRvIGdpdmUgdGhlIGV4YW0gYXQgYSB0aW1lIGFuZCBkaXNwbGF5cyB0aGUgcmVzdWx0cyBhcyB0aGUgdGVzdCBnZXRzIG92ZXIuZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDU0OTNkZAIJDw8WAh8EBRl+L1Byb2plY3QvT25saW5lIEV4YW0ucmFyZGQC0QEPZBYCZg9kFgoCAQ8PFgIfAwUkT25saW5lIEVtcGxveWVlIFJlZ2lzdHJhdGlvbiBTeXN0ZW0uZGQCAw8PFgIfAwV9RUlTIGlzIGFjYWRlbWljIHByb2plY3Qgd2hpY2ggaW5jbHVkZSBPbmxpbmUgRW1wbG95ZWUgUmVnaXN0cmF0aW9uLEF0dGVuZGFuY2UsTGVhdmUgTWFuYWdlbWVudCxIb2xpZGF5IGFuZCBTYWxhcnkgTWFuYWdlbWVudC5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUENDI2N2RkAgkPDxYCHwQFMX4vUHJvamVjdC9PbmxpbmUgRW1wbG95ZWUgUmVnaXN0cmF0aW9uIFN5c3RlbS5yYXJkZALSAQ9kFgJmD2QWCgIBDw8WAh8DBRVPbmxpbmUgVHJhZGluZyBTeXN0ZW1kZAIDDw8WAh8DBYQBIk9ubGluZSBUcmFkaW5nIFN5c3RlbSIgSXQgY292ZXJzIHRoZSBmb2xsb3dpbmcgdG9waWNzOiBDbGllbnQgR2F0ZXdheSBUcmFkaW5nIEVuZ2luZSBNYXJrZXQgRGF0YSBTeXN0ZW0gQXVkaXQgUmVxdWlyZW1lbnRzIFN1bW1hcnkuZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDI0MzdkZAIJDw8WAh8EBRx+L1Byb2plY3QvT25saW5lIFRyYWRpbmcucmFyZGQC0wEPZBYCZg9kFgoCAQ8PFgIfAwUfT25saW5lIFRyYXZlbGluZyBUaWNrZXQgQm9va2luZ2RkAgMPDxYCHwMF0AJVc2VmdWwgZm9yIFN0dWRlbnRzLCBGcmVzaGVycyBhbmQgSG9iYmllc3QgdG8gZ2FpbiBoYW5kLW9uIHByb2plY3QgZXhwZXJpZW5jZS4gIFRoZXNlIHByb2plY3RzIGNhbiBhbHNvIGJlIHVzZWQgYXMgQWNhZGVtaWMgUHJvamVjdHMgb2YgQkNBLE1DQSxCLlNjLE0uU2MsQi5FIHN0dWRlbnRzICBQcm9qZWN0IEF2YWlsYWJsZSBpbiA6IFZpc3VhbCBCYXNpYyA2LjAsIFZpc3VhbCBCYXNpYyAubmV0LCBWaXN1YWwgQmFzaWMgMjAwNSAyMDA4ICAgQVNQLCBBU1AubmV0LCBNUyBBY2Nlc3MsIFNxbCBTZXJ2ZXIsIE9yYWNsZSBwbGVhc2UgY2hlY2sgb3V0IGxpc3QgZm9yIG1vcmUgZGV0YWlscy5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMzYwOWRkAgkPDxYCHwQFLX4vUHJvamVjdC9PbmxpbmUgVHJhdmVsaW5nIFRpY2tldCBCb29raW5nLnJhcmRkAtQBD2QWAmYPZBYKAgEPDxYCHwMFDlBheXJvbGwgU3lzdGVtZGQCAw8PFgIfAwWgAVBheXJvbGwgU3lzdGVtIGlzIGEgd2luZG93IGJhc2VkIHNvbHV0aW9uIGZvciBzbWFsbCBDb21wYW55Lkl0IGluY2x1ZGVzIFNhbGFyeSBNYW5hZ2VtZW50LEVtcGxveWVlIE1hbmFnZW1lbnQsQXR0ZW5kYW5jZSBNYW5hZ2VtZW50LkZyZWUgVG8gRG93bmxvYWQgd2l0aCBSZXBvcnRkZAIFDw8WAh8DBQZDIy5OZXRkZAIHDw8WAh8DBQQ0NjIwZGQCCQ8PFgIfBAUcfi9Qcm9qZWN0L1BheXJvbGwgU3lzdGVtLnJhcmRkAtUBD2QWAmYPZBYKAgEPDxYCHwMFIE9ubGluZSBMaWJyYXJ5IE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwWRAU9ubGluZSBMaWJyYXJ5IE1hbmFnZW1lbnQgU3lzdGVtIGlzIGEgd2ViIEFwcGxpY2F0aW9uIHdoaWNoIGluY2x1ZGUgU3R1ZGVudCBNYW5hZ2VtZW50LEF1dG9tYXRhZGUgUmVuZXdhbCBQcm9jZXNzLFB1cmNoYXNlIG1hbmFnZW1lbnQgaXMgaW5jbHVkZWRkZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUENTc2MmRkAgkPDxYCHwQFJ34vUHJvamVjdC9PbmxpbmUgTGlicmFyeSBNYW5hZ2VtZW50LnJhcmRkAtYBD2QWAmYPZBYKAgEPDxYCHwMFF0hvdGVsIE1hbmFnZW1lbnQgU3lzdGVtZGQCAw8PFgIfAwVvVGhpcyBpcyBhIHdpbmRvdyBiYXNlZCBhcHBsaWNhdGlvbi5JdCBpbmNsdWRlcyBPcmRlciBzdWJtaXNzaW9uLEJpbGwgR2VuZXJhdGlvbiBhbmQgT3RoZXIgbWlzY2VsbGFuZW91cyBSZXBvcnQuZGQCBQ8PFgIfAwUGQyMuTmV0ZGQCBw8PFgIfAwUFMjQ0OTlkZAIJDw8WAh8EBSV+L1Byb2plY3QvSG90ZWwgTWFuYWdlbWVudCBTeXN0ZW0ucmFyZGQC1wEPZBYCZg9kFgoCAQ8PFgIfAwUeT25saW5lIEZhY3VsdHkgRmVlZGJhY2sgU3lzdGVtZGQCAw8PFgIfAwXiAURldmVsb3BpbmcgZWZmZWN0aXZlIG1lY2hhbmlzbXMgZm9yIGZlZWRiYWNrIGNvbGxlY3Rpb24gaW4gbGVhcm5pbmcgZW52aXJvbm1lbnRzIGlzIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgYXQgdGhlIGZyb250aWVycyBvZiBuZXcga25vd2xlZGdlIC5WYWx1aW5nIGFuZCBhc2tpbmcgZm9yIGZlZWRiYWNrIGhhcyByZWNvZ25pemVkIGJlbmVmaXRzIGZvciBib3RoIHN0YWZmIGFuZCBzdHVkZW50cy5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMzI3NGRkAgkPDxYCHwQFFn4vUHJvamVjdC9GZWVkYmFjay5yYXJkZALYAQ9kFgJmD2QWCgIBDw8WAh8DBRFPbmxpbmUgSm9iIFByb3RhbGRkAgMPDxYCHwMFjgFUaGlzIGlzIGEgd2ViIGJhc2VkIFNvbHV0aW9uIGZvciBDYWxsIENlbnRlcnMuQ29tcGxldGUgQ3VzdG9tZXIgQW5kIGNhbGwgY2VudGVyIFJlcHJlc2VudGF0aXZlIG1hbmFnZW1lbnQgaXMgcHJvdmlkZWQgaW4gdGhlIGZpbmQgIE9ubGluZSBqb2IuZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDQxNjlkZAIJDw8WAh8EBRh+L1Byb2plY3Qvam9iIHBvcnRhbC5yYXJkZALZAQ9kFgJmD2QWCgIBDw8WAh8DBRhQZXJzb25hbCBBY2NvdW50IFBsYW5uZXJkZAIDDw8WAh8DBZoEUGVyc29uYWwgQWNjb3VudCBQbGFubmVyIGlzIHRoZSBjb21wbGV0ZSB1c2VyIGludGVyYWN0IHN5c3RlbS4gSXQgaXMgaW50ZWdyYXRlZCB3aWRvd3MgYmFzZWQgdG90YWwgd29ya2Zsb3cgYXV0b21hdGlvbiBzeXN0ZW0gZm9yIGFueSB1c2VyLiBQZXJzb25hbCBBY2NvdW50IFBsYW5uZXIgc2VhbWxlc3NseSBpbnRlZ3JhdGVzIHRoZSBleGlzdGluZyBtYW51YWwgb3Igc2VtaS1hdXRvbWF0ZWQgcHJvY2Vzcywgc3RhcnRpbmcgZnJvbSB1c2VyIGFjY291bnRzLCB0eXBlIG9mIHRyYW5zYWN0aW9ucywgY2F0ZWdvcmllcyBhbmQgdGhlIGZpbmFuY2lhbCB5ZWFycyBhbmQgbGFzdCB0cmFuc2FjdGlvbiBvZiBhY2NvdW50IHRvIGFjY291bnQuIEl0IHdpbGwgYXV0b21hdGljYWxseSBnZW5lcmF0ZSB0aGUgcmVwb3J0IG9mIHRoZSB0cmFuc2FjdGlvbnMgb2YgYWNjb3VudHMgYW5kIEkgd2lsbCBhbHNvIGdlbmVyYXRlIGNoYXJ0IHRvby4gSXQgd2lsbCB1c2VmdWwgdG8gY2FsY3VsYXRlIHlvdXIgaW5jb21lIGFuZCBtYW5nZSB5b3VyIGV4cGVuc2UuIGRkAgUPDxYCHwMFBlZiLk5ldGRkAgcPDxYCHwMFBDg3NzhkZAIJDw8WAh8EBSZ+L1Byb2plY3QvUGVyc29uYWwgQWNjb3VudCBQbGFubmVyLnJhcmRkAtoBD2QWAmYPZBYKAgEPDxYCHwMFGU9ubGluZSBFeGFtaW5hdGlvbiBTeXN0ZW1kZAIDDw8WAh8DBc4BQW4gT25saW5lIEV4YW1pbmF0aW9uIFN5c3RlbSBpcyBhIHdlYiBiYXNlZCBzb2x1dGlvbi5SZWFkeSB0byBydW4gY29kZSBpcyBhdmFpbGFibGUgdG8gZG93bmxvYWQgZnJlZS5Vc2VyIGNhbiBnaXZlIGF2YWlsYWJsZSBleGFtcyBmcm9tIGhvbWUuQSBjYXJlIGlzIHRha2VuIGZvciBTdGF0ZSBtYW5hZ2VtZW50IGFuZCBTeXN0ZW0gZmFpbHVyZSBSZWNvdmVyeS5kZAIFDw8WAh8DBQdBc3AuTmV0ZGQCBw8PFgIfAwUEMzg2N2RkAgkPDxYCHwQFIX4vUHJvamVjdC9vbmxpbmUgZXhhbSBwcm9qZWN0LnJhcmRkAtsBD2QWAmYPZBYKAgEPDxYCHwMFEUludGVybmV0IEJhbmtpbmcgZGQCAw8PFgIfAwXLAVRvZGF5LEludGVybmV0IGJhbmtpbmcgaXMgb25lIG9mIHRoZSBjcnVjaWFsIG5lZWQgZm9yIEJhbmsuVGhpcyBhcHBsaWNhdGlvbiBpbXBsZW1lbnQgaW50ZXJuZXQgYmFua2luZyB3aXRoIFNlY3VyZSBMb2dJbixUcmFuc2FjdGlvbiBGYWNpbGl0eSxCYWxhbmNlIElucXVyeS5Zb3UgY2FuIGRvd25sb2FkIHByb2plY3Qgd2l0aCBjb21wbGV0ZSByZXBvcnQuZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBTE2NDMxZGQCCQ8PFgIfBAUdfi9Qcm9qZWN0L2ludGVybmV0YmFua2luZy56aXBkZALcAQ9kFgJmD2QWCgIBDw8WAh8DBRpSYWlsd2F5IFJlc2VydmF0aW9uIFN5c3RlbWRkAgMPDxYCHwMFdVRoaXMgYXBwbGljYXRpb24gaXMgZGV2ZWxvcGVkIGluIEMvQysrIHRvIGRlbW9zdHJhdGUgcG93ZXIgb2YgT2JqZWN0IE9yaWVudGVkIGxhbmd1YWdlLlRoaXMgaW1wbGVtZW50ZWQgR1VJIGluIEMvQysrLmRkAgUPDxYCHwMFBUMvQysrZGQCBw8PFgIfAwUFMTAxNzhkZAIJDw8WAh8EBRV+L1Byb2plY3QvUkFJTFdBWS5yYXJkZALdAQ9kFgJmD2QWCgIBDw8WAh8DBRNDUk0gRm9yIENhbGwgQ2VudGVyZGQCAw8PFgIfAwWGAVRoaXMgaXMgYSB3ZWIgYmFzZWQgU29sdXRpb24gZm9yIENhbGwgQ2VudGVycy5Db21wbGV0ZSBDdXN0b21lciBBbmQgY2FsbCBjZW50ZXIgUmVwcmVzZW50YXRpdmUgbWFuYWdlbWVudCBpcyBwcm92aWRlZCBpbiB0aGUgc29sdXRpb24uZGQCBQ8PFgIfAwUHQXNwLk5ldGRkAgcPDxYCHwMFBDM4NzFkZAIJDw8WAh8EBSh+L1Byb2plY3QvY3JtX2NhbGxfY2VudHJlX21hbmFnZW1lbnQuemlwZGQC3gEPZBYCZg9kFgoCAQ8PFgIfAwUYTWVkaWNhbCBJbnZlbnRvcnkgU3lzdGVtZGQCAw8PFgIfAwXlAVRoaXMgUHJvamVjdCBpcyB3aW5kb3cgQXBwbGljYXRpb24gZGV2ZWxvcGVkIGluIFZiLk5ldC5CeSBBcHBseWluZyBPT1BzIEZ1bmRhbWVudGFsLENvbXBsZXRlIEludmVudG9yeSBNYW5hZ2VtZW50IGlzIERldmVsb3BlZCB3aXRoIFJlcG9ydCBHZW5lcmF0aW9uIGFuZCBBdXRvbWF0aWMgU3RvY2ssUHVyY2hhc2UgYW5kIFNhbGVzIE1hbmFnZW1lbnQuRnJlZSBUbyBEb3dubG9hZCB3aXRoIFJlcG9ydC5kZAIFDw8WAh8DBQZWYi5OZXRkZAIHDw8WAh8DBQUxNjgyMWRkAgkPDxYCHwQFJn4vUHJvamVjdC9NRURJQ0FMIElOVkVOVE9SWSBTWVNURU0ucmFyZGQC3wEPDxYCHwJoZGQCAw8PZA8QFgFmFgEWAh4OUGFyYW1ldGVyVmFsdWUFBUNFL0lUFgECBWRkGAEFI2N0bDAwJENvbnRlbnRQbGFjZUhvbGRlcjEkR3JpZFZpZXcxDzwrAAwBCAIBZH8m1sdF0xodM/nzfgr8YUbc3nPX8SM4pdptw5f3iDQ4', 
     '__VIEWSTATEGENERATOR': '489F9336', 
     '__EVENTVALIDATION': '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'}

    response = requests.post(exporturl, data=payload, stream=True)
    return response

def validateFile(response):
    if(response.status_code == 200):
        filetype = response.headers['Content-Type']
        if(filetype == "application/octet-stream"):
            filename = cgi.parse_header(response.headers['Content-Disposition'])[-1]['filename']
            filename = filename.split('/')[-1]
            return filename
    return False

def saveFile(response, filename):
    content = response.content
    with open(filename, 'wb') as f:
        f.write(content)

for i in range(1, 224):
    if(i >= 0 and i <= 9):
        i = "0%s"%i
    response = init(str(i))
    filename = validateFile(response)

    if(filename != False):
        saveFile(response, filename)
        print("Project: %s Downloaded Successfully..!!" %filename)
